// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newConsultationExt(db *gorm.DB, opts ...gen.DOOption) consultationExt {
	_consultationExt := consultationExt{}

	_consultationExt.consultationExtDo.UseDB(db, opts...)
	_consultationExt.consultationExtDo.UseModel(&model.ConsultationExt{})

	tableName := _consultationExt.consultationExtDo.TableName()
	_consultationExt.ALL = field.NewAsterisk(tableName)
	_consultationExt.ID = field.NewInt64(tableName, "id")
	_consultationExt.CreatedAt = field.NewTime(tableName, "created_at")
	_consultationExt.UpdatedAt = field.NewTime(tableName, "updated_at")
	_consultationExt.DeletedAt = field.NewField(tableName, "deleted_at")
	_consultationExt.ConsultationID = field.NewInt64(tableName, "consultation_id")
	_consultationExt.DataJSON = field.NewString(tableName, "data_json")
	_consultationExt.DataDesc = field.NewString(tableName, "data_desc")
	_consultationExt.CloseDesc = field.NewString(tableName, "close_desc")
	_consultationExt.SystemAutoDesc = field.NewString(tableName, "system_auto_desc")

	_consultationExt.fillFieldMap()

	return _consultationExt
}

type consultationExt struct {
	consultationExtDo

	ALL            field.Asterisk
	ID             field.Int64  // 自动编号
	CreatedAt      field.Time   // 创建时间
	UpdatedAt      field.Time   // 更新时间
	DeletedAt      field.Field  // 删除时间
	ConsultationID field.Int64  // 咨询编码
	DataJSON       field.String // 咨询内容json
	DataDesc       field.String // 咨询内容
	CloseDesc      field.String // 关闭咨询描述
	SystemAutoDesc field.String // 咨询系统自动分配的详情, 方便后续核查

	fieldMap map[string]field.Expr
}

func (c consultationExt) Table(newTableName string) *consultationExt {
	c.consultationExtDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c consultationExt) As(alias string) *consultationExt {
	c.consultationExtDo.DO = *(c.consultationExtDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *consultationExt) updateTableName(table string) *consultationExt {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.ConsultationID = field.NewInt64(table, "consultation_id")
	c.DataJSON = field.NewString(table, "data_json")
	c.DataDesc = field.NewString(table, "data_desc")
	c.CloseDesc = field.NewString(table, "close_desc")
	c.SystemAutoDesc = field.NewString(table, "system_auto_desc")

	c.fillFieldMap()

	return c
}

func (c *consultationExt) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *consultationExt) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["consultation_id"] = c.ConsultationID
	c.fieldMap["data_json"] = c.DataJSON
	c.fieldMap["data_desc"] = c.DataDesc
	c.fieldMap["close_desc"] = c.CloseDesc
	c.fieldMap["system_auto_desc"] = c.SystemAutoDesc
}

func (c consultationExt) clone(db *gorm.DB) consultationExt {
	c.consultationExtDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c consultationExt) replaceDB(db *gorm.DB) consultationExt {
	c.consultationExtDo.ReplaceDB(db)
	return c
}

type consultationExtDo struct{ gen.DO }

func (c consultationExtDo) Debug() *consultationExtDo {
	return c.withDO(c.DO.Debug())
}

func (c consultationExtDo) WithContext(ctx context.Context) *consultationExtDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c consultationExtDo) ReadDB() *consultationExtDo {
	return c.Clauses(dbresolver.Read)
}

func (c consultationExtDo) WriteDB() *consultationExtDo {
	return c.Clauses(dbresolver.Write)
}

func (c consultationExtDo) Session(config *gorm.Session) *consultationExtDo {
	return c.withDO(c.DO.Session(config))
}

func (c consultationExtDo) Clauses(conds ...clause.Expression) *consultationExtDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c consultationExtDo) Returning(value interface{}, columns ...string) *consultationExtDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c consultationExtDo) Not(conds ...gen.Condition) *consultationExtDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c consultationExtDo) Or(conds ...gen.Condition) *consultationExtDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c consultationExtDo) Select(conds ...field.Expr) *consultationExtDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c consultationExtDo) Where(conds ...gen.Condition) *consultationExtDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c consultationExtDo) Order(conds ...field.Expr) *consultationExtDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c consultationExtDo) Distinct(cols ...field.Expr) *consultationExtDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c consultationExtDo) Omit(cols ...field.Expr) *consultationExtDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c consultationExtDo) Join(table schema.Tabler, on ...field.Expr) *consultationExtDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c consultationExtDo) LeftJoin(table schema.Tabler, on ...field.Expr) *consultationExtDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c consultationExtDo) RightJoin(table schema.Tabler, on ...field.Expr) *consultationExtDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c consultationExtDo) Group(cols ...field.Expr) *consultationExtDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c consultationExtDo) Having(conds ...gen.Condition) *consultationExtDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c consultationExtDo) Limit(limit int) *consultationExtDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c consultationExtDo) Offset(offset int) *consultationExtDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c consultationExtDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *consultationExtDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c consultationExtDo) Unscoped() *consultationExtDo {
	return c.withDO(c.DO.Unscoped())
}

func (c consultationExtDo) Create(values ...*model.ConsultationExt) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c consultationExtDo) CreateInBatches(values []*model.ConsultationExt, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c consultationExtDo) Save(values ...*model.ConsultationExt) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c consultationExtDo) First() (*model.ConsultationExt, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConsultationExt), nil
	}
}

func (c consultationExtDo) Take() (*model.ConsultationExt, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConsultationExt), nil
	}
}

func (c consultationExtDo) Last() (*model.ConsultationExt, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConsultationExt), nil
	}
}

func (c consultationExtDo) Find() ([]*model.ConsultationExt, error) {
	result, err := c.DO.Find()
	return result.([]*model.ConsultationExt), err
}

func (c consultationExtDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ConsultationExt, err error) {
	buf := make([]*model.ConsultationExt, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c consultationExtDo) FindInBatches(result *[]*model.ConsultationExt, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c consultationExtDo) Attrs(attrs ...field.AssignExpr) *consultationExtDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c consultationExtDo) Assign(attrs ...field.AssignExpr) *consultationExtDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c consultationExtDo) Joins(fields ...field.RelationField) *consultationExtDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c consultationExtDo) Preload(fields ...field.RelationField) *consultationExtDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c consultationExtDo) FirstOrInit() (*model.ConsultationExt, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConsultationExt), nil
	}
}

func (c consultationExtDo) FirstOrCreate() (*model.ConsultationExt, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConsultationExt), nil
	}
}

func (c consultationExtDo) FindByPage(offset int, limit int) (result []*model.ConsultationExt, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c consultationExtDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c consultationExtDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c consultationExtDo) Delete(models ...*model.ConsultationExt) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *consultationExtDo) withDO(do gen.Dao) *consultationExtDo {
	c.DO = *do.(*gen.DO)
	return c
}
