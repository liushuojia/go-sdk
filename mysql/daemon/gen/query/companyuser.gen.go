// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newCompanyUser(db *gorm.DB, opts ...gen.DOOption) companyUser {
	_companyUser := companyUser{}

	_companyUser.companyUserDo.UseDB(db, opts...)
	_companyUser.companyUserDo.UseModel(&model.CompanyUser{})

	tableName := _companyUser.companyUserDo.TableName()
	_companyUser.ALL = field.NewAsterisk(tableName)
	_companyUser.ID = field.NewInt64(tableName, "id")
	_companyUser.CreatedAt = field.NewTime(tableName, "created_at")
	_companyUser.UpdatedAt = field.NewTime(tableName, "updated_at")
	_companyUser.DeletedAt = field.NewField(tableName, "deleted_at")
	_companyUser.UID = field.NewInt64(tableName, "uid")
	_companyUser.Cid = field.NewInt64(tableName, "cid")
	_companyUser.CompanyUserCode = field.NewString(tableName, "company_user_code")
	_companyUser.CompanyUserName = field.NewString(tableName, "company_user_name")
	_companyUser.ExpiryTime = field.NewInt64(tableName, "expiry_time")
	_companyUser.Status = field.NewInt64(tableName, "status")

	_companyUser.fillFieldMap()

	return _companyUser
}

type companyUser struct {
	companyUserDo

	ALL             field.Asterisk
	ID              field.Int64  // 自动编号
	CreatedAt       field.Time   // 创建时间
	UpdatedAt       field.Time   // 更新时间
	DeletedAt       field.Field  // 删除时间
	UID             field.Int64  // 用户编号
	Cid             field.Int64  // 公司编码
	CompanyUserCode field.String // 联系人类型编码
	CompanyUserName field.String // 联系人类型名称
	ExpiryTime      field.Int64  // 有效期 0 长期有效
	Status          field.Int64  // 状态 0 禁用 1正常

	fieldMap map[string]field.Expr
}

func (c companyUser) Table(newTableName string) *companyUser {
	c.companyUserDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c companyUser) As(alias string) *companyUser {
	c.companyUserDo.DO = *(c.companyUserDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *companyUser) updateTableName(table string) *companyUser {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.UID = field.NewInt64(table, "uid")
	c.Cid = field.NewInt64(table, "cid")
	c.CompanyUserCode = field.NewString(table, "company_user_code")
	c.CompanyUserName = field.NewString(table, "company_user_name")
	c.ExpiryTime = field.NewInt64(table, "expiry_time")
	c.Status = field.NewInt64(table, "status")

	c.fillFieldMap()

	return c
}

func (c *companyUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *companyUser) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["uid"] = c.UID
	c.fieldMap["cid"] = c.Cid
	c.fieldMap["company_user_code"] = c.CompanyUserCode
	c.fieldMap["company_user_name"] = c.CompanyUserName
	c.fieldMap["expiry_time"] = c.ExpiryTime
	c.fieldMap["status"] = c.Status
}

func (c companyUser) clone(db *gorm.DB) companyUser {
	c.companyUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c companyUser) replaceDB(db *gorm.DB) companyUser {
	c.companyUserDo.ReplaceDB(db)
	return c
}

type companyUserDo struct{ gen.DO }

func (c companyUserDo) Debug() *companyUserDo {
	return c.withDO(c.DO.Debug())
}

func (c companyUserDo) WithContext(ctx context.Context) *companyUserDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c companyUserDo) ReadDB() *companyUserDo {
	return c.Clauses(dbresolver.Read)
}

func (c companyUserDo) WriteDB() *companyUserDo {
	return c.Clauses(dbresolver.Write)
}

func (c companyUserDo) Session(config *gorm.Session) *companyUserDo {
	return c.withDO(c.DO.Session(config))
}

func (c companyUserDo) Clauses(conds ...clause.Expression) *companyUserDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c companyUserDo) Returning(value interface{}, columns ...string) *companyUserDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c companyUserDo) Not(conds ...gen.Condition) *companyUserDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c companyUserDo) Or(conds ...gen.Condition) *companyUserDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c companyUserDo) Select(conds ...field.Expr) *companyUserDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c companyUserDo) Where(conds ...gen.Condition) *companyUserDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c companyUserDo) Order(conds ...field.Expr) *companyUserDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c companyUserDo) Distinct(cols ...field.Expr) *companyUserDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c companyUserDo) Omit(cols ...field.Expr) *companyUserDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c companyUserDo) Join(table schema.Tabler, on ...field.Expr) *companyUserDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c companyUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *companyUserDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c companyUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *companyUserDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c companyUserDo) Group(cols ...field.Expr) *companyUserDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c companyUserDo) Having(conds ...gen.Condition) *companyUserDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c companyUserDo) Limit(limit int) *companyUserDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c companyUserDo) Offset(offset int) *companyUserDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c companyUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *companyUserDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c companyUserDo) Unscoped() *companyUserDo {
	return c.withDO(c.DO.Unscoped())
}

func (c companyUserDo) Create(values ...*model.CompanyUser) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c companyUserDo) CreateInBatches(values []*model.CompanyUser, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c companyUserDo) Save(values ...*model.CompanyUser) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c companyUserDo) First() (*model.CompanyUser, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyUser), nil
	}
}

func (c companyUserDo) Take() (*model.CompanyUser, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyUser), nil
	}
}

func (c companyUserDo) Last() (*model.CompanyUser, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyUser), nil
	}
}

func (c companyUserDo) Find() ([]*model.CompanyUser, error) {
	result, err := c.DO.Find()
	return result.([]*model.CompanyUser), err
}

func (c companyUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CompanyUser, err error) {
	buf := make([]*model.CompanyUser, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c companyUserDo) FindInBatches(result *[]*model.CompanyUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c companyUserDo) Attrs(attrs ...field.AssignExpr) *companyUserDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c companyUserDo) Assign(attrs ...field.AssignExpr) *companyUserDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c companyUserDo) Joins(fields ...field.RelationField) *companyUserDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c companyUserDo) Preload(fields ...field.RelationField) *companyUserDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c companyUserDo) FirstOrInit() (*model.CompanyUser, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyUser), nil
	}
}

func (c companyUserDo) FirstOrCreate() (*model.CompanyUser, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyUser), nil
	}
}

func (c companyUserDo) FindByPage(offset int, limit int) (result []*model.CompanyUser, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c companyUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c companyUserDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c companyUserDo) Delete(models ...*model.CompanyUser) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *companyUserDo) withDO(do gen.Dao) *companyUserDo {
	c.DO = *do.(*gen.DO)
	return c
}
