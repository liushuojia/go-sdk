// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newOrderBase(db *gorm.DB, opts ...gen.DOOption) orderBase {
	_orderBase := orderBase{}

	_orderBase.orderBaseDo.UseDB(db, opts...)
	_orderBase.orderBaseDo.UseModel(&model.OrderBase{})

	tableName := _orderBase.orderBaseDo.TableName()
	_orderBase.ALL = field.NewAsterisk(tableName)
	_orderBase.ID = field.NewInt64(tableName, "id")
	_orderBase.CreatedAt = field.NewTime(tableName, "created_at")
	_orderBase.UpdatedAt = field.NewTime(tableName, "updated_at")
	_orderBase.DeletedAt = field.NewField(tableName, "deleted_at")
	_orderBase.ConsultationID = field.NewInt64(tableName, "consultation_id")
	_orderBase.OrderName = field.NewString(tableName, "order_name")
	_orderBase.OrderDesc = field.NewString(tableName, "order_desc")
	_orderBase.ProductTypeCode = field.NewString(tableName, "product_type_code")
	_orderBase.ProductType = field.NewString(tableName, "product_type")
	_orderBase.ProductTypeAbbreviation = field.NewString(tableName, "product_type_abbreviation")
	_orderBase.SourceCode = field.NewString(tableName, "source_code")
	_orderBase.SourceName = field.NewString(tableName, "source_name")
	_orderBase.SourceAbbreviation = field.NewString(tableName, "source_abbreviation")
	_orderBase.OrderTypeCode = field.NewString(tableName, "order_type_code")
	_orderBase.OrderType = field.NewString(tableName, "order_type")
	_orderBase.OrderTypeAbbreviation = field.NewString(tableName, "order_type_abbreviation")
	_orderBase.DepartureCityCode = field.NewString(tableName, "departure_city_code")
	_orderBase.DepartureCity = field.NewString(tableName, "departure_city")
	_orderBase.ArrivalCityCode = field.NewString(tableName, "arrival_city_code")
	_orderBase.ArrivalCity = field.NewString(tableName, "arrival_city")
	_orderBase.TravelDate = field.NewInt64(tableName, "travel_date")
	_orderBase.ReturnDate = field.NewInt64(tableName, "return_date")
	_orderBase.TravelDayNum = field.NewInt64(tableName, "travel_day_num")
	_orderBase.Status = field.NewInt64(tableName, "status")
	_orderBase.StatusOver = field.NewInt64(tableName, "status_over")
	_orderBase.BecomeOrderAt = field.NewInt64(tableName, "become_order_at")
	_orderBase.UID = field.NewInt64(tableName, "uid")
	_orderBase.UIDName = field.NewString(tableName, "uid_name")
	_orderBase.UIDSex = field.NewInt64(tableName, "uid_sex")
	_orderBase.Mobile = field.NewString(tableName, "mobile")
	_orderBase.Email = field.NewString(tableName, "email")
	_orderBase.Weixin = field.NewString(tableName, "weixin")
	_orderBase.TotalAdultNum = field.NewInt64(tableName, "total_adult_num")
	_orderBase.TotalChildrenNum = field.NewInt64(tableName, "total_children_num")
	_orderBase.Cid = field.NewInt64(tableName, "cid")
	_orderBase.CompanyName = field.NewString(tableName, "company_name")
	_orderBase.Caid = field.NewInt64(tableName, "caid")
	_orderBase.AgreementNum = field.NewString(tableName, "agreement_num")
	_orderBase.SettlementName = field.NewString(tableName, "settlement_name")
	_orderBase.SettlementCode = field.NewString(tableName, "settlement_code")
	_orderBase.OurCompanyID = field.NewInt64(tableName, "our_company_id")
	_orderBase.OurCompanyName = field.NewString(tableName, "our_company_name")
	_orderBase.TotalPrice = field.NewInt64(tableName, "total_price")
	_orderBase.CurrencyTotalPrice = field.NewInt64(tableName, "currency_total_price")
	_orderBase.CurrencyTypeCode = field.NewString(tableName, "currency_type_code")
	_orderBase.CurrencyType = field.NewString(tableName, "currency_type")
	_orderBase.CurrencyTypeAbbreviation = field.NewString(tableName, "currency_type_abbreviation")
	_orderBase.CurrencyCode = field.NewString(tableName, "currency_code")
	_orderBase.CurrencyName = field.NewString(tableName, "currency_name")
	_orderBase.CurrencyExchange = field.NewInt64(tableName, "currency_exchange")
	_orderBase.CurrencyAbbreviation = field.NewString(tableName, "currency_abbreviation")
	_orderBase.CreateOp = field.NewInt64(tableName, "create_op")
	_orderBase.CreateOpName = field.NewString(tableName, "create_op_name")
	_orderBase.BelongOp = field.NewInt64(tableName, "belong_op")
	_orderBase.BelongOpName = field.NewString(tableName, "belong_op_name")
	_orderBase.BelongDepartmentCode = field.NewString(tableName, "belong_department_code")
	_orderBase.BelongDepartmentName = field.NewString(tableName, "belong_department_name")
	_orderBase.BelongOpSec = field.NewInt64(tableName, "belong_op_sec")
	_orderBase.BelongOpSecName = field.NewString(tableName, "belong_op_sec_name")
	_orderBase.BelongDepartmentCodeSec = field.NewString(tableName, "belong_department_code_sec")
	_orderBase.BelongDepartmentNameSec = field.NewString(tableName, "belong_department_name_sec")
	_orderBase.LastFollowTime = field.NewInt64(tableName, "last_follow_time")
	_orderBase.SalesCommissions = field.NewInt64(tableName, "sales_commissions")
	_orderBase.SalesCommissionsTime = field.NewInt64(tableName, "sales_commissions_time")

	_orderBase.fillFieldMap()

	return _orderBase
}

type orderBase struct {
	orderBaseDo

	ALL                      field.Asterisk
	ID                       field.Int64  // 自动编号
	CreatedAt                field.Time   // 创建时间
	UpdatedAt                field.Time   // 更新时间
	DeletedAt                field.Field  // 删除时间
	ConsultationID           field.Int64  // 咨询编号
	OrderName                field.String // 订单名称
	OrderDesc                field.String // 订单备注
	ProductTypeCode          field.String // 产品类型编码
	ProductType              field.String // 产品类型名称
	ProductTypeAbbreviation  field.String // 产品类型简称
	SourceCode               field.String // 来源编码
	SourceName               field.String // 来源名称
	SourceAbbreviation       field.String // 来源简称
	OrderTypeCode            field.String // 订单类型编码
	OrderType                field.String // 订单类型名称
	OrderTypeAbbreviation    field.String // 订单类型简称
	DepartureCityCode        field.String // 出发地编码
	DepartureCity            field.String // 出发地名称
	ArrivalCityCode          field.String // 目的地编码
	ArrivalCity              field.String // 目的地名称
	TravelDate               field.Int64  // 出发日期
	ReturnDate               field.Int64  // 返程日期
	TravelDayNum             field.Int64  // 出行天数
	Status                   field.Int64  // 0 需求单	1正式订单 -1 取消订单
	StatusOver               field.Int64  //  0 未设置 2 财务报账 1 订单归档(订单关闭)
	BecomeOrderAt            field.Int64  // 成单时间
	UID                      field.Int64  // 联系人id
	UIDName                  field.String // 联系人姓名
	UIDSex                   field.Int64  // 联系人性别
	Mobile                   field.String // 手机号码
	Email                    field.String // 邮箱
	Weixin                   field.String // 微信号
	TotalAdultNum            field.Int64  // 总成人数
	TotalChildrenNum         field.Int64  // 总儿童数
	Cid                      field.Int64  // 公司id
	CompanyName              field.String // 公司名称
	Caid                     field.Int64  // 协议id
	AgreementNum             field.String // 协议编号
	SettlementName           field.String // 结算方式
	SettlementCode           field.String // 结算方式编码
	OurCompanyID             field.Int64  // 签约公司id
	OurCompanyName           field.String // 签约公司名
	TotalPrice               field.Int64  // 人民币总价格 单位分
	CurrencyTotalPrice       field.Int64  // 币种总价 单位分
	CurrencyTypeCode         field.String // 订单币种类型编码
	CurrencyType             field.String // 订单币种类型
	CurrencyTypeAbbreviation field.String // 订单币种类型 简写
	CurrencyCode             field.String // 币种编码
	CurrencyName             field.String // 币种名称
	CurrencyExchange         field.Int64  // 币种汇率*10000
	CurrencyAbbreviation     field.String // 币种简写
	CreateOp                 field.Int64  // 创建op
	CreateOpName             field.String // 创建op姓名
	BelongOp                 field.Int64  // 所属op
	BelongOpName             field.String // 所属op姓名
	BelongDepartmentCode     field.String // 所属部门编码
	BelongDepartmentName     field.String // 所属部门名称
	BelongOpSec              field.Int64  // 所属op2
	BelongOpSecName          field.String // 所属op2姓名
	BelongDepartmentCodeSec  field.String // 所属部门编码2
	BelongDepartmentNameSec  field.String // 所属部门名称2
	LastFollowTime           field.Int64  // 最后处理时间
	SalesCommissions         field.Int64  // 销售提成 0 默认 1 已提成
	SalesCommissionsTime     field.Int64  // 销售提成时间

	fieldMap map[string]field.Expr
}

func (o orderBase) Table(newTableName string) *orderBase {
	o.orderBaseDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderBase) As(alias string) *orderBase {
	o.orderBaseDo.DO = *(o.orderBaseDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderBase) updateTableName(table string) *orderBase {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")
	o.ConsultationID = field.NewInt64(table, "consultation_id")
	o.OrderName = field.NewString(table, "order_name")
	o.OrderDesc = field.NewString(table, "order_desc")
	o.ProductTypeCode = field.NewString(table, "product_type_code")
	o.ProductType = field.NewString(table, "product_type")
	o.ProductTypeAbbreviation = field.NewString(table, "product_type_abbreviation")
	o.SourceCode = field.NewString(table, "source_code")
	o.SourceName = field.NewString(table, "source_name")
	o.SourceAbbreviation = field.NewString(table, "source_abbreviation")
	o.OrderTypeCode = field.NewString(table, "order_type_code")
	o.OrderType = field.NewString(table, "order_type")
	o.OrderTypeAbbreviation = field.NewString(table, "order_type_abbreviation")
	o.DepartureCityCode = field.NewString(table, "departure_city_code")
	o.DepartureCity = field.NewString(table, "departure_city")
	o.ArrivalCityCode = field.NewString(table, "arrival_city_code")
	o.ArrivalCity = field.NewString(table, "arrival_city")
	o.TravelDate = field.NewInt64(table, "travel_date")
	o.ReturnDate = field.NewInt64(table, "return_date")
	o.TravelDayNum = field.NewInt64(table, "travel_day_num")
	o.Status = field.NewInt64(table, "status")
	o.StatusOver = field.NewInt64(table, "status_over")
	o.BecomeOrderAt = field.NewInt64(table, "become_order_at")
	o.UID = field.NewInt64(table, "uid")
	o.UIDName = field.NewString(table, "uid_name")
	o.UIDSex = field.NewInt64(table, "uid_sex")
	o.Mobile = field.NewString(table, "mobile")
	o.Email = field.NewString(table, "email")
	o.Weixin = field.NewString(table, "weixin")
	o.TotalAdultNum = field.NewInt64(table, "total_adult_num")
	o.TotalChildrenNum = field.NewInt64(table, "total_children_num")
	o.Cid = field.NewInt64(table, "cid")
	o.CompanyName = field.NewString(table, "company_name")
	o.Caid = field.NewInt64(table, "caid")
	o.AgreementNum = field.NewString(table, "agreement_num")
	o.SettlementName = field.NewString(table, "settlement_name")
	o.SettlementCode = field.NewString(table, "settlement_code")
	o.OurCompanyID = field.NewInt64(table, "our_company_id")
	o.OurCompanyName = field.NewString(table, "our_company_name")
	o.TotalPrice = field.NewInt64(table, "total_price")
	o.CurrencyTotalPrice = field.NewInt64(table, "currency_total_price")
	o.CurrencyTypeCode = field.NewString(table, "currency_type_code")
	o.CurrencyType = field.NewString(table, "currency_type")
	o.CurrencyTypeAbbreviation = field.NewString(table, "currency_type_abbreviation")
	o.CurrencyCode = field.NewString(table, "currency_code")
	o.CurrencyName = field.NewString(table, "currency_name")
	o.CurrencyExchange = field.NewInt64(table, "currency_exchange")
	o.CurrencyAbbreviation = field.NewString(table, "currency_abbreviation")
	o.CreateOp = field.NewInt64(table, "create_op")
	o.CreateOpName = field.NewString(table, "create_op_name")
	o.BelongOp = field.NewInt64(table, "belong_op")
	o.BelongOpName = field.NewString(table, "belong_op_name")
	o.BelongDepartmentCode = field.NewString(table, "belong_department_code")
	o.BelongDepartmentName = field.NewString(table, "belong_department_name")
	o.BelongOpSec = field.NewInt64(table, "belong_op_sec")
	o.BelongOpSecName = field.NewString(table, "belong_op_sec_name")
	o.BelongDepartmentCodeSec = field.NewString(table, "belong_department_code_sec")
	o.BelongDepartmentNameSec = field.NewString(table, "belong_department_name_sec")
	o.LastFollowTime = field.NewInt64(table, "last_follow_time")
	o.SalesCommissions = field.NewInt64(table, "sales_commissions")
	o.SalesCommissionsTime = field.NewInt64(table, "sales_commissions_time")

	o.fillFieldMap()

	return o
}

func (o *orderBase) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderBase) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 64)
	o.fieldMap["id"] = o.ID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["consultation_id"] = o.ConsultationID
	o.fieldMap["order_name"] = o.OrderName
	o.fieldMap["order_desc"] = o.OrderDesc
	o.fieldMap["product_type_code"] = o.ProductTypeCode
	o.fieldMap["product_type"] = o.ProductType
	o.fieldMap["product_type_abbreviation"] = o.ProductTypeAbbreviation
	o.fieldMap["source_code"] = o.SourceCode
	o.fieldMap["source_name"] = o.SourceName
	o.fieldMap["source_abbreviation"] = o.SourceAbbreviation
	o.fieldMap["order_type_code"] = o.OrderTypeCode
	o.fieldMap["order_type"] = o.OrderType
	o.fieldMap["order_type_abbreviation"] = o.OrderTypeAbbreviation
	o.fieldMap["departure_city_code"] = o.DepartureCityCode
	o.fieldMap["departure_city"] = o.DepartureCity
	o.fieldMap["arrival_city_code"] = o.ArrivalCityCode
	o.fieldMap["arrival_city"] = o.ArrivalCity
	o.fieldMap["travel_date"] = o.TravelDate
	o.fieldMap["return_date"] = o.ReturnDate
	o.fieldMap["travel_day_num"] = o.TravelDayNum
	o.fieldMap["status"] = o.Status
	o.fieldMap["status_over"] = o.StatusOver
	o.fieldMap["become_order_at"] = o.BecomeOrderAt
	o.fieldMap["uid"] = o.UID
	o.fieldMap["uid_name"] = o.UIDName
	o.fieldMap["uid_sex"] = o.UIDSex
	o.fieldMap["mobile"] = o.Mobile
	o.fieldMap["email"] = o.Email
	o.fieldMap["weixin"] = o.Weixin
	o.fieldMap["total_adult_num"] = o.TotalAdultNum
	o.fieldMap["total_children_num"] = o.TotalChildrenNum
	o.fieldMap["cid"] = o.Cid
	o.fieldMap["company_name"] = o.CompanyName
	o.fieldMap["caid"] = o.Caid
	o.fieldMap["agreement_num"] = o.AgreementNum
	o.fieldMap["settlement_name"] = o.SettlementName
	o.fieldMap["settlement_code"] = o.SettlementCode
	o.fieldMap["our_company_id"] = o.OurCompanyID
	o.fieldMap["our_company_name"] = o.OurCompanyName
	o.fieldMap["total_price"] = o.TotalPrice
	o.fieldMap["currency_total_price"] = o.CurrencyTotalPrice
	o.fieldMap["currency_type_code"] = o.CurrencyTypeCode
	o.fieldMap["currency_type"] = o.CurrencyType
	o.fieldMap["currency_type_abbreviation"] = o.CurrencyTypeAbbreviation
	o.fieldMap["currency_code"] = o.CurrencyCode
	o.fieldMap["currency_name"] = o.CurrencyName
	o.fieldMap["currency_exchange"] = o.CurrencyExchange
	o.fieldMap["currency_abbreviation"] = o.CurrencyAbbreviation
	o.fieldMap["create_op"] = o.CreateOp
	o.fieldMap["create_op_name"] = o.CreateOpName
	o.fieldMap["belong_op"] = o.BelongOp
	o.fieldMap["belong_op_name"] = o.BelongOpName
	o.fieldMap["belong_department_code"] = o.BelongDepartmentCode
	o.fieldMap["belong_department_name"] = o.BelongDepartmentName
	o.fieldMap["belong_op_sec"] = o.BelongOpSec
	o.fieldMap["belong_op_sec_name"] = o.BelongOpSecName
	o.fieldMap["belong_department_code_sec"] = o.BelongDepartmentCodeSec
	o.fieldMap["belong_department_name_sec"] = o.BelongDepartmentNameSec
	o.fieldMap["last_follow_time"] = o.LastFollowTime
	o.fieldMap["sales_commissions"] = o.SalesCommissions
	o.fieldMap["sales_commissions_time"] = o.SalesCommissionsTime
}

func (o orderBase) clone(db *gorm.DB) orderBase {
	o.orderBaseDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderBase) replaceDB(db *gorm.DB) orderBase {
	o.orderBaseDo.ReplaceDB(db)
	return o
}

type orderBaseDo struct{ gen.DO }

func (o orderBaseDo) Debug() *orderBaseDo {
	return o.withDO(o.DO.Debug())
}

func (o orderBaseDo) WithContext(ctx context.Context) *orderBaseDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderBaseDo) ReadDB() *orderBaseDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderBaseDo) WriteDB() *orderBaseDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderBaseDo) Session(config *gorm.Session) *orderBaseDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderBaseDo) Clauses(conds ...clause.Expression) *orderBaseDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderBaseDo) Returning(value interface{}, columns ...string) *orderBaseDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderBaseDo) Not(conds ...gen.Condition) *orderBaseDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderBaseDo) Or(conds ...gen.Condition) *orderBaseDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderBaseDo) Select(conds ...field.Expr) *orderBaseDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderBaseDo) Where(conds ...gen.Condition) *orderBaseDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderBaseDo) Order(conds ...field.Expr) *orderBaseDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderBaseDo) Distinct(cols ...field.Expr) *orderBaseDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderBaseDo) Omit(cols ...field.Expr) *orderBaseDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderBaseDo) Join(table schema.Tabler, on ...field.Expr) *orderBaseDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderBaseDo) LeftJoin(table schema.Tabler, on ...field.Expr) *orderBaseDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderBaseDo) RightJoin(table schema.Tabler, on ...field.Expr) *orderBaseDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderBaseDo) Group(cols ...field.Expr) *orderBaseDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderBaseDo) Having(conds ...gen.Condition) *orderBaseDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderBaseDo) Limit(limit int) *orderBaseDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderBaseDo) Offset(offset int) *orderBaseDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderBaseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *orderBaseDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderBaseDo) Unscoped() *orderBaseDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderBaseDo) Create(values ...*model.OrderBase) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderBaseDo) CreateInBatches(values []*model.OrderBase, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderBaseDo) Save(values ...*model.OrderBase) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderBaseDo) First() (*model.OrderBase, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderBase), nil
	}
}

func (o orderBaseDo) Take() (*model.OrderBase, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderBase), nil
	}
}

func (o orderBaseDo) Last() (*model.OrderBase, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderBase), nil
	}
}

func (o orderBaseDo) Find() ([]*model.OrderBase, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrderBase), err
}

func (o orderBaseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderBase, err error) {
	buf := make([]*model.OrderBase, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderBaseDo) FindInBatches(result *[]*model.OrderBase, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderBaseDo) Attrs(attrs ...field.AssignExpr) *orderBaseDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderBaseDo) Assign(attrs ...field.AssignExpr) *orderBaseDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderBaseDo) Joins(fields ...field.RelationField) *orderBaseDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderBaseDo) Preload(fields ...field.RelationField) *orderBaseDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderBaseDo) FirstOrInit() (*model.OrderBase, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderBase), nil
	}
}

func (o orderBaseDo) FirstOrCreate() (*model.OrderBase, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderBase), nil
	}
}

func (o orderBaseDo) FindByPage(offset int, limit int) (result []*model.OrderBase, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderBaseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderBaseDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderBaseDo) Delete(models ...*model.OrderBase) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderBaseDo) withDO(do gen.Dao) *orderBaseDo {
	o.DO = *do.(*gen.DO)
	return o
}
