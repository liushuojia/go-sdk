// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newOurDatum(db *gorm.DB, opts ...gen.DOOption) ourDatum {
	_ourDatum := ourDatum{}

	_ourDatum.ourDatumDo.UseDB(db, opts...)
	_ourDatum.ourDatumDo.UseModel(&model.OurDatum{})

	tableName := _ourDatum.ourDatumDo.TableName()
	_ourDatum.ALL = field.NewAsterisk(tableName)
	_ourDatum.ID = field.NewInt64(tableName, "id")
	_ourDatum.CreatedAt = field.NewTime(tableName, "created_at")
	_ourDatum.UpdatedAt = field.NewTime(tableName, "updated_at")
	_ourDatum.DeletedAt = field.NewField(tableName, "deleted_at")
	_ourDatum.DataCode = field.NewString(tableName, "data_code")
	_ourDatum.DataType = field.NewString(tableName, "data_type")
	_ourDatum.DataTypeGroup = field.NewString(tableName, "data_type_group")
	_ourDatum.DataTitle = field.NewString(tableName, "data_title")
	_ourDatum.DataContent = field.NewString(tableName, "data_content")

	_ourDatum.fillFieldMap()

	return _ourDatum
}

type ourDatum struct {
	ourDatumDo

	ALL           field.Asterisk
	ID            field.Int64  // 自动编号
	CreatedAt     field.Time   // 创建时间
	UpdatedAt     field.Time   // 更新时间
	DeletedAt     field.Field  // 删除时间
	DataCode      field.String // 应用编码
	DataType      field.String // 类型编码
	DataTypeGroup field.String // 类型分组
	DataTitle     field.String // 类型标题
	DataContent   field.String // json内容

	fieldMap map[string]field.Expr
}

func (o ourDatum) Table(newTableName string) *ourDatum {
	o.ourDatumDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o ourDatum) As(alias string) *ourDatum {
	o.ourDatumDo.DO = *(o.ourDatumDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *ourDatum) updateTableName(table string) *ourDatum {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")
	o.DataCode = field.NewString(table, "data_code")
	o.DataType = field.NewString(table, "data_type")
	o.DataTypeGroup = field.NewString(table, "data_type_group")
	o.DataTitle = field.NewString(table, "data_title")
	o.DataContent = field.NewString(table, "data_content")

	o.fillFieldMap()

	return o
}

func (o *ourDatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *ourDatum) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 9)
	o.fieldMap["id"] = o.ID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["data_code"] = o.DataCode
	o.fieldMap["data_type"] = o.DataType
	o.fieldMap["data_type_group"] = o.DataTypeGroup
	o.fieldMap["data_title"] = o.DataTitle
	o.fieldMap["data_content"] = o.DataContent
}

func (o ourDatum) clone(db *gorm.DB) ourDatum {
	o.ourDatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o ourDatum) replaceDB(db *gorm.DB) ourDatum {
	o.ourDatumDo.ReplaceDB(db)
	return o
}

type ourDatumDo struct{ gen.DO }

func (o ourDatumDo) Debug() *ourDatumDo {
	return o.withDO(o.DO.Debug())
}

func (o ourDatumDo) WithContext(ctx context.Context) *ourDatumDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o ourDatumDo) ReadDB() *ourDatumDo {
	return o.Clauses(dbresolver.Read)
}

func (o ourDatumDo) WriteDB() *ourDatumDo {
	return o.Clauses(dbresolver.Write)
}

func (o ourDatumDo) Session(config *gorm.Session) *ourDatumDo {
	return o.withDO(o.DO.Session(config))
}

func (o ourDatumDo) Clauses(conds ...clause.Expression) *ourDatumDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o ourDatumDo) Returning(value interface{}, columns ...string) *ourDatumDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o ourDatumDo) Not(conds ...gen.Condition) *ourDatumDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o ourDatumDo) Or(conds ...gen.Condition) *ourDatumDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o ourDatumDo) Select(conds ...field.Expr) *ourDatumDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o ourDatumDo) Where(conds ...gen.Condition) *ourDatumDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o ourDatumDo) Order(conds ...field.Expr) *ourDatumDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o ourDatumDo) Distinct(cols ...field.Expr) *ourDatumDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o ourDatumDo) Omit(cols ...field.Expr) *ourDatumDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o ourDatumDo) Join(table schema.Tabler, on ...field.Expr) *ourDatumDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o ourDatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) *ourDatumDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o ourDatumDo) RightJoin(table schema.Tabler, on ...field.Expr) *ourDatumDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o ourDatumDo) Group(cols ...field.Expr) *ourDatumDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o ourDatumDo) Having(conds ...gen.Condition) *ourDatumDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o ourDatumDo) Limit(limit int) *ourDatumDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o ourDatumDo) Offset(offset int) *ourDatumDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o ourDatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *ourDatumDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o ourDatumDo) Unscoped() *ourDatumDo {
	return o.withDO(o.DO.Unscoped())
}

func (o ourDatumDo) Create(values ...*model.OurDatum) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o ourDatumDo) CreateInBatches(values []*model.OurDatum, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o ourDatumDo) Save(values ...*model.OurDatum) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o ourDatumDo) First() (*model.OurDatum, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OurDatum), nil
	}
}

func (o ourDatumDo) Take() (*model.OurDatum, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OurDatum), nil
	}
}

func (o ourDatumDo) Last() (*model.OurDatum, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OurDatum), nil
	}
}

func (o ourDatumDo) Find() ([]*model.OurDatum, error) {
	result, err := o.DO.Find()
	return result.([]*model.OurDatum), err
}

func (o ourDatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OurDatum, err error) {
	buf := make([]*model.OurDatum, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o ourDatumDo) FindInBatches(result *[]*model.OurDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o ourDatumDo) Attrs(attrs ...field.AssignExpr) *ourDatumDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o ourDatumDo) Assign(attrs ...field.AssignExpr) *ourDatumDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o ourDatumDo) Joins(fields ...field.RelationField) *ourDatumDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o ourDatumDo) Preload(fields ...field.RelationField) *ourDatumDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o ourDatumDo) FirstOrInit() (*model.OurDatum, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OurDatum), nil
	}
}

func (o ourDatumDo) FirstOrCreate() (*model.OurDatum, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OurDatum), nil
	}
}

func (o ourDatumDo) FindByPage(offset int, limit int) (result []*model.OurDatum, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o ourDatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o ourDatumDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o ourDatumDo) Delete(models ...*model.OurDatum) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *ourDatumDo) withDO(do gen.Dao) *ourDatumDo {
	o.DO = *do.(*gen.DO)
	return o
}
