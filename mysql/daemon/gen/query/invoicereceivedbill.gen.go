// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newInvoiceReceivedBill(db *gorm.DB, opts ...gen.DOOption) invoiceReceivedBill {
	_invoiceReceivedBill := invoiceReceivedBill{}

	_invoiceReceivedBill.invoiceReceivedBillDo.UseDB(db, opts...)
	_invoiceReceivedBill.invoiceReceivedBillDo.UseModel(&model.InvoiceReceivedBill{})

	tableName := _invoiceReceivedBill.invoiceReceivedBillDo.TableName()
	_invoiceReceivedBill.ALL = field.NewAsterisk(tableName)
	_invoiceReceivedBill.ID = field.NewInt64(tableName, "id")
	_invoiceReceivedBill.CreatedAt = field.NewTime(tableName, "created_at")
	_invoiceReceivedBill.UpdatedAt = field.NewTime(tableName, "updated_at")
	_invoiceReceivedBill.DeletedAt = field.NewField(tableName, "deleted_at")
	_invoiceReceivedBill.ReceivedID = field.NewInt64(tableName, "received_id")
	_invoiceReceivedBill.PaymentID = field.NewInt64(tableName, "payment_id")
	_invoiceReceivedBill.BillPrice = field.NewInt64(tableName, "bill_price")
	_invoiceReceivedBill.Status = field.NewInt64(tableName, "status")

	_invoiceReceivedBill.fillFieldMap()

	return _invoiceReceivedBill
}

type invoiceReceivedBill struct {
	invoiceReceivedBillDo

	ALL        field.Asterisk
	ID         field.Int64 // 自动编号
	CreatedAt  field.Time  // 创建时间
	UpdatedAt  field.Time  // 更新时间
	DeletedAt  field.Field // 删除时间
	ReceivedID field.Int64 // 回收发票id
	PaymentID  field.Int64 // 收付款id
	BillPrice  field.Int64 // 核销金额
	Status     field.Int64 // 1 已确认 0 待确认

	fieldMap map[string]field.Expr
}

func (i invoiceReceivedBill) Table(newTableName string) *invoiceReceivedBill {
	i.invoiceReceivedBillDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i invoiceReceivedBill) As(alias string) *invoiceReceivedBill {
	i.invoiceReceivedBillDo.DO = *(i.invoiceReceivedBillDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *invoiceReceivedBill) updateTableName(table string) *invoiceReceivedBill {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt64(table, "id")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")
	i.DeletedAt = field.NewField(table, "deleted_at")
	i.ReceivedID = field.NewInt64(table, "received_id")
	i.PaymentID = field.NewInt64(table, "payment_id")
	i.BillPrice = field.NewInt64(table, "bill_price")
	i.Status = field.NewInt64(table, "status")

	i.fillFieldMap()

	return i
}

func (i *invoiceReceivedBill) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *invoiceReceivedBill) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 8)
	i.fieldMap["id"] = i.ID
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
	i.fieldMap["deleted_at"] = i.DeletedAt
	i.fieldMap["received_id"] = i.ReceivedID
	i.fieldMap["payment_id"] = i.PaymentID
	i.fieldMap["bill_price"] = i.BillPrice
	i.fieldMap["status"] = i.Status
}

func (i invoiceReceivedBill) clone(db *gorm.DB) invoiceReceivedBill {
	i.invoiceReceivedBillDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i invoiceReceivedBill) replaceDB(db *gorm.DB) invoiceReceivedBill {
	i.invoiceReceivedBillDo.ReplaceDB(db)
	return i
}

type invoiceReceivedBillDo struct{ gen.DO }

func (i invoiceReceivedBillDo) Debug() *invoiceReceivedBillDo {
	return i.withDO(i.DO.Debug())
}

func (i invoiceReceivedBillDo) WithContext(ctx context.Context) *invoiceReceivedBillDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i invoiceReceivedBillDo) ReadDB() *invoiceReceivedBillDo {
	return i.Clauses(dbresolver.Read)
}

func (i invoiceReceivedBillDo) WriteDB() *invoiceReceivedBillDo {
	return i.Clauses(dbresolver.Write)
}

func (i invoiceReceivedBillDo) Session(config *gorm.Session) *invoiceReceivedBillDo {
	return i.withDO(i.DO.Session(config))
}

func (i invoiceReceivedBillDo) Clauses(conds ...clause.Expression) *invoiceReceivedBillDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i invoiceReceivedBillDo) Returning(value interface{}, columns ...string) *invoiceReceivedBillDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i invoiceReceivedBillDo) Not(conds ...gen.Condition) *invoiceReceivedBillDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i invoiceReceivedBillDo) Or(conds ...gen.Condition) *invoiceReceivedBillDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i invoiceReceivedBillDo) Select(conds ...field.Expr) *invoiceReceivedBillDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i invoiceReceivedBillDo) Where(conds ...gen.Condition) *invoiceReceivedBillDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i invoiceReceivedBillDo) Order(conds ...field.Expr) *invoiceReceivedBillDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i invoiceReceivedBillDo) Distinct(cols ...field.Expr) *invoiceReceivedBillDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i invoiceReceivedBillDo) Omit(cols ...field.Expr) *invoiceReceivedBillDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i invoiceReceivedBillDo) Join(table schema.Tabler, on ...field.Expr) *invoiceReceivedBillDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i invoiceReceivedBillDo) LeftJoin(table schema.Tabler, on ...field.Expr) *invoiceReceivedBillDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i invoiceReceivedBillDo) RightJoin(table schema.Tabler, on ...field.Expr) *invoiceReceivedBillDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i invoiceReceivedBillDo) Group(cols ...field.Expr) *invoiceReceivedBillDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i invoiceReceivedBillDo) Having(conds ...gen.Condition) *invoiceReceivedBillDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i invoiceReceivedBillDo) Limit(limit int) *invoiceReceivedBillDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i invoiceReceivedBillDo) Offset(offset int) *invoiceReceivedBillDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i invoiceReceivedBillDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *invoiceReceivedBillDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i invoiceReceivedBillDo) Unscoped() *invoiceReceivedBillDo {
	return i.withDO(i.DO.Unscoped())
}

func (i invoiceReceivedBillDo) Create(values ...*model.InvoiceReceivedBill) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i invoiceReceivedBillDo) CreateInBatches(values []*model.InvoiceReceivedBill, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i invoiceReceivedBillDo) Save(values ...*model.InvoiceReceivedBill) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i invoiceReceivedBillDo) First() (*model.InvoiceReceivedBill, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvoiceReceivedBill), nil
	}
}

func (i invoiceReceivedBillDo) Take() (*model.InvoiceReceivedBill, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvoiceReceivedBill), nil
	}
}

func (i invoiceReceivedBillDo) Last() (*model.InvoiceReceivedBill, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvoiceReceivedBill), nil
	}
}

func (i invoiceReceivedBillDo) Find() ([]*model.InvoiceReceivedBill, error) {
	result, err := i.DO.Find()
	return result.([]*model.InvoiceReceivedBill), err
}

func (i invoiceReceivedBillDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InvoiceReceivedBill, err error) {
	buf := make([]*model.InvoiceReceivedBill, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i invoiceReceivedBillDo) FindInBatches(result *[]*model.InvoiceReceivedBill, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i invoiceReceivedBillDo) Attrs(attrs ...field.AssignExpr) *invoiceReceivedBillDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i invoiceReceivedBillDo) Assign(attrs ...field.AssignExpr) *invoiceReceivedBillDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i invoiceReceivedBillDo) Joins(fields ...field.RelationField) *invoiceReceivedBillDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i invoiceReceivedBillDo) Preload(fields ...field.RelationField) *invoiceReceivedBillDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i invoiceReceivedBillDo) FirstOrInit() (*model.InvoiceReceivedBill, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvoiceReceivedBill), nil
	}
}

func (i invoiceReceivedBillDo) FirstOrCreate() (*model.InvoiceReceivedBill, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvoiceReceivedBill), nil
	}
}

func (i invoiceReceivedBillDo) FindByPage(offset int, limit int) (result []*model.InvoiceReceivedBill, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i invoiceReceivedBillDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i invoiceReceivedBillDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i invoiceReceivedBillDo) Delete(models ...*model.InvoiceReceivedBill) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *invoiceReceivedBillDo) withDO(do gen.Dao) *invoiceReceivedBillDo {
	i.DO = *do.(*gen.DO)
	return i
}
