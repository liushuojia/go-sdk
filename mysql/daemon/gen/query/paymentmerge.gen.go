// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newPaymentMerge(db *gorm.DB, opts ...gen.DOOption) paymentMerge {
	_paymentMerge := paymentMerge{}

	_paymentMerge.paymentMergeDo.UseDB(db, opts...)
	_paymentMerge.paymentMergeDo.UseModel(&model.PaymentMerge{})

	tableName := _paymentMerge.paymentMergeDo.TableName()
	_paymentMerge.ALL = field.NewAsterisk(tableName)
	_paymentMerge.ID = field.NewInt64(tableName, "id")
	_paymentMerge.CreatedAt = field.NewTime(tableName, "created_at")
	_paymentMerge.UpdatedAt = field.NewTime(tableName, "updated_at")
	_paymentMerge.DeletedAt = field.NewField(tableName, "deleted_at")
	_paymentMerge.PaymentType = field.NewInt64(tableName, "payment_type")
	_paymentMerge.MergeType = field.NewString(tableName, "merge_type")
	_paymentMerge.MergeID = field.NewInt64(tableName, "merge_id")
	_paymentMerge.MergeName = field.NewString(tableName, "merge_name")
	_paymentMerge.Status = field.NewInt64(tableName, "status")
	_paymentMerge.MergeStatus = field.NewInt64(tableName, "merge_status")
	_paymentMerge.PayType = field.NewInt64(tableName, "pay_type")
	_paymentMerge.ConfirmedPrice = field.NewInt64(tableName, "confirmed_price")
	_paymentMerge.PaymentProjectCode = field.NewString(tableName, "payment_project_code")
	_paymentMerge.PaymentProjectName = field.NewString(tableName, "payment_project_name")
	_paymentMerge.CurrencyCode = field.NewString(tableName, "currency_code")
	_paymentMerge.CurrencyName = field.NewString(tableName, "currency_name")
	_paymentMerge.CurrencyExchange = field.NewInt64(tableName, "currency_exchange")
	_paymentMerge.CurrencyAbbreviation = field.NewString(tableName, "currency_abbreviation")
	_paymentMerge.CurrencyPrice = field.NewInt64(tableName, "currency_price")
	_paymentMerge.TotalPrice = field.NewInt64(tableName, "total_price")
	_paymentMerge.BankPaymentID = field.NewInt64(tableName, "bank_payment_id")
	_paymentMerge.BankPaymentTitle = field.NewString(tableName, "bank_payment_title")
	_paymentMerge.PayBankID = field.NewInt64(tableName, "pay_bank_id")
	_paymentMerge.PayBankType = field.NewString(tableName, "pay_bank_type")
	_paymentMerge.PayBankTypeCode = field.NewString(tableName, "pay_bank_type_code")
	_paymentMerge.PayBankName = field.NewString(tableName, "pay_bank_name")
	_paymentMerge.PayBankNum = field.NewString(tableName, "pay_bank_num")
	_paymentMerge.PayBankAccount = field.NewString(tableName, "pay_bank_account")
	_paymentMerge.ReceiveBankID = field.NewInt64(tableName, "receive_bank_id")
	_paymentMerge.ReceiveBankType = field.NewString(tableName, "receive_bank_type")
	_paymentMerge.ReceiveBankTypeCode = field.NewString(tableName, "receive_bank_type_code")
	_paymentMerge.ReceiveBankName = field.NewString(tableName, "receive_bank_name")
	_paymentMerge.ReceiveBankNum = field.NewString(tableName, "receive_bank_num")
	_paymentMerge.ReceiveBankAccount = field.NewString(tableName, "receive_bank_account")
	_paymentMerge.CommissionPrice = field.NewInt64(tableName, "commission_price")
	_paymentMerge.CommissionType = field.NewInt64(tableName, "commission_type")
	_paymentMerge.OurCompanyID = field.NewInt64(tableName, "our_company_id")
	_paymentMerge.OurCompanyName = field.NewString(tableName, "our_company_name")
	_paymentMerge.BankFlow = field.NewString(tableName, "bank_flow")
	_paymentMerge.PaymentTime = field.NewInt64(tableName, "payment_time")
	_paymentMerge.PaymentDesc = field.NewString(tableName, "payment_desc")
	_paymentMerge.PaymentOp = field.NewInt64(tableName, "payment_op")
	_paymentMerge.PaymentOpName = field.NewString(tableName, "payment_op_name")
	_paymentMerge.CreateOp = field.NewInt64(tableName, "create_op")
	_paymentMerge.CreateOpName = field.NewString(tableName, "create_op_name")
	_paymentMerge.BelongOp = field.NewInt64(tableName, "belong_op")
	_paymentMerge.BelongOpName = field.NewString(tableName, "belong_op_name")
	_paymentMerge.BelongDepartmentCode = field.NewString(tableName, "belong_department_code")
	_paymentMerge.BelongDepartmentName = field.NewString(tableName, "belong_department_name")
	_paymentMerge.FileList = field.NewString(tableName, "file_list")
	_paymentMerge.BankFollowID = field.NewInt64(tableName, "bank_follow_id")

	_paymentMerge.fillFieldMap()

	return _paymentMerge
}

type paymentMerge struct {
	paymentMergeDo

	ALL                  field.Asterisk
	ID                   field.Int64  // 自动编号
	CreatedAt            field.Time   // 创建时间
	UpdatedAt            field.Time   // 更新时间
	DeletedAt            field.Field  // 删除时间
	PaymentType          field.Int64  // 类型 0 收款 1 付款
	MergeType            field.String // 客户类型 company 公司 user 联系人
	MergeID              field.Int64  // 客户ID
	MergeName            field.String // 客户名称
	Status               field.Int64  // 状态 -2 等待出纳付款 -1 流程中  0  保存中  1 有效
	MergeStatus          field.Int64  // 核销状态 0 核销中 1 核销完成
	PayType              field.Int64  // 付款类型 0 批量付款 1 付款流程
	ConfirmedPrice       field.Int64  // 已核销金额
	PaymentProjectCode   field.String // 收付款项目 编码
	PaymentProjectName   field.String // 收付款项目 名称
	CurrencyCode         field.String // 币种编码
	CurrencyName         field.String // 币种名称
	CurrencyExchange     field.Int64  // 币种汇率*10000
	CurrencyAbbreviation field.String // 币种简写
	CurrencyPrice        field.Int64  // 币种价格 单位分
	TotalPrice           field.Int64  // 折合人民币 单位分
	BankPaymentID        field.Int64  // 收付款 方式
	BankPaymentTitle     field.String // 收付款 名称
	PayBankID            field.Int64  // 付款账户 系统id 0 为非系统账户
	PayBankType          field.String // 付款账户 类型
	PayBankTypeCode      field.String // 付款账户 类型编码
	PayBankName          field.String // 付款账户 开户行
	PayBankNum           field.String // 付款账户 账户
	PayBankAccount       field.String // 付款账户 账户名
	ReceiveBankID        field.Int64  // 收款账户 系统id 0 为非系统账户
	ReceiveBankType      field.String // 收款账户 类型
	ReceiveBankTypeCode  field.String // 收款账户 类型编码
	ReceiveBankName      field.String // 收款账户 开户行
	ReceiveBankNum       field.String // 收款账户 账户
	ReceiveBankAccount   field.String // 收款账户 账户名
	CommissionPrice      field.Int64  // 手续费
	CommissionType       field.Int64  // 0 人民币手续费   1 原币种手续费
	OurCompanyID         field.Int64  // 公司主体
	OurCompanyName       field.String // 公司主体名称
	BankFlow             field.String // 交易流水
	PaymentTime          field.Int64  // 付款/收款 时间
	PaymentDesc          field.String // 描述
	PaymentOp            field.Int64  // 付款OP
	PaymentOpName        field.String // 付款OP姓名
	CreateOp             field.Int64  // 创建op
	CreateOpName         field.String // 创建op姓名
	BelongOp             field.Int64  // 所属op
	BelongOpName         field.String // 所属op姓名
	BelongDepartmentCode field.String // 所属部门编码
	BelongDepartmentName field.String // 所属部门名称
	FileList             field.String // 附件列表
	BankFollowID         field.Int64  // 银行流水自动编号 	0 为未产生流水

	fieldMap map[string]field.Expr
}

func (p paymentMerge) Table(newTableName string) *paymentMerge {
	p.paymentMergeDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p paymentMerge) As(alias string) *paymentMerge {
	p.paymentMergeDo.DO = *(p.paymentMergeDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *paymentMerge) updateTableName(table string) *paymentMerge {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.PaymentType = field.NewInt64(table, "payment_type")
	p.MergeType = field.NewString(table, "merge_type")
	p.MergeID = field.NewInt64(table, "merge_id")
	p.MergeName = field.NewString(table, "merge_name")
	p.Status = field.NewInt64(table, "status")
	p.MergeStatus = field.NewInt64(table, "merge_status")
	p.PayType = field.NewInt64(table, "pay_type")
	p.ConfirmedPrice = field.NewInt64(table, "confirmed_price")
	p.PaymentProjectCode = field.NewString(table, "payment_project_code")
	p.PaymentProjectName = field.NewString(table, "payment_project_name")
	p.CurrencyCode = field.NewString(table, "currency_code")
	p.CurrencyName = field.NewString(table, "currency_name")
	p.CurrencyExchange = field.NewInt64(table, "currency_exchange")
	p.CurrencyAbbreviation = field.NewString(table, "currency_abbreviation")
	p.CurrencyPrice = field.NewInt64(table, "currency_price")
	p.TotalPrice = field.NewInt64(table, "total_price")
	p.BankPaymentID = field.NewInt64(table, "bank_payment_id")
	p.BankPaymentTitle = field.NewString(table, "bank_payment_title")
	p.PayBankID = field.NewInt64(table, "pay_bank_id")
	p.PayBankType = field.NewString(table, "pay_bank_type")
	p.PayBankTypeCode = field.NewString(table, "pay_bank_type_code")
	p.PayBankName = field.NewString(table, "pay_bank_name")
	p.PayBankNum = field.NewString(table, "pay_bank_num")
	p.PayBankAccount = field.NewString(table, "pay_bank_account")
	p.ReceiveBankID = field.NewInt64(table, "receive_bank_id")
	p.ReceiveBankType = field.NewString(table, "receive_bank_type")
	p.ReceiveBankTypeCode = field.NewString(table, "receive_bank_type_code")
	p.ReceiveBankName = field.NewString(table, "receive_bank_name")
	p.ReceiveBankNum = field.NewString(table, "receive_bank_num")
	p.ReceiveBankAccount = field.NewString(table, "receive_bank_account")
	p.CommissionPrice = field.NewInt64(table, "commission_price")
	p.CommissionType = field.NewInt64(table, "commission_type")
	p.OurCompanyID = field.NewInt64(table, "our_company_id")
	p.OurCompanyName = field.NewString(table, "our_company_name")
	p.BankFlow = field.NewString(table, "bank_flow")
	p.PaymentTime = field.NewInt64(table, "payment_time")
	p.PaymentDesc = field.NewString(table, "payment_desc")
	p.PaymentOp = field.NewInt64(table, "payment_op")
	p.PaymentOpName = field.NewString(table, "payment_op_name")
	p.CreateOp = field.NewInt64(table, "create_op")
	p.CreateOpName = field.NewString(table, "create_op_name")
	p.BelongOp = field.NewInt64(table, "belong_op")
	p.BelongOpName = field.NewString(table, "belong_op_name")
	p.BelongDepartmentCode = field.NewString(table, "belong_department_code")
	p.BelongDepartmentName = field.NewString(table, "belong_department_name")
	p.FileList = field.NewString(table, "file_list")
	p.BankFollowID = field.NewInt64(table, "bank_follow_id")

	p.fillFieldMap()

	return p
}

func (p *paymentMerge) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *paymentMerge) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 51)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["payment_type"] = p.PaymentType
	p.fieldMap["merge_type"] = p.MergeType
	p.fieldMap["merge_id"] = p.MergeID
	p.fieldMap["merge_name"] = p.MergeName
	p.fieldMap["status"] = p.Status
	p.fieldMap["merge_status"] = p.MergeStatus
	p.fieldMap["pay_type"] = p.PayType
	p.fieldMap["confirmed_price"] = p.ConfirmedPrice
	p.fieldMap["payment_project_code"] = p.PaymentProjectCode
	p.fieldMap["payment_project_name"] = p.PaymentProjectName
	p.fieldMap["currency_code"] = p.CurrencyCode
	p.fieldMap["currency_name"] = p.CurrencyName
	p.fieldMap["currency_exchange"] = p.CurrencyExchange
	p.fieldMap["currency_abbreviation"] = p.CurrencyAbbreviation
	p.fieldMap["currency_price"] = p.CurrencyPrice
	p.fieldMap["total_price"] = p.TotalPrice
	p.fieldMap["bank_payment_id"] = p.BankPaymentID
	p.fieldMap["bank_payment_title"] = p.BankPaymentTitle
	p.fieldMap["pay_bank_id"] = p.PayBankID
	p.fieldMap["pay_bank_type"] = p.PayBankType
	p.fieldMap["pay_bank_type_code"] = p.PayBankTypeCode
	p.fieldMap["pay_bank_name"] = p.PayBankName
	p.fieldMap["pay_bank_num"] = p.PayBankNum
	p.fieldMap["pay_bank_account"] = p.PayBankAccount
	p.fieldMap["receive_bank_id"] = p.ReceiveBankID
	p.fieldMap["receive_bank_type"] = p.ReceiveBankType
	p.fieldMap["receive_bank_type_code"] = p.ReceiveBankTypeCode
	p.fieldMap["receive_bank_name"] = p.ReceiveBankName
	p.fieldMap["receive_bank_num"] = p.ReceiveBankNum
	p.fieldMap["receive_bank_account"] = p.ReceiveBankAccount
	p.fieldMap["commission_price"] = p.CommissionPrice
	p.fieldMap["commission_type"] = p.CommissionType
	p.fieldMap["our_company_id"] = p.OurCompanyID
	p.fieldMap["our_company_name"] = p.OurCompanyName
	p.fieldMap["bank_flow"] = p.BankFlow
	p.fieldMap["payment_time"] = p.PaymentTime
	p.fieldMap["payment_desc"] = p.PaymentDesc
	p.fieldMap["payment_op"] = p.PaymentOp
	p.fieldMap["payment_op_name"] = p.PaymentOpName
	p.fieldMap["create_op"] = p.CreateOp
	p.fieldMap["create_op_name"] = p.CreateOpName
	p.fieldMap["belong_op"] = p.BelongOp
	p.fieldMap["belong_op_name"] = p.BelongOpName
	p.fieldMap["belong_department_code"] = p.BelongDepartmentCode
	p.fieldMap["belong_department_name"] = p.BelongDepartmentName
	p.fieldMap["file_list"] = p.FileList
	p.fieldMap["bank_follow_id"] = p.BankFollowID
}

func (p paymentMerge) clone(db *gorm.DB) paymentMerge {
	p.paymentMergeDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p paymentMerge) replaceDB(db *gorm.DB) paymentMerge {
	p.paymentMergeDo.ReplaceDB(db)
	return p
}

type paymentMergeDo struct{ gen.DO }

func (p paymentMergeDo) Debug() *paymentMergeDo {
	return p.withDO(p.DO.Debug())
}

func (p paymentMergeDo) WithContext(ctx context.Context) *paymentMergeDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p paymentMergeDo) ReadDB() *paymentMergeDo {
	return p.Clauses(dbresolver.Read)
}

func (p paymentMergeDo) WriteDB() *paymentMergeDo {
	return p.Clauses(dbresolver.Write)
}

func (p paymentMergeDo) Session(config *gorm.Session) *paymentMergeDo {
	return p.withDO(p.DO.Session(config))
}

func (p paymentMergeDo) Clauses(conds ...clause.Expression) *paymentMergeDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p paymentMergeDo) Returning(value interface{}, columns ...string) *paymentMergeDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p paymentMergeDo) Not(conds ...gen.Condition) *paymentMergeDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p paymentMergeDo) Or(conds ...gen.Condition) *paymentMergeDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p paymentMergeDo) Select(conds ...field.Expr) *paymentMergeDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p paymentMergeDo) Where(conds ...gen.Condition) *paymentMergeDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p paymentMergeDo) Order(conds ...field.Expr) *paymentMergeDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p paymentMergeDo) Distinct(cols ...field.Expr) *paymentMergeDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p paymentMergeDo) Omit(cols ...field.Expr) *paymentMergeDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p paymentMergeDo) Join(table schema.Tabler, on ...field.Expr) *paymentMergeDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p paymentMergeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *paymentMergeDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p paymentMergeDo) RightJoin(table schema.Tabler, on ...field.Expr) *paymentMergeDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p paymentMergeDo) Group(cols ...field.Expr) *paymentMergeDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p paymentMergeDo) Having(conds ...gen.Condition) *paymentMergeDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p paymentMergeDo) Limit(limit int) *paymentMergeDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p paymentMergeDo) Offset(offset int) *paymentMergeDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p paymentMergeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *paymentMergeDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p paymentMergeDo) Unscoped() *paymentMergeDo {
	return p.withDO(p.DO.Unscoped())
}

func (p paymentMergeDo) Create(values ...*model.PaymentMerge) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p paymentMergeDo) CreateInBatches(values []*model.PaymentMerge, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p paymentMergeDo) Save(values ...*model.PaymentMerge) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p paymentMergeDo) First() (*model.PaymentMerge, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentMerge), nil
	}
}

func (p paymentMergeDo) Take() (*model.PaymentMerge, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentMerge), nil
	}
}

func (p paymentMergeDo) Last() (*model.PaymentMerge, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentMerge), nil
	}
}

func (p paymentMergeDo) Find() ([]*model.PaymentMerge, error) {
	result, err := p.DO.Find()
	return result.([]*model.PaymentMerge), err
}

func (p paymentMergeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PaymentMerge, err error) {
	buf := make([]*model.PaymentMerge, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p paymentMergeDo) FindInBatches(result *[]*model.PaymentMerge, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p paymentMergeDo) Attrs(attrs ...field.AssignExpr) *paymentMergeDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p paymentMergeDo) Assign(attrs ...field.AssignExpr) *paymentMergeDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p paymentMergeDo) Joins(fields ...field.RelationField) *paymentMergeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p paymentMergeDo) Preload(fields ...field.RelationField) *paymentMergeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p paymentMergeDo) FirstOrInit() (*model.PaymentMerge, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentMerge), nil
	}
}

func (p paymentMergeDo) FirstOrCreate() (*model.PaymentMerge, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentMerge), nil
	}
}

func (p paymentMergeDo) FindByPage(offset int, limit int) (result []*model.PaymentMerge, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p paymentMergeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p paymentMergeDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p paymentMergeDo) Delete(models ...*model.PaymentMerge) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *paymentMergeDo) withDO(do gen.Dao) *paymentMergeDo {
	p.DO = *do.(*gen.DO)
	return p
}
