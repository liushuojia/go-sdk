// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newProcessChild(db *gorm.DB, opts ...gen.DOOption) processChild {
	_processChild := processChild{}

	_processChild.processChildDo.UseDB(db, opts...)
	_processChild.processChildDo.UseModel(&model.ProcessChild{})

	tableName := _processChild.processChildDo.TableName()
	_processChild.ALL = field.NewAsterisk(tableName)
	_processChild.ID = field.NewInt64(tableName, "id")
	_processChild.CreatedAt = field.NewTime(tableName, "created_at")
	_processChild.UpdatedAt = field.NewTime(tableName, "updated_at")
	_processChild.DeletedAt = field.NewField(tableName, "deleted_at")
	_processChild.CheckTitle = field.NewString(tableName, "check_title")
	_processChild.CheckDesc = field.NewString(tableName, "check_desc")
	_processChild.Mid = field.NewInt64(tableName, "mid")
	_processChild.LevelAt = field.NewInt64(tableName, "level_at")
	_processChild.CheckRole = field.NewString(tableName, "check_role")
	_processChild.CheckRoleCode = field.NewString(tableName, "check_role_code")

	_processChild.fillFieldMap()

	return _processChild
}

type processChild struct {
	processChildDo

	ALL           field.Asterisk
	ID            field.Int64  // 自动编号
	CreatedAt     field.Time   // 创建时间
	UpdatedAt     field.Time   // 更新时间
	DeletedAt     field.Field  // 删除时间
	CheckTitle    field.String // 标题
	CheckDesc     field.String // 审核时候 描述
	Mid           field.Int64  // 主表id
	LevelAt       field.Int64  // 所在层级
	CheckRole     field.String // 审核权限名称
	CheckRoleCode field.String // 审核权限编码

	fieldMap map[string]field.Expr
}

func (p processChild) Table(newTableName string) *processChild {
	p.processChildDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p processChild) As(alias string) *processChild {
	p.processChildDo.DO = *(p.processChildDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *processChild) updateTableName(table string) *processChild {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.CheckTitle = field.NewString(table, "check_title")
	p.CheckDesc = field.NewString(table, "check_desc")
	p.Mid = field.NewInt64(table, "mid")
	p.LevelAt = field.NewInt64(table, "level_at")
	p.CheckRole = field.NewString(table, "check_role")
	p.CheckRoleCode = field.NewString(table, "check_role_code")

	p.fillFieldMap()

	return p
}

func (p *processChild) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *processChild) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["check_title"] = p.CheckTitle
	p.fieldMap["check_desc"] = p.CheckDesc
	p.fieldMap["mid"] = p.Mid
	p.fieldMap["level_at"] = p.LevelAt
	p.fieldMap["check_role"] = p.CheckRole
	p.fieldMap["check_role_code"] = p.CheckRoleCode
}

func (p processChild) clone(db *gorm.DB) processChild {
	p.processChildDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p processChild) replaceDB(db *gorm.DB) processChild {
	p.processChildDo.ReplaceDB(db)
	return p
}

type processChildDo struct{ gen.DO }

func (p processChildDo) Debug() *processChildDo {
	return p.withDO(p.DO.Debug())
}

func (p processChildDo) WithContext(ctx context.Context) *processChildDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p processChildDo) ReadDB() *processChildDo {
	return p.Clauses(dbresolver.Read)
}

func (p processChildDo) WriteDB() *processChildDo {
	return p.Clauses(dbresolver.Write)
}

func (p processChildDo) Session(config *gorm.Session) *processChildDo {
	return p.withDO(p.DO.Session(config))
}

func (p processChildDo) Clauses(conds ...clause.Expression) *processChildDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p processChildDo) Returning(value interface{}, columns ...string) *processChildDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p processChildDo) Not(conds ...gen.Condition) *processChildDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p processChildDo) Or(conds ...gen.Condition) *processChildDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p processChildDo) Select(conds ...field.Expr) *processChildDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p processChildDo) Where(conds ...gen.Condition) *processChildDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p processChildDo) Order(conds ...field.Expr) *processChildDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p processChildDo) Distinct(cols ...field.Expr) *processChildDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p processChildDo) Omit(cols ...field.Expr) *processChildDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p processChildDo) Join(table schema.Tabler, on ...field.Expr) *processChildDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p processChildDo) LeftJoin(table schema.Tabler, on ...field.Expr) *processChildDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p processChildDo) RightJoin(table schema.Tabler, on ...field.Expr) *processChildDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p processChildDo) Group(cols ...field.Expr) *processChildDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p processChildDo) Having(conds ...gen.Condition) *processChildDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p processChildDo) Limit(limit int) *processChildDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p processChildDo) Offset(offset int) *processChildDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p processChildDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *processChildDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p processChildDo) Unscoped() *processChildDo {
	return p.withDO(p.DO.Unscoped())
}

func (p processChildDo) Create(values ...*model.ProcessChild) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p processChildDo) CreateInBatches(values []*model.ProcessChild, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p processChildDo) Save(values ...*model.ProcessChild) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p processChildDo) First() (*model.ProcessChild, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessChild), nil
	}
}

func (p processChildDo) Take() (*model.ProcessChild, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessChild), nil
	}
}

func (p processChildDo) Last() (*model.ProcessChild, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessChild), nil
	}
}

func (p processChildDo) Find() ([]*model.ProcessChild, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProcessChild), err
}

func (p processChildDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProcessChild, err error) {
	buf := make([]*model.ProcessChild, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p processChildDo) FindInBatches(result *[]*model.ProcessChild, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p processChildDo) Attrs(attrs ...field.AssignExpr) *processChildDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p processChildDo) Assign(attrs ...field.AssignExpr) *processChildDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p processChildDo) Joins(fields ...field.RelationField) *processChildDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p processChildDo) Preload(fields ...field.RelationField) *processChildDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p processChildDo) FirstOrInit() (*model.ProcessChild, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessChild), nil
	}
}

func (p processChildDo) FirstOrCreate() (*model.ProcessChild, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessChild), nil
	}
}

func (p processChildDo) FindByPage(offset int, limit int) (result []*model.ProcessChild, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p processChildDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p processChildDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p processChildDo) Delete(models ...*model.ProcessChild) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *processChildDo) withDO(do gen.Dao) *processChildDo {
	p.DO = *do.(*gen.DO)
	return p
}
