// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newBankFlow(db *gorm.DB, opts ...gen.DOOption) bankFlow {
	_bankFlow := bankFlow{}

	_bankFlow.bankFlowDo.UseDB(db, opts...)
	_bankFlow.bankFlowDo.UseModel(&model.BankFlow{})

	tableName := _bankFlow.bankFlowDo.TableName()
	_bankFlow.ALL = field.NewAsterisk(tableName)
	_bankFlow.ID = field.NewInt64(tableName, "id")
	_bankFlow.CreatedAt = field.NewTime(tableName, "created_at")
	_bankFlow.UpdatedAt = field.NewTime(tableName, "updated_at")
	_bankFlow.DeletedAt = field.NewField(tableName, "deleted_at")
	_bankFlow.BankID = field.NewInt64(tableName, "bank_id")
	_bankFlow.BankName = field.NewString(tableName, "bank_name")
	_bankFlow.BankNum = field.NewString(tableName, "bank_num")
	_bankFlow.BankAccount = field.NewString(tableName, "bank_account")
	_bankFlow.BankFlow = field.NewString(tableName, "bank_flow")
	_bankFlow.BankDesc = field.NewString(tableName, "bank_desc")
	_bankFlow.CurrencyCode = field.NewString(tableName, "currency_code")
	_bankFlow.CurrencyName = field.NewString(tableName, "currency_name")
	_bankFlow.CurrencyAbbreviation = field.NewString(tableName, "currency_abbreviation")
	_bankFlow.CurrencyExchange = field.NewInt64(tableName, "currency_exchange")
	_bankFlow.CurrencyPrice = field.NewInt64(tableName, "currency_price")
	_bankFlow.TotalPrice = field.NewInt64(tableName, "total_price")
	_bankFlow.OurCompanyID = field.NewInt64(tableName, "our_company_id")
	_bankFlow.OurCompanyName = field.NewString(tableName, "our_company_name")
	_bankFlow.PaymentTime = field.NewInt64(tableName, "payment_time")

	_bankFlow.fillFieldMap()

	return _bankFlow
}

type bankFlow struct {
	bankFlowDo

	ALL                  field.Asterisk
	ID                   field.Int64  // 自动编号
	CreatedAt            field.Time   // 创建时间
	UpdatedAt            field.Time   // 更新时间
	DeletedAt            field.Field  // 删除时间
	BankID               field.Int64  // 银行账号id
	BankName             field.String // 开户行
	BankNum              field.String // 账户
	BankAccount          field.String // 账户名
	BankFlow             field.String // 交易流水
	BankDesc             field.String // 备注
	CurrencyCode         field.String // 币种编码
	CurrencyName         field.String // 币种名称
	CurrencyAbbreviation field.String // 币种简写
	CurrencyExchange     field.Int64  // 币种汇率
	CurrencyPrice        field.Int64  // 币种价格 单位分
	TotalPrice           field.Int64  // 折合人民币 单位分
	OurCompanyID         field.Int64  // 公司主体
	OurCompanyName       field.String // 公司主体名称
	PaymentTime          field.Int64  // 收付款时间

	fieldMap map[string]field.Expr
}

func (b bankFlow) Table(newTableName string) *bankFlow {
	b.bankFlowDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bankFlow) As(alias string) *bankFlow {
	b.bankFlowDo.DO = *(b.bankFlowDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bankFlow) updateTableName(table string) *bankFlow {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.UpdatedAt = field.NewTime(table, "updated_at")
	b.DeletedAt = field.NewField(table, "deleted_at")
	b.BankID = field.NewInt64(table, "bank_id")
	b.BankName = field.NewString(table, "bank_name")
	b.BankNum = field.NewString(table, "bank_num")
	b.BankAccount = field.NewString(table, "bank_account")
	b.BankFlow = field.NewString(table, "bank_flow")
	b.BankDesc = field.NewString(table, "bank_desc")
	b.CurrencyCode = field.NewString(table, "currency_code")
	b.CurrencyName = field.NewString(table, "currency_name")
	b.CurrencyAbbreviation = field.NewString(table, "currency_abbreviation")
	b.CurrencyExchange = field.NewInt64(table, "currency_exchange")
	b.CurrencyPrice = field.NewInt64(table, "currency_price")
	b.TotalPrice = field.NewInt64(table, "total_price")
	b.OurCompanyID = field.NewInt64(table, "our_company_id")
	b.OurCompanyName = field.NewString(table, "our_company_name")
	b.PaymentTime = field.NewInt64(table, "payment_time")

	b.fillFieldMap()

	return b
}

func (b *bankFlow) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bankFlow) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 19)
	b.fieldMap["id"] = b.ID
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
	b.fieldMap["deleted_at"] = b.DeletedAt
	b.fieldMap["bank_id"] = b.BankID
	b.fieldMap["bank_name"] = b.BankName
	b.fieldMap["bank_num"] = b.BankNum
	b.fieldMap["bank_account"] = b.BankAccount
	b.fieldMap["bank_flow"] = b.BankFlow
	b.fieldMap["bank_desc"] = b.BankDesc
	b.fieldMap["currency_code"] = b.CurrencyCode
	b.fieldMap["currency_name"] = b.CurrencyName
	b.fieldMap["currency_abbreviation"] = b.CurrencyAbbreviation
	b.fieldMap["currency_exchange"] = b.CurrencyExchange
	b.fieldMap["currency_price"] = b.CurrencyPrice
	b.fieldMap["total_price"] = b.TotalPrice
	b.fieldMap["our_company_id"] = b.OurCompanyID
	b.fieldMap["our_company_name"] = b.OurCompanyName
	b.fieldMap["payment_time"] = b.PaymentTime
}

func (b bankFlow) clone(db *gorm.DB) bankFlow {
	b.bankFlowDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bankFlow) replaceDB(db *gorm.DB) bankFlow {
	b.bankFlowDo.ReplaceDB(db)
	return b
}

type bankFlowDo struct{ gen.DO }

func (b bankFlowDo) Debug() *bankFlowDo {
	return b.withDO(b.DO.Debug())
}

func (b bankFlowDo) WithContext(ctx context.Context) *bankFlowDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bankFlowDo) ReadDB() *bankFlowDo {
	return b.Clauses(dbresolver.Read)
}

func (b bankFlowDo) WriteDB() *bankFlowDo {
	return b.Clauses(dbresolver.Write)
}

func (b bankFlowDo) Session(config *gorm.Session) *bankFlowDo {
	return b.withDO(b.DO.Session(config))
}

func (b bankFlowDo) Clauses(conds ...clause.Expression) *bankFlowDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bankFlowDo) Returning(value interface{}, columns ...string) *bankFlowDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bankFlowDo) Not(conds ...gen.Condition) *bankFlowDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bankFlowDo) Or(conds ...gen.Condition) *bankFlowDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bankFlowDo) Select(conds ...field.Expr) *bankFlowDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bankFlowDo) Where(conds ...gen.Condition) *bankFlowDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bankFlowDo) Order(conds ...field.Expr) *bankFlowDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bankFlowDo) Distinct(cols ...field.Expr) *bankFlowDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bankFlowDo) Omit(cols ...field.Expr) *bankFlowDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bankFlowDo) Join(table schema.Tabler, on ...field.Expr) *bankFlowDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bankFlowDo) LeftJoin(table schema.Tabler, on ...field.Expr) *bankFlowDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bankFlowDo) RightJoin(table schema.Tabler, on ...field.Expr) *bankFlowDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bankFlowDo) Group(cols ...field.Expr) *bankFlowDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bankFlowDo) Having(conds ...gen.Condition) *bankFlowDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bankFlowDo) Limit(limit int) *bankFlowDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bankFlowDo) Offset(offset int) *bankFlowDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bankFlowDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *bankFlowDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bankFlowDo) Unscoped() *bankFlowDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bankFlowDo) Create(values ...*model.BankFlow) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bankFlowDo) CreateInBatches(values []*model.BankFlow, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bankFlowDo) Save(values ...*model.BankFlow) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bankFlowDo) First() (*model.BankFlow, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BankFlow), nil
	}
}

func (b bankFlowDo) Take() (*model.BankFlow, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BankFlow), nil
	}
}

func (b bankFlowDo) Last() (*model.BankFlow, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BankFlow), nil
	}
}

func (b bankFlowDo) Find() ([]*model.BankFlow, error) {
	result, err := b.DO.Find()
	return result.([]*model.BankFlow), err
}

func (b bankFlowDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BankFlow, err error) {
	buf := make([]*model.BankFlow, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bankFlowDo) FindInBatches(result *[]*model.BankFlow, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bankFlowDo) Attrs(attrs ...field.AssignExpr) *bankFlowDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bankFlowDo) Assign(attrs ...field.AssignExpr) *bankFlowDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bankFlowDo) Joins(fields ...field.RelationField) *bankFlowDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bankFlowDo) Preload(fields ...field.RelationField) *bankFlowDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bankFlowDo) FirstOrInit() (*model.BankFlow, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BankFlow), nil
	}
}

func (b bankFlowDo) FirstOrCreate() (*model.BankFlow, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BankFlow), nil
	}
}

func (b bankFlowDo) FindByPage(offset int, limit int) (result []*model.BankFlow, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bankFlowDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bankFlowDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bankFlowDo) Delete(models ...*model.BankFlow) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bankFlowDo) withDO(do gen.Dao) *bankFlowDo {
	b.DO = *do.(*gen.DO)
	return b
}
