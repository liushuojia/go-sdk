// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newFollowPlan(db *gorm.DB, opts ...gen.DOOption) followPlan {
	_followPlan := followPlan{}

	_followPlan.followPlanDo.UseDB(db, opts...)
	_followPlan.followPlanDo.UseModel(&model.FollowPlan{})

	tableName := _followPlan.followPlanDo.TableName()
	_followPlan.ALL = field.NewAsterisk(tableName)
	_followPlan.ID = field.NewInt64(tableName, "id")
	_followPlan.CreatedAt = field.NewTime(tableName, "created_at")
	_followPlan.UpdatedAt = field.NewTime(tableName, "updated_at")
	_followPlan.DeletedAt = field.NewField(tableName, "deleted_at")
	_followPlan.DataCode = field.NewString(tableName, "data_code")
	_followPlan.DataType = field.NewInt64(tableName, "data_type")
	_followPlan.DataID = field.NewInt64(tableName, "data_id")
	_followPlan.BelongOp = field.NewInt64(tableName, "belong_op")
	_followPlan.BelongOpName = field.NewString(tableName, "belong_op_name")
	_followPlan.BelongDepartmentCode = field.NewString(tableName, "belong_department_code")
	_followPlan.BelongDepartmentName = field.NewString(tableName, "belong_department_name")
	_followPlan.CreateOp = field.NewInt64(tableName, "create_op")
	_followPlan.CreateOpName = field.NewString(tableName, "create_op_name")
	_followPlan.FollowTitle = field.NewString(tableName, "follow_title")
	_followPlan.FollowDesc = field.NewString(tableName, "follow_desc")
	_followPlan.Status = field.NewInt64(tableName, "status")
	_followPlan.FollowResult = field.NewString(tableName, "follow_result")
	_followPlan.FollowPlanDay = field.NewInt64(tableName, "follow_plan_day")
	_followPlan.AutoFollowID = field.NewInt64(tableName, "auto_follow_id")

	_followPlan.fillFieldMap()

	return _followPlan
}

type followPlan struct {
	followPlanDo

	ALL                  field.Asterisk
	ID                   field.Int64  // 自动编号
	CreatedAt            field.Time   // 创建时间
	UpdatedAt            field.Time   // 更新时间
	DeletedAt            field.Field  // 删除时间
	DataCode             field.String // 业务所属编码
	DataType             field.Int64  // 业务所属类型id
	DataID               field.Int64  // 业务所属自增id
	BelongOp             field.Int64  // 所属OP
	BelongOpName         field.String // 所属op姓名
	BelongDepartmentCode field.String // 所属部门编码
	BelongDepartmentName field.String // 所属部门名称
	CreateOp             field.Int64  // 创建OP
	CreateOpName         field.String // 创建OP姓名
	FollowTitle          field.String // 跟进标题
	FollowDesc           field.String // 跟进内容
	Status               field.Int64  // 状态 0 计划跟进中 1 跟进完成
	FollowResult         field.String // 跟进结果描述
	FollowPlanDay        field.Int64  // 计划跟进日期时间戳
	AutoFollowID         field.Int64  // 系统计划跟进id 索引id

	fieldMap map[string]field.Expr
}

func (f followPlan) Table(newTableName string) *followPlan {
	f.followPlanDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f followPlan) As(alias string) *followPlan {
	f.followPlanDo.DO = *(f.followPlanDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *followPlan) updateTableName(table string) *followPlan {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")
	f.DataCode = field.NewString(table, "data_code")
	f.DataType = field.NewInt64(table, "data_type")
	f.DataID = field.NewInt64(table, "data_id")
	f.BelongOp = field.NewInt64(table, "belong_op")
	f.BelongOpName = field.NewString(table, "belong_op_name")
	f.BelongDepartmentCode = field.NewString(table, "belong_department_code")
	f.BelongDepartmentName = field.NewString(table, "belong_department_name")
	f.CreateOp = field.NewInt64(table, "create_op")
	f.CreateOpName = field.NewString(table, "create_op_name")
	f.FollowTitle = field.NewString(table, "follow_title")
	f.FollowDesc = field.NewString(table, "follow_desc")
	f.Status = field.NewInt64(table, "status")
	f.FollowResult = field.NewString(table, "follow_result")
	f.FollowPlanDay = field.NewInt64(table, "follow_plan_day")
	f.AutoFollowID = field.NewInt64(table, "auto_follow_id")

	f.fillFieldMap()

	return f
}

func (f *followPlan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *followPlan) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 19)
	f.fieldMap["id"] = f.ID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
	f.fieldMap["data_code"] = f.DataCode
	f.fieldMap["data_type"] = f.DataType
	f.fieldMap["data_id"] = f.DataID
	f.fieldMap["belong_op"] = f.BelongOp
	f.fieldMap["belong_op_name"] = f.BelongOpName
	f.fieldMap["belong_department_code"] = f.BelongDepartmentCode
	f.fieldMap["belong_department_name"] = f.BelongDepartmentName
	f.fieldMap["create_op"] = f.CreateOp
	f.fieldMap["create_op_name"] = f.CreateOpName
	f.fieldMap["follow_title"] = f.FollowTitle
	f.fieldMap["follow_desc"] = f.FollowDesc
	f.fieldMap["status"] = f.Status
	f.fieldMap["follow_result"] = f.FollowResult
	f.fieldMap["follow_plan_day"] = f.FollowPlanDay
	f.fieldMap["auto_follow_id"] = f.AutoFollowID
}

func (f followPlan) clone(db *gorm.DB) followPlan {
	f.followPlanDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f followPlan) replaceDB(db *gorm.DB) followPlan {
	f.followPlanDo.ReplaceDB(db)
	return f
}

type followPlanDo struct{ gen.DO }

func (f followPlanDo) Debug() *followPlanDo {
	return f.withDO(f.DO.Debug())
}

func (f followPlanDo) WithContext(ctx context.Context) *followPlanDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f followPlanDo) ReadDB() *followPlanDo {
	return f.Clauses(dbresolver.Read)
}

func (f followPlanDo) WriteDB() *followPlanDo {
	return f.Clauses(dbresolver.Write)
}

func (f followPlanDo) Session(config *gorm.Session) *followPlanDo {
	return f.withDO(f.DO.Session(config))
}

func (f followPlanDo) Clauses(conds ...clause.Expression) *followPlanDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f followPlanDo) Returning(value interface{}, columns ...string) *followPlanDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f followPlanDo) Not(conds ...gen.Condition) *followPlanDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f followPlanDo) Or(conds ...gen.Condition) *followPlanDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f followPlanDo) Select(conds ...field.Expr) *followPlanDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f followPlanDo) Where(conds ...gen.Condition) *followPlanDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f followPlanDo) Order(conds ...field.Expr) *followPlanDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f followPlanDo) Distinct(cols ...field.Expr) *followPlanDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f followPlanDo) Omit(cols ...field.Expr) *followPlanDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f followPlanDo) Join(table schema.Tabler, on ...field.Expr) *followPlanDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f followPlanDo) LeftJoin(table schema.Tabler, on ...field.Expr) *followPlanDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f followPlanDo) RightJoin(table schema.Tabler, on ...field.Expr) *followPlanDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f followPlanDo) Group(cols ...field.Expr) *followPlanDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f followPlanDo) Having(conds ...gen.Condition) *followPlanDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f followPlanDo) Limit(limit int) *followPlanDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f followPlanDo) Offset(offset int) *followPlanDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f followPlanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *followPlanDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f followPlanDo) Unscoped() *followPlanDo {
	return f.withDO(f.DO.Unscoped())
}

func (f followPlanDo) Create(values ...*model.FollowPlan) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f followPlanDo) CreateInBatches(values []*model.FollowPlan, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f followPlanDo) Save(values ...*model.FollowPlan) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f followPlanDo) First() (*model.FollowPlan, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowPlan), nil
	}
}

func (f followPlanDo) Take() (*model.FollowPlan, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowPlan), nil
	}
}

func (f followPlanDo) Last() (*model.FollowPlan, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowPlan), nil
	}
}

func (f followPlanDo) Find() ([]*model.FollowPlan, error) {
	result, err := f.DO.Find()
	return result.([]*model.FollowPlan), err
}

func (f followPlanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FollowPlan, err error) {
	buf := make([]*model.FollowPlan, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f followPlanDo) FindInBatches(result *[]*model.FollowPlan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f followPlanDo) Attrs(attrs ...field.AssignExpr) *followPlanDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f followPlanDo) Assign(attrs ...field.AssignExpr) *followPlanDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f followPlanDo) Joins(fields ...field.RelationField) *followPlanDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f followPlanDo) Preload(fields ...field.RelationField) *followPlanDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f followPlanDo) FirstOrInit() (*model.FollowPlan, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowPlan), nil
	}
}

func (f followPlanDo) FirstOrCreate() (*model.FollowPlan, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowPlan), nil
	}
}

func (f followPlanDo) FindByPage(offset int, limit int) (result []*model.FollowPlan, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f followPlanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f followPlanDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f followPlanDo) Delete(models ...*model.FollowPlan) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *followPlanDo) withDO(do gen.Dao) *followPlanDo {
	f.DO = *do.(*gen.DO)
	return f
}
