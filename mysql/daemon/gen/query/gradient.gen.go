// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newGradient(db *gorm.DB, opts ...gen.DOOption) gradient {
	_gradient := gradient{}

	_gradient.gradientDo.UseDB(db, opts...)
	_gradient.gradientDo.UseModel(&model.Gradient{})

	tableName := _gradient.gradientDo.TableName()
	_gradient.ALL = field.NewAsterisk(tableName)
	_gradient.ID = field.NewInt64(tableName, "id")
	_gradient.CreatedAt = field.NewTime(tableName, "created_at")
	_gradient.UpdatedAt = field.NewTime(tableName, "updated_at")
	_gradient.DeletedAt = field.NewField(tableName, "deleted_at")
	_gradient.Title = field.NewString(tableName, "title")
	_gradient.GradientType = field.NewInt64(tableName, "gradient_type")
	_gradient.Status = field.NewInt64(tableName, "status")

	_gradient.fillFieldMap()

	return _gradient
}

type gradient struct {
	gradientDo

	ALL          field.Asterisk
	ID           field.Int64  // 自动编号
	CreatedAt    field.Time   // 创建时间
	UpdatedAt    field.Time   // 更新时间
	DeletedAt    field.Field  // 删除时间
	Title        field.String // 标题
	GradientType field.Int64  // 0 达到总额百分比 1 梯度区间计算
	Status       field.Int64  // 状态 0 无效 1 有效

	fieldMap map[string]field.Expr
}

func (g gradient) Table(newTableName string) *gradient {
	g.gradientDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gradient) As(alias string) *gradient {
	g.gradientDo.DO = *(g.gradientDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gradient) updateTableName(table string) *gradient {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.DeletedAt = field.NewField(table, "deleted_at")
	g.Title = field.NewString(table, "title")
	g.GradientType = field.NewInt64(table, "gradient_type")
	g.Status = field.NewInt64(table, "status")

	g.fillFieldMap()

	return g
}

func (g *gradient) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gradient) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 7)
	g.fieldMap["id"] = g.ID
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["deleted_at"] = g.DeletedAt
	g.fieldMap["title"] = g.Title
	g.fieldMap["gradient_type"] = g.GradientType
	g.fieldMap["status"] = g.Status
}

func (g gradient) clone(db *gorm.DB) gradient {
	g.gradientDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gradient) replaceDB(db *gorm.DB) gradient {
	g.gradientDo.ReplaceDB(db)
	return g
}

type gradientDo struct{ gen.DO }

func (g gradientDo) Debug() *gradientDo {
	return g.withDO(g.DO.Debug())
}

func (g gradientDo) WithContext(ctx context.Context) *gradientDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gradientDo) ReadDB() *gradientDo {
	return g.Clauses(dbresolver.Read)
}

func (g gradientDo) WriteDB() *gradientDo {
	return g.Clauses(dbresolver.Write)
}

func (g gradientDo) Session(config *gorm.Session) *gradientDo {
	return g.withDO(g.DO.Session(config))
}

func (g gradientDo) Clauses(conds ...clause.Expression) *gradientDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gradientDo) Returning(value interface{}, columns ...string) *gradientDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gradientDo) Not(conds ...gen.Condition) *gradientDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gradientDo) Or(conds ...gen.Condition) *gradientDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gradientDo) Select(conds ...field.Expr) *gradientDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gradientDo) Where(conds ...gen.Condition) *gradientDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gradientDo) Order(conds ...field.Expr) *gradientDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gradientDo) Distinct(cols ...field.Expr) *gradientDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gradientDo) Omit(cols ...field.Expr) *gradientDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gradientDo) Join(table schema.Tabler, on ...field.Expr) *gradientDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gradientDo) LeftJoin(table schema.Tabler, on ...field.Expr) *gradientDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gradientDo) RightJoin(table schema.Tabler, on ...field.Expr) *gradientDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gradientDo) Group(cols ...field.Expr) *gradientDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gradientDo) Having(conds ...gen.Condition) *gradientDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gradientDo) Limit(limit int) *gradientDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gradientDo) Offset(offset int) *gradientDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gradientDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *gradientDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gradientDo) Unscoped() *gradientDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gradientDo) Create(values ...*model.Gradient) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gradientDo) CreateInBatches(values []*model.Gradient, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gradientDo) Save(values ...*model.Gradient) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gradientDo) First() (*model.Gradient, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gradient), nil
	}
}

func (g gradientDo) Take() (*model.Gradient, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gradient), nil
	}
}

func (g gradientDo) Last() (*model.Gradient, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gradient), nil
	}
}

func (g gradientDo) Find() ([]*model.Gradient, error) {
	result, err := g.DO.Find()
	return result.([]*model.Gradient), err
}

func (g gradientDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Gradient, err error) {
	buf := make([]*model.Gradient, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gradientDo) FindInBatches(result *[]*model.Gradient, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gradientDo) Attrs(attrs ...field.AssignExpr) *gradientDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gradientDo) Assign(attrs ...field.AssignExpr) *gradientDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gradientDo) Joins(fields ...field.RelationField) *gradientDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gradientDo) Preload(fields ...field.RelationField) *gradientDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gradientDo) FirstOrInit() (*model.Gradient, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gradient), nil
	}
}

func (g gradientDo) FirstOrCreate() (*model.Gradient, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gradient), nil
	}
}

func (g gradientDo) FindByPage(offset int, limit int) (result []*model.Gradient, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gradientDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gradientDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gradientDo) Delete(models ...*model.Gradient) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gradientDo) withDO(do gen.Dao) *gradientDo {
	g.DO = *do.(*gen.DO)
	return g
}
