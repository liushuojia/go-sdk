// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newBankPayment(db *gorm.DB, opts ...gen.DOOption) bankPayment {
	_bankPayment := bankPayment{}

	_bankPayment.bankPaymentDo.UseDB(db, opts...)
	_bankPayment.bankPaymentDo.UseModel(&model.BankPayment{})

	tableName := _bankPayment.bankPaymentDo.TableName()
	_bankPayment.ALL = field.NewAsterisk(tableName)
	_bankPayment.ID = field.NewInt64(tableName, "id")
	_bankPayment.CreatedAt = field.NewTime(tableName, "created_at")
	_bankPayment.UpdatedAt = field.NewTime(tableName, "updated_at")
	_bankPayment.DeletedAt = field.NewField(tableName, "deleted_at")
	_bankPayment.Title = field.NewString(tableName, "title")
	_bankPayment.PaymentType = field.NewInt64(tableName, "payment_type")
	_bankPayment.CommissionType = field.NewInt64(tableName, "commission_type")
	_bankPayment.PriceType = field.NewInt64(tableName, "price_type")
	_bankPayment.PriceNum = field.NewInt64(tableName, "price_num")
	_bankPayment.GradientID = field.NewInt64(tableName, "gradient_id")
	_bankPayment.MinPrice = field.NewInt64(tableName, "min_price")
	_bankPayment.MaxPrice = field.NewInt64(tableName, "max_price")
	_bankPayment.Status = field.NewInt64(tableName, "status")
	_bankPayment.ProfitFlag = field.NewInt64(tableName, "profit_flag")

	_bankPayment.fillFieldMap()

	return _bankPayment
}

type bankPayment struct {
	bankPaymentDo

	ALL            field.Asterisk
	ID             field.Int64  // 自动编号
	CreatedAt      field.Time   // 创建时间
	UpdatedAt      field.Time   // 更新时间
	DeletedAt      field.Field  // 删除时间
	Title          field.String // 收款方式标题
	PaymentType    field.Int64  // 类型 0 收款 1 付款
	CommissionType field.Int64  // 手续费 0 人民币手续费 1 原币种手续费
	PriceType      field.Int64  // 服务费收取类型 0 固定额度 1 梯度
	PriceNum       field.Int64  // 固定或百分比
	GradientID     field.Int64  // 梯度ID
	MinPrice       field.Int64  // 手续费 最小值
	MaxPrice       field.Int64  // 手续费 最大值
	Status         field.Int64  // 状态 0 无效	1 有效
	ProfitFlag     field.Int64  // 利润 0 影响利润 1 不影响利润

	fieldMap map[string]field.Expr
}

func (b bankPayment) Table(newTableName string) *bankPayment {
	b.bankPaymentDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bankPayment) As(alias string) *bankPayment {
	b.bankPaymentDo.DO = *(b.bankPaymentDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bankPayment) updateTableName(table string) *bankPayment {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.UpdatedAt = field.NewTime(table, "updated_at")
	b.DeletedAt = field.NewField(table, "deleted_at")
	b.Title = field.NewString(table, "title")
	b.PaymentType = field.NewInt64(table, "payment_type")
	b.CommissionType = field.NewInt64(table, "commission_type")
	b.PriceType = field.NewInt64(table, "price_type")
	b.PriceNum = field.NewInt64(table, "price_num")
	b.GradientID = field.NewInt64(table, "gradient_id")
	b.MinPrice = field.NewInt64(table, "min_price")
	b.MaxPrice = field.NewInt64(table, "max_price")
	b.Status = field.NewInt64(table, "status")
	b.ProfitFlag = field.NewInt64(table, "profit_flag")

	b.fillFieldMap()

	return b
}

func (b *bankPayment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bankPayment) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 14)
	b.fieldMap["id"] = b.ID
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
	b.fieldMap["deleted_at"] = b.DeletedAt
	b.fieldMap["title"] = b.Title
	b.fieldMap["payment_type"] = b.PaymentType
	b.fieldMap["commission_type"] = b.CommissionType
	b.fieldMap["price_type"] = b.PriceType
	b.fieldMap["price_num"] = b.PriceNum
	b.fieldMap["gradient_id"] = b.GradientID
	b.fieldMap["min_price"] = b.MinPrice
	b.fieldMap["max_price"] = b.MaxPrice
	b.fieldMap["status"] = b.Status
	b.fieldMap["profit_flag"] = b.ProfitFlag
}

func (b bankPayment) clone(db *gorm.DB) bankPayment {
	b.bankPaymentDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bankPayment) replaceDB(db *gorm.DB) bankPayment {
	b.bankPaymentDo.ReplaceDB(db)
	return b
}

type bankPaymentDo struct{ gen.DO }

func (b bankPaymentDo) Debug() *bankPaymentDo {
	return b.withDO(b.DO.Debug())
}

func (b bankPaymentDo) WithContext(ctx context.Context) *bankPaymentDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bankPaymentDo) ReadDB() *bankPaymentDo {
	return b.Clauses(dbresolver.Read)
}

func (b bankPaymentDo) WriteDB() *bankPaymentDo {
	return b.Clauses(dbresolver.Write)
}

func (b bankPaymentDo) Session(config *gorm.Session) *bankPaymentDo {
	return b.withDO(b.DO.Session(config))
}

func (b bankPaymentDo) Clauses(conds ...clause.Expression) *bankPaymentDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bankPaymentDo) Returning(value interface{}, columns ...string) *bankPaymentDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bankPaymentDo) Not(conds ...gen.Condition) *bankPaymentDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bankPaymentDo) Or(conds ...gen.Condition) *bankPaymentDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bankPaymentDo) Select(conds ...field.Expr) *bankPaymentDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bankPaymentDo) Where(conds ...gen.Condition) *bankPaymentDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bankPaymentDo) Order(conds ...field.Expr) *bankPaymentDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bankPaymentDo) Distinct(cols ...field.Expr) *bankPaymentDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bankPaymentDo) Omit(cols ...field.Expr) *bankPaymentDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bankPaymentDo) Join(table schema.Tabler, on ...field.Expr) *bankPaymentDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bankPaymentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *bankPaymentDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bankPaymentDo) RightJoin(table schema.Tabler, on ...field.Expr) *bankPaymentDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bankPaymentDo) Group(cols ...field.Expr) *bankPaymentDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bankPaymentDo) Having(conds ...gen.Condition) *bankPaymentDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bankPaymentDo) Limit(limit int) *bankPaymentDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bankPaymentDo) Offset(offset int) *bankPaymentDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bankPaymentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *bankPaymentDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bankPaymentDo) Unscoped() *bankPaymentDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bankPaymentDo) Create(values ...*model.BankPayment) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bankPaymentDo) CreateInBatches(values []*model.BankPayment, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bankPaymentDo) Save(values ...*model.BankPayment) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bankPaymentDo) First() (*model.BankPayment, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BankPayment), nil
	}
}

func (b bankPaymentDo) Take() (*model.BankPayment, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BankPayment), nil
	}
}

func (b bankPaymentDo) Last() (*model.BankPayment, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BankPayment), nil
	}
}

func (b bankPaymentDo) Find() ([]*model.BankPayment, error) {
	result, err := b.DO.Find()
	return result.([]*model.BankPayment), err
}

func (b bankPaymentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BankPayment, err error) {
	buf := make([]*model.BankPayment, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bankPaymentDo) FindInBatches(result *[]*model.BankPayment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bankPaymentDo) Attrs(attrs ...field.AssignExpr) *bankPaymentDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bankPaymentDo) Assign(attrs ...field.AssignExpr) *bankPaymentDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bankPaymentDo) Joins(fields ...field.RelationField) *bankPaymentDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bankPaymentDo) Preload(fields ...field.RelationField) *bankPaymentDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bankPaymentDo) FirstOrInit() (*model.BankPayment, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BankPayment), nil
	}
}

func (b bankPaymentDo) FirstOrCreate() (*model.BankPayment, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BankPayment), nil
	}
}

func (b bankPaymentDo) FindByPage(offset int, limit int) (result []*model.BankPayment, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bankPaymentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bankPaymentDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bankPaymentDo) Delete(models ...*model.BankPayment) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bankPaymentDo) withDO(do gen.Dao) *bankPaymentDo {
	b.DO = *do.(*gen.DO)
	return b
}
