// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newInvoice(db *gorm.DB, opts ...gen.DOOption) invoice {
	_invoice := invoice{}

	_invoice.invoiceDo.UseDB(db, opts...)
	_invoice.invoiceDo.UseModel(&model.Invoice{})

	tableName := _invoice.invoiceDo.TableName()
	_invoice.ALL = field.NewAsterisk(tableName)
	_invoice.ID = field.NewInt64(tableName, "id")
	_invoice.CreatedAt = field.NewTime(tableName, "created_at")
	_invoice.UpdatedAt = field.NewTime(tableName, "updated_at")
	_invoice.DeletedAt = field.NewField(tableName, "deleted_at")
	_invoice.DataCode = field.NewString(tableName, "data_code")
	_invoice.DataType = field.NewInt64(tableName, "data_type")
	_invoice.DataID = field.NewInt64(tableName, "data_id")
	_invoice.Name = field.NewString(tableName, "name")
	_invoice.Number = field.NewString(tableName, "number")
	_invoice.Address = field.NewString(tableName, "address")
	_invoice.Phone = field.NewString(tableName, "phone")
	_invoice.Bank = field.NewString(tableName, "bank")
	_invoice.BankNumber = field.NewString(tableName, "bank_number")
	_invoice.SendType = field.NewInt64(tableName, "send_type")
	_invoice.SendEmail = field.NewString(tableName, "send_email")
	_invoice.SendRealname = field.NewString(tableName, "send_realname")
	_invoice.SendPhone = field.NewString(tableName, "send_phone")
	_invoice.Status = field.NewInt64(tableName, "status")
	_invoice.DefaultFlag = field.NewInt64(tableName, "default_flag")

	_invoice.fillFieldMap()

	return _invoice
}

type invoice struct {
	invoiceDo

	ALL          field.Asterisk
	ID           field.Int64  // 自动编号
	CreatedAt    field.Time   // 创建时间
	UpdatedAt    field.Time   // 更新时间
	DeletedAt    field.Field  // 删除时间
	DataCode     field.String // 业务所属编码
	DataType     field.Int64  // 业务所属类型id
	DataID       field.Int64  // 业务所属自增id
	Name         field.String // 名称
	Number       field.String // 税号
	Address      field.String // 单位地址
	Phone        field.String // 电话号码
	Bank         field.String // 开户银行
	BankNumber   field.String // 银行账号
	SendType     field.Int64  // 发票发送方式 0 邮件  1 邮寄
	SendEmail    field.String // 邮箱地址
	SendRealname field.String // 收件人
	SendPhone    field.String // 收件人电话
	Status       field.Int64  // 状态
	DefaultFlag  field.Int64  // 是否默认

	fieldMap map[string]field.Expr
}

func (i invoice) Table(newTableName string) *invoice {
	i.invoiceDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i invoice) As(alias string) *invoice {
	i.invoiceDo.DO = *(i.invoiceDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *invoice) updateTableName(table string) *invoice {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt64(table, "id")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")
	i.DeletedAt = field.NewField(table, "deleted_at")
	i.DataCode = field.NewString(table, "data_code")
	i.DataType = field.NewInt64(table, "data_type")
	i.DataID = field.NewInt64(table, "data_id")
	i.Name = field.NewString(table, "name")
	i.Number = field.NewString(table, "number")
	i.Address = field.NewString(table, "address")
	i.Phone = field.NewString(table, "phone")
	i.Bank = field.NewString(table, "bank")
	i.BankNumber = field.NewString(table, "bank_number")
	i.SendType = field.NewInt64(table, "send_type")
	i.SendEmail = field.NewString(table, "send_email")
	i.SendRealname = field.NewString(table, "send_realname")
	i.SendPhone = field.NewString(table, "send_phone")
	i.Status = field.NewInt64(table, "status")
	i.DefaultFlag = field.NewInt64(table, "default_flag")

	i.fillFieldMap()

	return i
}

func (i *invoice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *invoice) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 19)
	i.fieldMap["id"] = i.ID
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
	i.fieldMap["deleted_at"] = i.DeletedAt
	i.fieldMap["data_code"] = i.DataCode
	i.fieldMap["data_type"] = i.DataType
	i.fieldMap["data_id"] = i.DataID
	i.fieldMap["name"] = i.Name
	i.fieldMap["number"] = i.Number
	i.fieldMap["address"] = i.Address
	i.fieldMap["phone"] = i.Phone
	i.fieldMap["bank"] = i.Bank
	i.fieldMap["bank_number"] = i.BankNumber
	i.fieldMap["send_type"] = i.SendType
	i.fieldMap["send_email"] = i.SendEmail
	i.fieldMap["send_realname"] = i.SendRealname
	i.fieldMap["send_phone"] = i.SendPhone
	i.fieldMap["status"] = i.Status
	i.fieldMap["default_flag"] = i.DefaultFlag
}

func (i invoice) clone(db *gorm.DB) invoice {
	i.invoiceDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i invoice) replaceDB(db *gorm.DB) invoice {
	i.invoiceDo.ReplaceDB(db)
	return i
}

type invoiceDo struct{ gen.DO }

func (i invoiceDo) Debug() *invoiceDo {
	return i.withDO(i.DO.Debug())
}

func (i invoiceDo) WithContext(ctx context.Context) *invoiceDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i invoiceDo) ReadDB() *invoiceDo {
	return i.Clauses(dbresolver.Read)
}

func (i invoiceDo) WriteDB() *invoiceDo {
	return i.Clauses(dbresolver.Write)
}

func (i invoiceDo) Session(config *gorm.Session) *invoiceDo {
	return i.withDO(i.DO.Session(config))
}

func (i invoiceDo) Clauses(conds ...clause.Expression) *invoiceDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i invoiceDo) Returning(value interface{}, columns ...string) *invoiceDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i invoiceDo) Not(conds ...gen.Condition) *invoiceDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i invoiceDo) Or(conds ...gen.Condition) *invoiceDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i invoiceDo) Select(conds ...field.Expr) *invoiceDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i invoiceDo) Where(conds ...gen.Condition) *invoiceDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i invoiceDo) Order(conds ...field.Expr) *invoiceDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i invoiceDo) Distinct(cols ...field.Expr) *invoiceDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i invoiceDo) Omit(cols ...field.Expr) *invoiceDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i invoiceDo) Join(table schema.Tabler, on ...field.Expr) *invoiceDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i invoiceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *invoiceDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i invoiceDo) RightJoin(table schema.Tabler, on ...field.Expr) *invoiceDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i invoiceDo) Group(cols ...field.Expr) *invoiceDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i invoiceDo) Having(conds ...gen.Condition) *invoiceDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i invoiceDo) Limit(limit int) *invoiceDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i invoiceDo) Offset(offset int) *invoiceDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i invoiceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *invoiceDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i invoiceDo) Unscoped() *invoiceDo {
	return i.withDO(i.DO.Unscoped())
}

func (i invoiceDo) Create(values ...*model.Invoice) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i invoiceDo) CreateInBatches(values []*model.Invoice, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i invoiceDo) Save(values ...*model.Invoice) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i invoiceDo) First() (*model.Invoice, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Invoice), nil
	}
}

func (i invoiceDo) Take() (*model.Invoice, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Invoice), nil
	}
}

func (i invoiceDo) Last() (*model.Invoice, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Invoice), nil
	}
}

func (i invoiceDo) Find() ([]*model.Invoice, error) {
	result, err := i.DO.Find()
	return result.([]*model.Invoice), err
}

func (i invoiceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Invoice, err error) {
	buf := make([]*model.Invoice, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i invoiceDo) FindInBatches(result *[]*model.Invoice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i invoiceDo) Attrs(attrs ...field.AssignExpr) *invoiceDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i invoiceDo) Assign(attrs ...field.AssignExpr) *invoiceDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i invoiceDo) Joins(fields ...field.RelationField) *invoiceDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i invoiceDo) Preload(fields ...field.RelationField) *invoiceDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i invoiceDo) FirstOrInit() (*model.Invoice, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Invoice), nil
	}
}

func (i invoiceDo) FirstOrCreate() (*model.Invoice, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Invoice), nil
	}
}

func (i invoiceDo) FindByPage(offset int, limit int) (result []*model.Invoice, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i invoiceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i invoiceDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i invoiceDo) Delete(models ...*model.Invoice) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *invoiceDo) withDO(do gen.Dao) *invoiceDo {
	i.DO = *do.(*gen.DO)
	return i
}
