// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newPageRoleMenu(db *gorm.DB, opts ...gen.DOOption) pageRoleMenu {
	_pageRoleMenu := pageRoleMenu{}

	_pageRoleMenu.pageRoleMenuDo.UseDB(db, opts...)
	_pageRoleMenu.pageRoleMenuDo.UseModel(&model.PageRoleMenu{})

	tableName := _pageRoleMenu.pageRoleMenuDo.TableName()
	_pageRoleMenu.ALL = field.NewAsterisk(tableName)
	_pageRoleMenu.ID = field.NewInt64(tableName, "id")
	_pageRoleMenu.CreatedAt = field.NewTime(tableName, "created_at")
	_pageRoleMenu.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pageRoleMenu.DeletedAt = field.NewField(tableName, "deleted_at")
	_pageRoleMenu.PageRoleID = field.NewInt64(tableName, "page_role_id")
	_pageRoleMenu.RoleCode = field.NewString(tableName, "role_code")
	_pageRoleMenu.PlatCode = field.NewString(tableName, "plat_code")

	_pageRoleMenu.fillFieldMap()

	return _pageRoleMenu
}

type pageRoleMenu struct {
	pageRoleMenuDo

	ALL        field.Asterisk
	ID         field.Int64  // 自动编号
	CreatedAt  field.Time   // 创建时间
	UpdatedAt  field.Time   // 更新时间
	DeletedAt  field.Field  // 删除时间
	PageRoleID field.Int64  // 角色菜单id
	RoleCode   field.String // 角色编码
	PlatCode   field.String // 类型编码

	fieldMap map[string]field.Expr
}

func (p pageRoleMenu) Table(newTableName string) *pageRoleMenu {
	p.pageRoleMenuDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pageRoleMenu) As(alias string) *pageRoleMenu {
	p.pageRoleMenuDo.DO = *(p.pageRoleMenuDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pageRoleMenu) updateTableName(table string) *pageRoleMenu {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.PageRoleID = field.NewInt64(table, "page_role_id")
	p.RoleCode = field.NewString(table, "role_code")
	p.PlatCode = field.NewString(table, "plat_code")

	p.fillFieldMap()

	return p
}

func (p *pageRoleMenu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pageRoleMenu) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["page_role_id"] = p.PageRoleID
	p.fieldMap["role_code"] = p.RoleCode
	p.fieldMap["plat_code"] = p.PlatCode
}

func (p pageRoleMenu) clone(db *gorm.DB) pageRoleMenu {
	p.pageRoleMenuDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pageRoleMenu) replaceDB(db *gorm.DB) pageRoleMenu {
	p.pageRoleMenuDo.ReplaceDB(db)
	return p
}

type pageRoleMenuDo struct{ gen.DO }

func (p pageRoleMenuDo) Debug() *pageRoleMenuDo {
	return p.withDO(p.DO.Debug())
}

func (p pageRoleMenuDo) WithContext(ctx context.Context) *pageRoleMenuDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pageRoleMenuDo) ReadDB() *pageRoleMenuDo {
	return p.Clauses(dbresolver.Read)
}

func (p pageRoleMenuDo) WriteDB() *pageRoleMenuDo {
	return p.Clauses(dbresolver.Write)
}

func (p pageRoleMenuDo) Session(config *gorm.Session) *pageRoleMenuDo {
	return p.withDO(p.DO.Session(config))
}

func (p pageRoleMenuDo) Clauses(conds ...clause.Expression) *pageRoleMenuDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pageRoleMenuDo) Returning(value interface{}, columns ...string) *pageRoleMenuDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pageRoleMenuDo) Not(conds ...gen.Condition) *pageRoleMenuDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pageRoleMenuDo) Or(conds ...gen.Condition) *pageRoleMenuDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pageRoleMenuDo) Select(conds ...field.Expr) *pageRoleMenuDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pageRoleMenuDo) Where(conds ...gen.Condition) *pageRoleMenuDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pageRoleMenuDo) Order(conds ...field.Expr) *pageRoleMenuDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pageRoleMenuDo) Distinct(cols ...field.Expr) *pageRoleMenuDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pageRoleMenuDo) Omit(cols ...field.Expr) *pageRoleMenuDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pageRoleMenuDo) Join(table schema.Tabler, on ...field.Expr) *pageRoleMenuDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pageRoleMenuDo) LeftJoin(table schema.Tabler, on ...field.Expr) *pageRoleMenuDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pageRoleMenuDo) RightJoin(table schema.Tabler, on ...field.Expr) *pageRoleMenuDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pageRoleMenuDo) Group(cols ...field.Expr) *pageRoleMenuDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pageRoleMenuDo) Having(conds ...gen.Condition) *pageRoleMenuDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pageRoleMenuDo) Limit(limit int) *pageRoleMenuDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pageRoleMenuDo) Offset(offset int) *pageRoleMenuDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pageRoleMenuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *pageRoleMenuDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pageRoleMenuDo) Unscoped() *pageRoleMenuDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pageRoleMenuDo) Create(values ...*model.PageRoleMenu) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pageRoleMenuDo) CreateInBatches(values []*model.PageRoleMenu, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pageRoleMenuDo) Save(values ...*model.PageRoleMenu) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pageRoleMenuDo) First() (*model.PageRoleMenu, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PageRoleMenu), nil
	}
}

func (p pageRoleMenuDo) Take() (*model.PageRoleMenu, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PageRoleMenu), nil
	}
}

func (p pageRoleMenuDo) Last() (*model.PageRoleMenu, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PageRoleMenu), nil
	}
}

func (p pageRoleMenuDo) Find() ([]*model.PageRoleMenu, error) {
	result, err := p.DO.Find()
	return result.([]*model.PageRoleMenu), err
}

func (p pageRoleMenuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PageRoleMenu, err error) {
	buf := make([]*model.PageRoleMenu, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pageRoleMenuDo) FindInBatches(result *[]*model.PageRoleMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pageRoleMenuDo) Attrs(attrs ...field.AssignExpr) *pageRoleMenuDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pageRoleMenuDo) Assign(attrs ...field.AssignExpr) *pageRoleMenuDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pageRoleMenuDo) Joins(fields ...field.RelationField) *pageRoleMenuDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pageRoleMenuDo) Preload(fields ...field.RelationField) *pageRoleMenuDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pageRoleMenuDo) FirstOrInit() (*model.PageRoleMenu, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PageRoleMenu), nil
	}
}

func (p pageRoleMenuDo) FirstOrCreate() (*model.PageRoleMenu, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PageRoleMenu), nil
	}
}

func (p pageRoleMenuDo) FindByPage(offset int, limit int) (result []*model.PageRoleMenu, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pageRoleMenuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pageRoleMenuDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pageRoleMenuDo) Delete(models ...*model.PageRoleMenu) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pageRoleMenuDo) withDO(do gen.Dao) *pageRoleMenuDo {
	p.DO = *do.(*gen.DO)
	return p
}
