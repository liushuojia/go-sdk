// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newCompanyOpenInvoice(db *gorm.DB, opts ...gen.DOOption) companyOpenInvoice {
	_companyOpenInvoice := companyOpenInvoice{}

	_companyOpenInvoice.companyOpenInvoiceDo.UseDB(db, opts...)
	_companyOpenInvoice.companyOpenInvoiceDo.UseModel(&model.CompanyOpenInvoice{})

	tableName := _companyOpenInvoice.companyOpenInvoiceDo.TableName()
	_companyOpenInvoice.ALL = field.NewAsterisk(tableName)
	_companyOpenInvoice.ID = field.NewInt64(tableName, "id")
	_companyOpenInvoice.CreatedAt = field.NewTime(tableName, "created_at")
	_companyOpenInvoice.UpdatedAt = field.NewTime(tableName, "updated_at")
	_companyOpenInvoice.DeletedAt = field.NewField(tableName, "deleted_at")
	_companyOpenInvoice.Cid = field.NewInt64(tableName, "cid")
	_companyOpenInvoice.InvoiceTypeCode = field.NewString(tableName, "invoice_type_code")
	_companyOpenInvoice.InvoiceTypeName = field.NewString(tableName, "invoice_type_name")
	_companyOpenInvoice.InvoicedItemCode = field.NewString(tableName, "invoiced_item_code")
	_companyOpenInvoice.InvoicedItemName = field.NewString(tableName, "invoiced_item_name")

	_companyOpenInvoice.fillFieldMap()

	return _companyOpenInvoice
}

type companyOpenInvoice struct {
	companyOpenInvoiceDo

	ALL              field.Asterisk
	ID               field.Int64  // 自动编号
	CreatedAt        field.Time   // 创建时间
	UpdatedAt        field.Time   // 更新时间
	DeletedAt        field.Field  // 删除时间
	Cid              field.Int64  // 公司编码
	InvoiceTypeCode  field.String // 发票类型编码
	InvoiceTypeName  field.String // 发票类型名称
	InvoicedItemCode field.String // 发票项目编码
	InvoicedItemName field.String // 发票项目名称

	fieldMap map[string]field.Expr
}

func (c companyOpenInvoice) Table(newTableName string) *companyOpenInvoice {
	c.companyOpenInvoiceDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c companyOpenInvoice) As(alias string) *companyOpenInvoice {
	c.companyOpenInvoiceDo.DO = *(c.companyOpenInvoiceDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *companyOpenInvoice) updateTableName(table string) *companyOpenInvoice {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Cid = field.NewInt64(table, "cid")
	c.InvoiceTypeCode = field.NewString(table, "invoice_type_code")
	c.InvoiceTypeName = field.NewString(table, "invoice_type_name")
	c.InvoicedItemCode = field.NewString(table, "invoiced_item_code")
	c.InvoicedItemName = field.NewString(table, "invoiced_item_name")

	c.fillFieldMap()

	return c
}

func (c *companyOpenInvoice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *companyOpenInvoice) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["cid"] = c.Cid
	c.fieldMap["invoice_type_code"] = c.InvoiceTypeCode
	c.fieldMap["invoice_type_name"] = c.InvoiceTypeName
	c.fieldMap["invoiced_item_code"] = c.InvoicedItemCode
	c.fieldMap["invoiced_item_name"] = c.InvoicedItemName
}

func (c companyOpenInvoice) clone(db *gorm.DB) companyOpenInvoice {
	c.companyOpenInvoiceDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c companyOpenInvoice) replaceDB(db *gorm.DB) companyOpenInvoice {
	c.companyOpenInvoiceDo.ReplaceDB(db)
	return c
}

type companyOpenInvoiceDo struct{ gen.DO }

func (c companyOpenInvoiceDo) Debug() *companyOpenInvoiceDo {
	return c.withDO(c.DO.Debug())
}

func (c companyOpenInvoiceDo) WithContext(ctx context.Context) *companyOpenInvoiceDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c companyOpenInvoiceDo) ReadDB() *companyOpenInvoiceDo {
	return c.Clauses(dbresolver.Read)
}

func (c companyOpenInvoiceDo) WriteDB() *companyOpenInvoiceDo {
	return c.Clauses(dbresolver.Write)
}

func (c companyOpenInvoiceDo) Session(config *gorm.Session) *companyOpenInvoiceDo {
	return c.withDO(c.DO.Session(config))
}

func (c companyOpenInvoiceDo) Clauses(conds ...clause.Expression) *companyOpenInvoiceDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c companyOpenInvoiceDo) Returning(value interface{}, columns ...string) *companyOpenInvoiceDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c companyOpenInvoiceDo) Not(conds ...gen.Condition) *companyOpenInvoiceDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c companyOpenInvoiceDo) Or(conds ...gen.Condition) *companyOpenInvoiceDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c companyOpenInvoiceDo) Select(conds ...field.Expr) *companyOpenInvoiceDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c companyOpenInvoiceDo) Where(conds ...gen.Condition) *companyOpenInvoiceDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c companyOpenInvoiceDo) Order(conds ...field.Expr) *companyOpenInvoiceDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c companyOpenInvoiceDo) Distinct(cols ...field.Expr) *companyOpenInvoiceDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c companyOpenInvoiceDo) Omit(cols ...field.Expr) *companyOpenInvoiceDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c companyOpenInvoiceDo) Join(table schema.Tabler, on ...field.Expr) *companyOpenInvoiceDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c companyOpenInvoiceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *companyOpenInvoiceDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c companyOpenInvoiceDo) RightJoin(table schema.Tabler, on ...field.Expr) *companyOpenInvoiceDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c companyOpenInvoiceDo) Group(cols ...field.Expr) *companyOpenInvoiceDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c companyOpenInvoiceDo) Having(conds ...gen.Condition) *companyOpenInvoiceDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c companyOpenInvoiceDo) Limit(limit int) *companyOpenInvoiceDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c companyOpenInvoiceDo) Offset(offset int) *companyOpenInvoiceDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c companyOpenInvoiceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *companyOpenInvoiceDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c companyOpenInvoiceDo) Unscoped() *companyOpenInvoiceDo {
	return c.withDO(c.DO.Unscoped())
}

func (c companyOpenInvoiceDo) Create(values ...*model.CompanyOpenInvoice) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c companyOpenInvoiceDo) CreateInBatches(values []*model.CompanyOpenInvoice, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c companyOpenInvoiceDo) Save(values ...*model.CompanyOpenInvoice) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c companyOpenInvoiceDo) First() (*model.CompanyOpenInvoice, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyOpenInvoice), nil
	}
}

func (c companyOpenInvoiceDo) Take() (*model.CompanyOpenInvoice, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyOpenInvoice), nil
	}
}

func (c companyOpenInvoiceDo) Last() (*model.CompanyOpenInvoice, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyOpenInvoice), nil
	}
}

func (c companyOpenInvoiceDo) Find() ([]*model.CompanyOpenInvoice, error) {
	result, err := c.DO.Find()
	return result.([]*model.CompanyOpenInvoice), err
}

func (c companyOpenInvoiceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CompanyOpenInvoice, err error) {
	buf := make([]*model.CompanyOpenInvoice, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c companyOpenInvoiceDo) FindInBatches(result *[]*model.CompanyOpenInvoice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c companyOpenInvoiceDo) Attrs(attrs ...field.AssignExpr) *companyOpenInvoiceDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c companyOpenInvoiceDo) Assign(attrs ...field.AssignExpr) *companyOpenInvoiceDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c companyOpenInvoiceDo) Joins(fields ...field.RelationField) *companyOpenInvoiceDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c companyOpenInvoiceDo) Preload(fields ...field.RelationField) *companyOpenInvoiceDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c companyOpenInvoiceDo) FirstOrInit() (*model.CompanyOpenInvoice, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyOpenInvoice), nil
	}
}

func (c companyOpenInvoiceDo) FirstOrCreate() (*model.CompanyOpenInvoice, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyOpenInvoice), nil
	}
}

func (c companyOpenInvoiceDo) FindByPage(offset int, limit int) (result []*model.CompanyOpenInvoice, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c companyOpenInvoiceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c companyOpenInvoiceDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c companyOpenInvoiceDo) Delete(models ...*model.CompanyOpenInvoice) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *companyOpenInvoiceDo) withDO(do gen.Dao) *companyOpenInvoiceDo {
	c.DO = *do.(*gen.DO)
	return c
}
