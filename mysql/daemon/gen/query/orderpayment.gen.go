// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newOrderPayment(db *gorm.DB, opts ...gen.DOOption) orderPayment {
	_orderPayment := orderPayment{}

	_orderPayment.orderPaymentDo.UseDB(db, opts...)
	_orderPayment.orderPaymentDo.UseModel(&model.OrderPayment{})

	tableName := _orderPayment.orderPaymentDo.TableName()
	_orderPayment.ALL = field.NewAsterisk(tableName)
	_orderPayment.ID = field.NewInt64(tableName, "id")
	_orderPayment.CreatedAt = field.NewTime(tableName, "created_at")
	_orderPayment.UpdatedAt = field.NewTime(tableName, "updated_at")
	_orderPayment.DeletedAt = field.NewField(tableName, "deleted_at")
	_orderPayment.Oid = field.NewInt64(tableName, "oid")
	_orderPayment.CustomerCurrencyAbbreviation = field.NewString(tableName, "customer_currency_abbreviation")
	_orderPayment.CustomerReceived = field.NewInt64(tableName, "customer_received")
	_orderPayment.CustomerWaitReceived = field.NewInt64(tableName, "customer_wait_received")
	_orderPayment.CustomerCommission = field.NewInt64(tableName, "customer_commission")
	_orderPayment.CustomerRefund = field.NewInt64(tableName, "customer_refund")
	_orderPayment.CustomerWaitRefund = field.NewInt64(tableName, "customer_wait_refund")
	_orderPayment.ProviderCurrencyAbbreviation = field.NewString(tableName, "provider_currency_abbreviation")
	_orderPayment.ProviderSpend = field.NewInt64(tableName, "provider_spend")
	_orderPayment.ProviderWaitSpend = field.NewInt64(tableName, "provider_wait_spend")
	_orderPayment.ProviderReceived = field.NewInt64(tableName, "provider_received")
	_orderPayment.ProviderWaitReceived = field.NewInt64(tableName, "provider_wait_received")
	_orderPayment.ProfitCurrencyAbbreviation = field.NewString(tableName, "profit_currency_abbreviation")
	_orderPayment.Profit = field.NewInt64(tableName, "profit")
	_orderPayment.ProfitEstimate = field.NewInt64(tableName, "profit_estimate")
	_orderPayment.OtherFlag = field.NewInt64(tableName, "other_flag")
	_orderPayment.OtherCustomerReceived = field.NewInt64(tableName, "other_customer_received")
	_orderPayment.OtherCustomerWaitReceived = field.NewInt64(tableName, "other_customer_wait_received")
	_orderPayment.OtherCustomerCommission = field.NewInt64(tableName, "other_customer_commission")
	_orderPayment.OtherCustomerRefund = field.NewInt64(tableName, "other_customer_refund")
	_orderPayment.OtherCustomerWaitRefund = field.NewInt64(tableName, "other_customer_wait_refund")
	_orderPayment.OtherProviderSpend = field.NewInt64(tableName, "other_provider_spend")
	_orderPayment.OtherProviderWaitSpend = field.NewInt64(tableName, "other_provider_wait_spend")
	_orderPayment.OtherProviderReceived = field.NewInt64(tableName, "other_provider_received")
	_orderPayment.OtherProviderWaitReceived = field.NewInt64(tableName, "other_provider_wait_received")

	_orderPayment.fillFieldMap()

	return _orderPayment
}

type orderPayment struct {
	orderPaymentDo

	ALL                          field.Asterisk
	ID                           field.Int64  // 自动编号
	CreatedAt                    field.Time   // 创建时间
	UpdatedAt                    field.Time   // 更新时间
	DeletedAt                    field.Field  // 删除时间
	Oid                          field.Int64  // 订单号
	CustomerCurrencyAbbreviation field.String // 客户币种
	CustomerReceived             field.Int64  // 客户已收款
	CustomerWaitReceived         field.Int64  // 客户待收款
	CustomerCommission           field.Int64  // 客户收款手续费
	CustomerRefund               field.Int64  // 客户已退款
	CustomerWaitRefund           field.Int64  // 客户待退款
	ProviderCurrencyAbbreviation field.String // 供应商币种
	ProviderSpend                field.Int64  // 供应商已付款
	ProviderWaitSpend            field.Int64  // 供应商待付款
	ProviderReceived             field.Int64  // 供应商已退款
	ProviderWaitReceived         field.Int64  // 供应商待退款
	ProfitCurrencyAbbreviation   field.String // 毛利币种
	Profit                       field.Int64  // 当前盈亏
	ProfitEstimate               field.Int64  // 预估毛利
	OtherFlag                    field.Int64  // 业外开关 1 有 0 无
	OtherCustomerReceived        field.Int64  // 营业外 客户已收款
	OtherCustomerWaitReceived    field.Int64  // 营业外 客户待收款
	OtherCustomerCommission      field.Int64  // 营业外 客户收款手续费
	OtherCustomerRefund          field.Int64  // 营业外 客户已退款
	OtherCustomerWaitRefund      field.Int64  // 营业外 客户待退款
	OtherProviderSpend           field.Int64  // 营业外 供应商已付款
	OtherProviderWaitSpend       field.Int64  // 营业外 供应商待付款
	OtherProviderReceived        field.Int64  // 营业外 供应商已退款
	OtherProviderWaitReceived    field.Int64  // 营业外 供应商待退款

	fieldMap map[string]field.Expr
}

func (o orderPayment) Table(newTableName string) *orderPayment {
	o.orderPaymentDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderPayment) As(alias string) *orderPayment {
	o.orderPaymentDo.DO = *(o.orderPaymentDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderPayment) updateTableName(table string) *orderPayment {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")
	o.Oid = field.NewInt64(table, "oid")
	o.CustomerCurrencyAbbreviation = field.NewString(table, "customer_currency_abbreviation")
	o.CustomerReceived = field.NewInt64(table, "customer_received")
	o.CustomerWaitReceived = field.NewInt64(table, "customer_wait_received")
	o.CustomerCommission = field.NewInt64(table, "customer_commission")
	o.CustomerRefund = field.NewInt64(table, "customer_refund")
	o.CustomerWaitRefund = field.NewInt64(table, "customer_wait_refund")
	o.ProviderCurrencyAbbreviation = field.NewString(table, "provider_currency_abbreviation")
	o.ProviderSpend = field.NewInt64(table, "provider_spend")
	o.ProviderWaitSpend = field.NewInt64(table, "provider_wait_spend")
	o.ProviderReceived = field.NewInt64(table, "provider_received")
	o.ProviderWaitReceived = field.NewInt64(table, "provider_wait_received")
	o.ProfitCurrencyAbbreviation = field.NewString(table, "profit_currency_abbreviation")
	o.Profit = field.NewInt64(table, "profit")
	o.ProfitEstimate = field.NewInt64(table, "profit_estimate")
	o.OtherFlag = field.NewInt64(table, "other_flag")
	o.OtherCustomerReceived = field.NewInt64(table, "other_customer_received")
	o.OtherCustomerWaitReceived = field.NewInt64(table, "other_customer_wait_received")
	o.OtherCustomerCommission = field.NewInt64(table, "other_customer_commission")
	o.OtherCustomerRefund = field.NewInt64(table, "other_customer_refund")
	o.OtherCustomerWaitRefund = field.NewInt64(table, "other_customer_wait_refund")
	o.OtherProviderSpend = field.NewInt64(table, "other_provider_spend")
	o.OtherProviderWaitSpend = field.NewInt64(table, "other_provider_wait_spend")
	o.OtherProviderReceived = field.NewInt64(table, "other_provider_received")
	o.OtherProviderWaitReceived = field.NewInt64(table, "other_provider_wait_received")

	o.fillFieldMap()

	return o
}

func (o *orderPayment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderPayment) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 29)
	o.fieldMap["id"] = o.ID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["oid"] = o.Oid
	o.fieldMap["customer_currency_abbreviation"] = o.CustomerCurrencyAbbreviation
	o.fieldMap["customer_received"] = o.CustomerReceived
	o.fieldMap["customer_wait_received"] = o.CustomerWaitReceived
	o.fieldMap["customer_commission"] = o.CustomerCommission
	o.fieldMap["customer_refund"] = o.CustomerRefund
	o.fieldMap["customer_wait_refund"] = o.CustomerWaitRefund
	o.fieldMap["provider_currency_abbreviation"] = o.ProviderCurrencyAbbreviation
	o.fieldMap["provider_spend"] = o.ProviderSpend
	o.fieldMap["provider_wait_spend"] = o.ProviderWaitSpend
	o.fieldMap["provider_received"] = o.ProviderReceived
	o.fieldMap["provider_wait_received"] = o.ProviderWaitReceived
	o.fieldMap["profit_currency_abbreviation"] = o.ProfitCurrencyAbbreviation
	o.fieldMap["profit"] = o.Profit
	o.fieldMap["profit_estimate"] = o.ProfitEstimate
	o.fieldMap["other_flag"] = o.OtherFlag
	o.fieldMap["other_customer_received"] = o.OtherCustomerReceived
	o.fieldMap["other_customer_wait_received"] = o.OtherCustomerWaitReceived
	o.fieldMap["other_customer_commission"] = o.OtherCustomerCommission
	o.fieldMap["other_customer_refund"] = o.OtherCustomerRefund
	o.fieldMap["other_customer_wait_refund"] = o.OtherCustomerWaitRefund
	o.fieldMap["other_provider_spend"] = o.OtherProviderSpend
	o.fieldMap["other_provider_wait_spend"] = o.OtherProviderWaitSpend
	o.fieldMap["other_provider_received"] = o.OtherProviderReceived
	o.fieldMap["other_provider_wait_received"] = o.OtherProviderWaitReceived
}

func (o orderPayment) clone(db *gorm.DB) orderPayment {
	o.orderPaymentDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderPayment) replaceDB(db *gorm.DB) orderPayment {
	o.orderPaymentDo.ReplaceDB(db)
	return o
}

type orderPaymentDo struct{ gen.DO }

func (o orderPaymentDo) Debug() *orderPaymentDo {
	return o.withDO(o.DO.Debug())
}

func (o orderPaymentDo) WithContext(ctx context.Context) *orderPaymentDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderPaymentDo) ReadDB() *orderPaymentDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderPaymentDo) WriteDB() *orderPaymentDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderPaymentDo) Session(config *gorm.Session) *orderPaymentDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderPaymentDo) Clauses(conds ...clause.Expression) *orderPaymentDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderPaymentDo) Returning(value interface{}, columns ...string) *orderPaymentDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderPaymentDo) Not(conds ...gen.Condition) *orderPaymentDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderPaymentDo) Or(conds ...gen.Condition) *orderPaymentDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderPaymentDo) Select(conds ...field.Expr) *orderPaymentDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderPaymentDo) Where(conds ...gen.Condition) *orderPaymentDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderPaymentDo) Order(conds ...field.Expr) *orderPaymentDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderPaymentDo) Distinct(cols ...field.Expr) *orderPaymentDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderPaymentDo) Omit(cols ...field.Expr) *orderPaymentDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderPaymentDo) Join(table schema.Tabler, on ...field.Expr) *orderPaymentDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderPaymentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *orderPaymentDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderPaymentDo) RightJoin(table schema.Tabler, on ...field.Expr) *orderPaymentDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderPaymentDo) Group(cols ...field.Expr) *orderPaymentDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderPaymentDo) Having(conds ...gen.Condition) *orderPaymentDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderPaymentDo) Limit(limit int) *orderPaymentDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderPaymentDo) Offset(offset int) *orderPaymentDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderPaymentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *orderPaymentDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderPaymentDo) Unscoped() *orderPaymentDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderPaymentDo) Create(values ...*model.OrderPayment) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderPaymentDo) CreateInBatches(values []*model.OrderPayment, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderPaymentDo) Save(values ...*model.OrderPayment) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderPaymentDo) First() (*model.OrderPayment, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderPayment), nil
	}
}

func (o orderPaymentDo) Take() (*model.OrderPayment, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderPayment), nil
	}
}

func (o orderPaymentDo) Last() (*model.OrderPayment, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderPayment), nil
	}
}

func (o orderPaymentDo) Find() ([]*model.OrderPayment, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrderPayment), err
}

func (o orderPaymentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderPayment, err error) {
	buf := make([]*model.OrderPayment, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderPaymentDo) FindInBatches(result *[]*model.OrderPayment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderPaymentDo) Attrs(attrs ...field.AssignExpr) *orderPaymentDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderPaymentDo) Assign(attrs ...field.AssignExpr) *orderPaymentDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderPaymentDo) Joins(fields ...field.RelationField) *orderPaymentDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderPaymentDo) Preload(fields ...field.RelationField) *orderPaymentDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderPaymentDo) FirstOrInit() (*model.OrderPayment, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderPayment), nil
	}
}

func (o orderPaymentDo) FirstOrCreate() (*model.OrderPayment, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderPayment), nil
	}
}

func (o orderPaymentDo) FindByPage(offset int, limit int) (result []*model.OrderPayment, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderPaymentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderPaymentDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderPaymentDo) Delete(models ...*model.OrderPayment) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderPaymentDo) withDO(do gen.Dao) *orderPaymentDo {
	o.DO = *do.(*gen.DO)
	return o
}
