// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newUserIncallArrivalCity(db *gorm.DB, opts ...gen.DOOption) userIncallArrivalCity {
	_userIncallArrivalCity := userIncallArrivalCity{}

	_userIncallArrivalCity.userIncallArrivalCityDo.UseDB(db, opts...)
	_userIncallArrivalCity.userIncallArrivalCityDo.UseModel(&model.UserIncallArrivalCity{})

	tableName := _userIncallArrivalCity.userIncallArrivalCityDo.TableName()
	_userIncallArrivalCity.ALL = field.NewAsterisk(tableName)
	_userIncallArrivalCity.ID = field.NewInt64(tableName, "id")
	_userIncallArrivalCity.CreatedAt = field.NewTime(tableName, "created_at")
	_userIncallArrivalCity.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userIncallArrivalCity.DeletedAt = field.NewField(tableName, "deleted_at")
	_userIncallArrivalCity.UID = field.NewInt64(tableName, "uid")
	_userIncallArrivalCity.ArrivalCityCode = field.NewString(tableName, "arrival_city_code")
	_userIncallArrivalCity.ArrivalCity = field.NewString(tableName, "arrival_city")

	_userIncallArrivalCity.fillFieldMap()

	return _userIncallArrivalCity
}

type userIncallArrivalCity struct {
	userIncallArrivalCityDo

	ALL             field.Asterisk
	ID              field.Int64  // 自动编号
	CreatedAt       field.Time   // 创建时间
	UpdatedAt       field.Time   // 更新时间
	DeletedAt       field.Field  // 删除时间
	UID             field.Int64  // 用户id
	ArrivalCityCode field.String // 目的地编码
	ArrivalCity     field.String // 目的地名称

	fieldMap map[string]field.Expr
}

func (u userIncallArrivalCity) Table(newTableName string) *userIncallArrivalCity {
	u.userIncallArrivalCityDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userIncallArrivalCity) As(alias string) *userIncallArrivalCity {
	u.userIncallArrivalCityDo.DO = *(u.userIncallArrivalCityDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userIncallArrivalCity) updateTableName(table string) *userIncallArrivalCity {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.UID = field.NewInt64(table, "uid")
	u.ArrivalCityCode = field.NewString(table, "arrival_city_code")
	u.ArrivalCity = field.NewString(table, "arrival_city")

	u.fillFieldMap()

	return u
}

func (u *userIncallArrivalCity) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userIncallArrivalCity) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["uid"] = u.UID
	u.fieldMap["arrival_city_code"] = u.ArrivalCityCode
	u.fieldMap["arrival_city"] = u.ArrivalCity
}

func (u userIncallArrivalCity) clone(db *gorm.DB) userIncallArrivalCity {
	u.userIncallArrivalCityDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userIncallArrivalCity) replaceDB(db *gorm.DB) userIncallArrivalCity {
	u.userIncallArrivalCityDo.ReplaceDB(db)
	return u
}

type userIncallArrivalCityDo struct{ gen.DO }

func (u userIncallArrivalCityDo) Debug() *userIncallArrivalCityDo {
	return u.withDO(u.DO.Debug())
}

func (u userIncallArrivalCityDo) WithContext(ctx context.Context) *userIncallArrivalCityDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userIncallArrivalCityDo) ReadDB() *userIncallArrivalCityDo {
	return u.Clauses(dbresolver.Read)
}

func (u userIncallArrivalCityDo) WriteDB() *userIncallArrivalCityDo {
	return u.Clauses(dbresolver.Write)
}

func (u userIncallArrivalCityDo) Session(config *gorm.Session) *userIncallArrivalCityDo {
	return u.withDO(u.DO.Session(config))
}

func (u userIncallArrivalCityDo) Clauses(conds ...clause.Expression) *userIncallArrivalCityDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userIncallArrivalCityDo) Returning(value interface{}, columns ...string) *userIncallArrivalCityDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userIncallArrivalCityDo) Not(conds ...gen.Condition) *userIncallArrivalCityDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userIncallArrivalCityDo) Or(conds ...gen.Condition) *userIncallArrivalCityDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userIncallArrivalCityDo) Select(conds ...field.Expr) *userIncallArrivalCityDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userIncallArrivalCityDo) Where(conds ...gen.Condition) *userIncallArrivalCityDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userIncallArrivalCityDo) Order(conds ...field.Expr) *userIncallArrivalCityDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userIncallArrivalCityDo) Distinct(cols ...field.Expr) *userIncallArrivalCityDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userIncallArrivalCityDo) Omit(cols ...field.Expr) *userIncallArrivalCityDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userIncallArrivalCityDo) Join(table schema.Tabler, on ...field.Expr) *userIncallArrivalCityDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userIncallArrivalCityDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userIncallArrivalCityDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userIncallArrivalCityDo) RightJoin(table schema.Tabler, on ...field.Expr) *userIncallArrivalCityDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userIncallArrivalCityDo) Group(cols ...field.Expr) *userIncallArrivalCityDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userIncallArrivalCityDo) Having(conds ...gen.Condition) *userIncallArrivalCityDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userIncallArrivalCityDo) Limit(limit int) *userIncallArrivalCityDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userIncallArrivalCityDo) Offset(offset int) *userIncallArrivalCityDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userIncallArrivalCityDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userIncallArrivalCityDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userIncallArrivalCityDo) Unscoped() *userIncallArrivalCityDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userIncallArrivalCityDo) Create(values ...*model.UserIncallArrivalCity) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userIncallArrivalCityDo) CreateInBatches(values []*model.UserIncallArrivalCity, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userIncallArrivalCityDo) Save(values ...*model.UserIncallArrivalCity) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userIncallArrivalCityDo) First() (*model.UserIncallArrivalCity, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserIncallArrivalCity), nil
	}
}

func (u userIncallArrivalCityDo) Take() (*model.UserIncallArrivalCity, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserIncallArrivalCity), nil
	}
}

func (u userIncallArrivalCityDo) Last() (*model.UserIncallArrivalCity, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserIncallArrivalCity), nil
	}
}

func (u userIncallArrivalCityDo) Find() ([]*model.UserIncallArrivalCity, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserIncallArrivalCity), err
}

func (u userIncallArrivalCityDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserIncallArrivalCity, err error) {
	buf := make([]*model.UserIncallArrivalCity, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userIncallArrivalCityDo) FindInBatches(result *[]*model.UserIncallArrivalCity, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userIncallArrivalCityDo) Attrs(attrs ...field.AssignExpr) *userIncallArrivalCityDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userIncallArrivalCityDo) Assign(attrs ...field.AssignExpr) *userIncallArrivalCityDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userIncallArrivalCityDo) Joins(fields ...field.RelationField) *userIncallArrivalCityDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userIncallArrivalCityDo) Preload(fields ...field.RelationField) *userIncallArrivalCityDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userIncallArrivalCityDo) FirstOrInit() (*model.UserIncallArrivalCity, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserIncallArrivalCity), nil
	}
}

func (u userIncallArrivalCityDo) FirstOrCreate() (*model.UserIncallArrivalCity, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserIncallArrivalCity), nil
	}
}

func (u userIncallArrivalCityDo) FindByPage(offset int, limit int) (result []*model.UserIncallArrivalCity, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userIncallArrivalCityDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userIncallArrivalCityDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userIncallArrivalCityDo) Delete(models ...*model.UserIncallArrivalCity) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userIncallArrivalCityDo) withDO(do gen.Dao) *userIncallArrivalCityDo {
	u.DO = *do.(*gen.DO)
	return u
}
