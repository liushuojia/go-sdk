// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newQueryHistory(db *gorm.DB, opts ...gen.DOOption) queryHistory {
	_queryHistory := queryHistory{}

	_queryHistory.queryHistoryDo.UseDB(db, opts...)
	_queryHistory.queryHistoryDo.UseModel(&model.QueryHistory{})

	tableName := _queryHistory.queryHistoryDo.TableName()
	_queryHistory.ALL = field.NewAsterisk(tableName)
	_queryHistory.ID = field.NewInt64(tableName, "id")
	_queryHistory.CreatedAt = field.NewTime(tableName, "created_at")
	_queryHistory.UpdatedAt = field.NewTime(tableName, "updated_at")
	_queryHistory.DeletedAt = field.NewField(tableName, "deleted_at")
	_queryHistory.Title = field.NewString(tableName, "title")
	_queryHistory.SearchJSON = field.NewString(tableName, "search_json")
	_queryHistory.APISearchJSON = field.NewString(tableName, "api_search_json")
	_queryHistory.TypeCode = field.NewString(tableName, "type_code")
	_queryHistory.OpenNum = field.NewInt64(tableName, "open_num")
	_queryHistory.OpenDay = field.NewTime(tableName, "open_day")
	_queryHistory.ShareFlag = field.NewInt64(tableName, "share_flag")
	_queryHistory.BelongOp = field.NewInt64(tableName, "belong_op")
	_queryHistory.BelongOpName = field.NewString(tableName, "belong_op_name")
	_queryHistory.BelongDepartmentCode = field.NewString(tableName, "belong_department_code")
	_queryHistory.BelongDepartmentName = field.NewString(tableName, "belong_department_name")

	_queryHistory.fillFieldMap()

	return _queryHistory
}

type queryHistory struct {
	queryHistoryDo

	ALL                  field.Asterisk
	ID                   field.Int64  // 自动编号
	CreatedAt            field.Time   // 创建时间
	UpdatedAt            field.Time   // 更新时间
	DeletedAt            field.Field  // 删除时间
	Title                field.String // 标题
	SearchJSON           field.String // 查询条件
	APISearchJSON        field.String // api返回查询条件
	TypeCode             field.String // 类型编码  company user
	OpenNum              field.Int64  // 打开次数
	OpenDay              field.Time   // 打开日期
	ShareFlag            field.Int64  // 分享开关
	BelongOp             field.Int64  // 销售id
	BelongOpName         field.String // 销售名称
	BelongDepartmentCode field.String // 销售所属部门编码
	BelongDepartmentName field.String // 销售所属部门名称

	fieldMap map[string]field.Expr
}

func (q queryHistory) Table(newTableName string) *queryHistory {
	q.queryHistoryDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q queryHistory) As(alias string) *queryHistory {
	q.queryHistoryDo.DO = *(q.queryHistoryDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *queryHistory) updateTableName(table string) *queryHistory {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "id")
	q.CreatedAt = field.NewTime(table, "created_at")
	q.UpdatedAt = field.NewTime(table, "updated_at")
	q.DeletedAt = field.NewField(table, "deleted_at")
	q.Title = field.NewString(table, "title")
	q.SearchJSON = field.NewString(table, "search_json")
	q.APISearchJSON = field.NewString(table, "api_search_json")
	q.TypeCode = field.NewString(table, "type_code")
	q.OpenNum = field.NewInt64(table, "open_num")
	q.OpenDay = field.NewTime(table, "open_day")
	q.ShareFlag = field.NewInt64(table, "share_flag")
	q.BelongOp = field.NewInt64(table, "belong_op")
	q.BelongOpName = field.NewString(table, "belong_op_name")
	q.BelongDepartmentCode = field.NewString(table, "belong_department_code")
	q.BelongDepartmentName = field.NewString(table, "belong_department_name")

	q.fillFieldMap()

	return q
}

func (q *queryHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *queryHistory) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 15)
	q.fieldMap["id"] = q.ID
	q.fieldMap["created_at"] = q.CreatedAt
	q.fieldMap["updated_at"] = q.UpdatedAt
	q.fieldMap["deleted_at"] = q.DeletedAt
	q.fieldMap["title"] = q.Title
	q.fieldMap["search_json"] = q.SearchJSON
	q.fieldMap["api_search_json"] = q.APISearchJSON
	q.fieldMap["type_code"] = q.TypeCode
	q.fieldMap["open_num"] = q.OpenNum
	q.fieldMap["open_day"] = q.OpenDay
	q.fieldMap["share_flag"] = q.ShareFlag
	q.fieldMap["belong_op"] = q.BelongOp
	q.fieldMap["belong_op_name"] = q.BelongOpName
	q.fieldMap["belong_department_code"] = q.BelongDepartmentCode
	q.fieldMap["belong_department_name"] = q.BelongDepartmentName
}

func (q queryHistory) clone(db *gorm.DB) queryHistory {
	q.queryHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q queryHistory) replaceDB(db *gorm.DB) queryHistory {
	q.queryHistoryDo.ReplaceDB(db)
	return q
}

type queryHistoryDo struct{ gen.DO }

func (q queryHistoryDo) Debug() *queryHistoryDo {
	return q.withDO(q.DO.Debug())
}

func (q queryHistoryDo) WithContext(ctx context.Context) *queryHistoryDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q queryHistoryDo) ReadDB() *queryHistoryDo {
	return q.Clauses(dbresolver.Read)
}

func (q queryHistoryDo) WriteDB() *queryHistoryDo {
	return q.Clauses(dbresolver.Write)
}

func (q queryHistoryDo) Session(config *gorm.Session) *queryHistoryDo {
	return q.withDO(q.DO.Session(config))
}

func (q queryHistoryDo) Clauses(conds ...clause.Expression) *queryHistoryDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q queryHistoryDo) Returning(value interface{}, columns ...string) *queryHistoryDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q queryHistoryDo) Not(conds ...gen.Condition) *queryHistoryDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q queryHistoryDo) Or(conds ...gen.Condition) *queryHistoryDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q queryHistoryDo) Select(conds ...field.Expr) *queryHistoryDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q queryHistoryDo) Where(conds ...gen.Condition) *queryHistoryDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q queryHistoryDo) Order(conds ...field.Expr) *queryHistoryDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q queryHistoryDo) Distinct(cols ...field.Expr) *queryHistoryDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q queryHistoryDo) Omit(cols ...field.Expr) *queryHistoryDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q queryHistoryDo) Join(table schema.Tabler, on ...field.Expr) *queryHistoryDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q queryHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *queryHistoryDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q queryHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) *queryHistoryDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q queryHistoryDo) Group(cols ...field.Expr) *queryHistoryDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q queryHistoryDo) Having(conds ...gen.Condition) *queryHistoryDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q queryHistoryDo) Limit(limit int) *queryHistoryDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q queryHistoryDo) Offset(offset int) *queryHistoryDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q queryHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *queryHistoryDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q queryHistoryDo) Unscoped() *queryHistoryDo {
	return q.withDO(q.DO.Unscoped())
}

func (q queryHistoryDo) Create(values ...*model.QueryHistory) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q queryHistoryDo) CreateInBatches(values []*model.QueryHistory, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q queryHistoryDo) Save(values ...*model.QueryHistory) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q queryHistoryDo) First() (*model.QueryHistory, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueryHistory), nil
	}
}

func (q queryHistoryDo) Take() (*model.QueryHistory, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueryHistory), nil
	}
}

func (q queryHistoryDo) Last() (*model.QueryHistory, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueryHistory), nil
	}
}

func (q queryHistoryDo) Find() ([]*model.QueryHistory, error) {
	result, err := q.DO.Find()
	return result.([]*model.QueryHistory), err
}

func (q queryHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QueryHistory, err error) {
	buf := make([]*model.QueryHistory, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q queryHistoryDo) FindInBatches(result *[]*model.QueryHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q queryHistoryDo) Attrs(attrs ...field.AssignExpr) *queryHistoryDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q queryHistoryDo) Assign(attrs ...field.AssignExpr) *queryHistoryDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q queryHistoryDo) Joins(fields ...field.RelationField) *queryHistoryDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q queryHistoryDo) Preload(fields ...field.RelationField) *queryHistoryDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q queryHistoryDo) FirstOrInit() (*model.QueryHistory, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueryHistory), nil
	}
}

func (q queryHistoryDo) FirstOrCreate() (*model.QueryHistory, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueryHistory), nil
	}
}

func (q queryHistoryDo) FindByPage(offset int, limit int) (result []*model.QueryHistory, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q queryHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q queryHistoryDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q queryHistoryDo) Delete(models ...*model.QueryHistory) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *queryHistoryDo) withDO(do gen.Dao) *queryHistoryDo {
	q.DO = *do.(*gen.DO)
	return q
}
