// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newProcessMaster(db *gorm.DB, opts ...gen.DOOption) processMaster {
	_processMaster := processMaster{}

	_processMaster.processMasterDo.UseDB(db, opts...)
	_processMaster.processMasterDo.UseModel(&model.ProcessMaster{})

	tableName := _processMaster.processMasterDo.TableName()
	_processMaster.ALL = field.NewAsterisk(tableName)
	_processMaster.ID = field.NewInt64(tableName, "id")
	_processMaster.CreatedAt = field.NewTime(tableName, "created_at")
	_processMaster.UpdatedAt = field.NewTime(tableName, "updated_at")
	_processMaster.DeletedAt = field.NewField(tableName, "deleted_at")
	_processMaster.ProcessName = field.NewString(tableName, "process_name")
	_processMaster.ProcessDesc = field.NewString(tableName, "process_desc")
	_processMaster.ProcessLevelNum = field.NewInt64(tableName, "process_level_num")
	_processMaster.Status = field.NewInt64(tableName, "status")

	_processMaster.fillFieldMap()

	return _processMaster
}

type processMaster struct {
	processMasterDo

	ALL             field.Asterisk
	ID              field.Int64  // 自动编号
	CreatedAt       field.Time   // 创建时间
	UpdatedAt       field.Time   // 更新时间
	DeletedAt       field.Field  // 删除时间
	ProcessName     field.String // 流程名称
	ProcessDesc     field.String // 描述
	ProcessLevelNum field.Int64  // 流程层级数量
	Status          field.Int64  // 状态 0 停用  1 启用

	fieldMap map[string]field.Expr
}

func (p processMaster) Table(newTableName string) *processMaster {
	p.processMasterDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p processMaster) As(alias string) *processMaster {
	p.processMasterDo.DO = *(p.processMasterDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *processMaster) updateTableName(table string) *processMaster {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.ProcessName = field.NewString(table, "process_name")
	p.ProcessDesc = field.NewString(table, "process_desc")
	p.ProcessLevelNum = field.NewInt64(table, "process_level_num")
	p.Status = field.NewInt64(table, "status")

	p.fillFieldMap()

	return p
}

func (p *processMaster) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *processMaster) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["process_name"] = p.ProcessName
	p.fieldMap["process_desc"] = p.ProcessDesc
	p.fieldMap["process_level_num"] = p.ProcessLevelNum
	p.fieldMap["status"] = p.Status
}

func (p processMaster) clone(db *gorm.DB) processMaster {
	p.processMasterDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p processMaster) replaceDB(db *gorm.DB) processMaster {
	p.processMasterDo.ReplaceDB(db)
	return p
}

type processMasterDo struct{ gen.DO }

func (p processMasterDo) Debug() *processMasterDo {
	return p.withDO(p.DO.Debug())
}

func (p processMasterDo) WithContext(ctx context.Context) *processMasterDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p processMasterDo) ReadDB() *processMasterDo {
	return p.Clauses(dbresolver.Read)
}

func (p processMasterDo) WriteDB() *processMasterDo {
	return p.Clauses(dbresolver.Write)
}

func (p processMasterDo) Session(config *gorm.Session) *processMasterDo {
	return p.withDO(p.DO.Session(config))
}

func (p processMasterDo) Clauses(conds ...clause.Expression) *processMasterDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p processMasterDo) Returning(value interface{}, columns ...string) *processMasterDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p processMasterDo) Not(conds ...gen.Condition) *processMasterDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p processMasterDo) Or(conds ...gen.Condition) *processMasterDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p processMasterDo) Select(conds ...field.Expr) *processMasterDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p processMasterDo) Where(conds ...gen.Condition) *processMasterDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p processMasterDo) Order(conds ...field.Expr) *processMasterDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p processMasterDo) Distinct(cols ...field.Expr) *processMasterDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p processMasterDo) Omit(cols ...field.Expr) *processMasterDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p processMasterDo) Join(table schema.Tabler, on ...field.Expr) *processMasterDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p processMasterDo) LeftJoin(table schema.Tabler, on ...field.Expr) *processMasterDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p processMasterDo) RightJoin(table schema.Tabler, on ...field.Expr) *processMasterDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p processMasterDo) Group(cols ...field.Expr) *processMasterDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p processMasterDo) Having(conds ...gen.Condition) *processMasterDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p processMasterDo) Limit(limit int) *processMasterDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p processMasterDo) Offset(offset int) *processMasterDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p processMasterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *processMasterDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p processMasterDo) Unscoped() *processMasterDo {
	return p.withDO(p.DO.Unscoped())
}

func (p processMasterDo) Create(values ...*model.ProcessMaster) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p processMasterDo) CreateInBatches(values []*model.ProcessMaster, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p processMasterDo) Save(values ...*model.ProcessMaster) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p processMasterDo) First() (*model.ProcessMaster, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessMaster), nil
	}
}

func (p processMasterDo) Take() (*model.ProcessMaster, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessMaster), nil
	}
}

func (p processMasterDo) Last() (*model.ProcessMaster, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessMaster), nil
	}
}

func (p processMasterDo) Find() ([]*model.ProcessMaster, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProcessMaster), err
}

func (p processMasterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProcessMaster, err error) {
	buf := make([]*model.ProcessMaster, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p processMasterDo) FindInBatches(result *[]*model.ProcessMaster, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p processMasterDo) Attrs(attrs ...field.AssignExpr) *processMasterDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p processMasterDo) Assign(attrs ...field.AssignExpr) *processMasterDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p processMasterDo) Joins(fields ...field.RelationField) *processMasterDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p processMasterDo) Preload(fields ...field.RelationField) *processMasterDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p processMasterDo) FirstOrInit() (*model.ProcessMaster, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessMaster), nil
	}
}

func (p processMasterDo) FirstOrCreate() (*model.ProcessMaster, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProcessMaster), nil
	}
}

func (p processMasterDo) FindByPage(offset int, limit int) (result []*model.ProcessMaster, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p processMasterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p processMasterDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p processMasterDo) Delete(models ...*model.ProcessMaster) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *processMasterDo) withDO(do gen.Dao) *processMasterDo {
	p.DO = *do.(*gen.DO)
	return p
}
