// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newPayment(db *gorm.DB, opts ...gen.DOOption) payment {
	_payment := payment{}

	_payment.paymentDo.UseDB(db, opts...)
	_payment.paymentDo.UseModel(&model.Payment{})

	tableName := _payment.paymentDo.TableName()
	_payment.ALL = field.NewAsterisk(tableName)
	_payment.ID = field.NewInt64(tableName, "id")
	_payment.CreatedAt = field.NewTime(tableName, "created_at")
	_payment.UpdatedAt = field.NewTime(tableName, "updated_at")
	_payment.DeletedAt = field.NewField(tableName, "deleted_at")
	_payment.DataID = field.NewInt64(tableName, "data_id")
	_payment.DataCode = field.NewString(tableName, "data_code")
	_payment.DataType = field.NewInt64(tableName, "data_type")
	_payment.DataTitle = field.NewString(tableName, "data_title")
	_payment.PaymentType = field.NewInt64(tableName, "payment_type")
	_payment.CustomerType = field.NewInt64(tableName, "customer_type")
	_payment.ProfitFlag = field.NewInt64(tableName, "profit_flag")
	_payment.PaymentID = field.NewInt64(tableName, "payment_id")
	_payment.Status = field.NewInt64(tableName, "status")
	_payment.CurrencyCode = field.NewString(tableName, "currency_code")
	_payment.CurrencyName = field.NewString(tableName, "currency_name")
	_payment.CurrencyExchange = field.NewInt64(tableName, "currency_exchange")
	_payment.CurrencyAbbreviation = field.NewString(tableName, "currency_abbreviation")
	_payment.CurrencyPrice = field.NewInt64(tableName, "currency_price")
	_payment.RefundPrice = field.NewInt64(tableName, "refund_price")
	_payment.TotalPrice = field.NewInt64(tableName, "total_price")
	_payment.ItemType = field.NewInt64(tableName, "item_type")
	_payment.BankPaymentID = field.NewInt64(tableName, "bank_payment_id")
	_payment.BankPaymentTitle = field.NewString(tableName, "bank_payment_title")
	_payment.CommissionPrice = field.NewInt64(tableName, "commission_price")
	_payment.CommissionType = field.NewInt64(tableName, "commission_type")
	_payment.PaymentProjectCode = field.NewString(tableName, "payment_project_code")
	_payment.PaymentProjectName = field.NewString(tableName, "payment_project_name")
	_payment.PayBankID = field.NewInt64(tableName, "pay_bank_id")
	_payment.PayBankType = field.NewString(tableName, "pay_bank_type")
	_payment.PayBankTypeCode = field.NewString(tableName, "pay_bank_type_code")
	_payment.PayBankName = field.NewString(tableName, "pay_bank_name")
	_payment.PayBankNum = field.NewString(tableName, "pay_bank_num")
	_payment.PayBankAccount = field.NewString(tableName, "pay_bank_account")
	_payment.ReceiveBankID = field.NewInt64(tableName, "receive_bank_id")
	_payment.ReceiveBankType = field.NewString(tableName, "receive_bank_type")
	_payment.ReceiveBankTypeCode = field.NewString(tableName, "receive_bank_type_code")
	_payment.ReceiveBankName = field.NewString(tableName, "receive_bank_name")
	_payment.ReceiveBankNum = field.NewString(tableName, "receive_bank_num")
	_payment.ReceiveBankAccount = field.NewString(tableName, "receive_bank_account")
	_payment.AgreementID = field.NewInt64(tableName, "agreement_id")
	_payment.AgreementNum = field.NewString(tableName, "agreement_num")
	_payment.SettlementName = field.NewString(tableName, "settlement_name")
	_payment.SettlementCode = field.NewString(tableName, "settlement_code")
	_payment.ProviderID = field.NewInt64(tableName, "provider_id")
	_payment.ProviderName = field.NewString(tableName, "provider_name")
	_payment.OurCompanyID = field.NewInt64(tableName, "our_company_id")
	_payment.OurCompanyName = field.NewString(tableName, "our_company_name")
	_payment.BankFlow = field.NewString(tableName, "bank_flow")
	_payment.PaymentTime = field.NewInt64(tableName, "payment_time")
	_payment.PaymentDesc = field.NewString(tableName, "payment_desc")
	_payment.CreateOp = field.NewInt64(tableName, "create_op")
	_payment.CreateOpName = field.NewInt64(tableName, "create_op_name")
	_payment.BelongOp = field.NewInt64(tableName, "belong_op")
	_payment.BelongOpName = field.NewString(tableName, "belong_op_name")
	_payment.BelongDepartmentCode = field.NewString(tableName, "belong_department_code")
	_payment.BelongDepartmentName = field.NewString(tableName, "belong_department_name")
	_payment.FileList = field.NewString(tableName, "file_list")
	_payment.InvoicePrice = field.NewInt64(tableName, "invoice_price")
	_payment.InvoiceFlag = field.NewInt64(tableName, "invoice_flag")
	_payment.BankFollowID = field.NewInt64(tableName, "bank_follow_id")
	_payment.MergeID = field.NewInt64(tableName, "merge_id")
	_payment.PaymentOp = field.NewInt64(tableName, "payment_op")
	_payment.PaymentOpName = field.NewString(tableName, "payment_op_name")

	_payment.fillFieldMap()

	return _payment
}

type payment struct {
	paymentDo

	ALL                  field.Asterisk
	ID                   field.Int64  // 自动编号
	CreatedAt            field.Time   // 创建时间
	UpdatedAt            field.Time   // 更新时间
	DeletedAt            field.Field  // 删除时间
	DataID               field.Int64  // 业务所属自增id
	DataCode             field.String // 业务所属编码
	DataType             field.Int64  // 业务所属类型id
	DataTitle            field.String // 业务显示标题
	PaymentType          field.Int64  // 类型 0 收款  1 付款  2 收款手续费 3 付款手续费
	CustomerType         field.Int64  // 客户类型 0 客户  1 供应商
	ProfitFlag           field.Int64  // 利润 0 影响利润 1 不影响利润
	PaymentID            field.Int64  // 关联收付款
	Status               field.Int64  // 状态  -1 流程中  0  保存中  1 有效
	CurrencyCode         field.String // 币种编码
	CurrencyName         field.String // 币种名称
	CurrencyExchange     field.Int64  // 币种汇率*10000
	CurrencyAbbreviation field.String // 币种简写
	CurrencyPrice        field.Int64  // 币种价格 单位分
	RefundPrice          field.Int64  // 币种退款金额 单位分
	TotalPrice           field.Int64  // 折合人民币 单位分
	ItemType             field.Int64  // 0 财务报账前添加  1 订单调整子项
	BankPaymentID        field.Int64  // 收付款 方式
	BankPaymentTitle     field.String // 收付款 名称
	CommissionPrice      field.Int64  // 手续费
	CommissionType       field.Int64  // 0 人民币手续费   1 原币种手续费
	PaymentProjectCode   field.String // 收付款项目 编码
	PaymentProjectName   field.String // 收付款项目 名称
	PayBankID            field.Int64  // 付款账户 系统id 0 为非系统账户
	PayBankType          field.String // 付款账户 类型
	PayBankTypeCode      field.String // 付款账户 类型编码
	PayBankName          field.String // 付款账户 开户行
	PayBankNum           field.String // 付款账户 账户
	PayBankAccount       field.String // 付款账户 账户名
	ReceiveBankID        field.Int64  // 收款账户 系统id 0 为非系统账户
	ReceiveBankType      field.String // 收款账户 类型
	ReceiveBankTypeCode  field.String // 收款账户 类型编码
	ReceiveBankName      field.String // 收款账户 开户行
	ReceiveBankNum       field.String // 收款账户 账户
	ReceiveBankAccount   field.String // 收款账户 账户名
	AgreementID          field.Int64  // 协议id
	AgreementNum         field.String // 协议编号
	SettlementName       field.String // 结算方式
	SettlementCode       field.String // 结算方式编码
	ProviderID           field.Int64  // 供应商ID
	ProviderName         field.String // 供应商名称
	OurCompanyID         field.Int64  // 公司主体
	OurCompanyName       field.String // 公司主体名称
	BankFlow             field.String // 交易流水
	PaymentTime          field.Int64  // 付款/收款 时间
	PaymentDesc          field.String // 描述
	CreateOp             field.Int64  // 创建op
	CreateOpName         field.Int64  // 创建op姓名
	BelongOp             field.Int64  // 所属op
	BelongOpName         field.String // 所属op姓名
	BelongDepartmentCode field.String // 所属部门编码
	BelongDepartmentName field.String // 所属部门名称
	FileList             field.String // 附件列表
	InvoicePrice         field.Int64  // 开出发票或回收发票 金额 单位 分
	InvoiceFlag          field.Int64  // 开出/回收 发票状态	0 默认 1 已处理完毕 -1 处理中
	BankFollowID         field.Int64  // 银行流水自动编号 	0 为未产生流水
	MergeID              field.Int64  // 合并付款id
	PaymentOp            field.Int64  // 付款OP
	PaymentOpName        field.String // 付款OP姓名

	fieldMap map[string]field.Expr
}

func (p payment) Table(newTableName string) *payment {
	p.paymentDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p payment) As(alias string) *payment {
	p.paymentDo.DO = *(p.paymentDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *payment) updateTableName(table string) *payment {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.DataID = field.NewInt64(table, "data_id")
	p.DataCode = field.NewString(table, "data_code")
	p.DataType = field.NewInt64(table, "data_type")
	p.DataTitle = field.NewString(table, "data_title")
	p.PaymentType = field.NewInt64(table, "payment_type")
	p.CustomerType = field.NewInt64(table, "customer_type")
	p.ProfitFlag = field.NewInt64(table, "profit_flag")
	p.PaymentID = field.NewInt64(table, "payment_id")
	p.Status = field.NewInt64(table, "status")
	p.CurrencyCode = field.NewString(table, "currency_code")
	p.CurrencyName = field.NewString(table, "currency_name")
	p.CurrencyExchange = field.NewInt64(table, "currency_exchange")
	p.CurrencyAbbreviation = field.NewString(table, "currency_abbreviation")
	p.CurrencyPrice = field.NewInt64(table, "currency_price")
	p.RefundPrice = field.NewInt64(table, "refund_price")
	p.TotalPrice = field.NewInt64(table, "total_price")
	p.ItemType = field.NewInt64(table, "item_type")
	p.BankPaymentID = field.NewInt64(table, "bank_payment_id")
	p.BankPaymentTitle = field.NewString(table, "bank_payment_title")
	p.CommissionPrice = field.NewInt64(table, "commission_price")
	p.CommissionType = field.NewInt64(table, "commission_type")
	p.PaymentProjectCode = field.NewString(table, "payment_project_code")
	p.PaymentProjectName = field.NewString(table, "payment_project_name")
	p.PayBankID = field.NewInt64(table, "pay_bank_id")
	p.PayBankType = field.NewString(table, "pay_bank_type")
	p.PayBankTypeCode = field.NewString(table, "pay_bank_type_code")
	p.PayBankName = field.NewString(table, "pay_bank_name")
	p.PayBankNum = field.NewString(table, "pay_bank_num")
	p.PayBankAccount = field.NewString(table, "pay_bank_account")
	p.ReceiveBankID = field.NewInt64(table, "receive_bank_id")
	p.ReceiveBankType = field.NewString(table, "receive_bank_type")
	p.ReceiveBankTypeCode = field.NewString(table, "receive_bank_type_code")
	p.ReceiveBankName = field.NewString(table, "receive_bank_name")
	p.ReceiveBankNum = field.NewString(table, "receive_bank_num")
	p.ReceiveBankAccount = field.NewString(table, "receive_bank_account")
	p.AgreementID = field.NewInt64(table, "agreement_id")
	p.AgreementNum = field.NewString(table, "agreement_num")
	p.SettlementName = field.NewString(table, "settlement_name")
	p.SettlementCode = field.NewString(table, "settlement_code")
	p.ProviderID = field.NewInt64(table, "provider_id")
	p.ProviderName = field.NewString(table, "provider_name")
	p.OurCompanyID = field.NewInt64(table, "our_company_id")
	p.OurCompanyName = field.NewString(table, "our_company_name")
	p.BankFlow = field.NewString(table, "bank_flow")
	p.PaymentTime = field.NewInt64(table, "payment_time")
	p.PaymentDesc = field.NewString(table, "payment_desc")
	p.CreateOp = field.NewInt64(table, "create_op")
	p.CreateOpName = field.NewInt64(table, "create_op_name")
	p.BelongOp = field.NewInt64(table, "belong_op")
	p.BelongOpName = field.NewString(table, "belong_op_name")
	p.BelongDepartmentCode = field.NewString(table, "belong_department_code")
	p.BelongDepartmentName = field.NewString(table, "belong_department_name")
	p.FileList = field.NewString(table, "file_list")
	p.InvoicePrice = field.NewInt64(table, "invoice_price")
	p.InvoiceFlag = field.NewInt64(table, "invoice_flag")
	p.BankFollowID = field.NewInt64(table, "bank_follow_id")
	p.MergeID = field.NewInt64(table, "merge_id")
	p.PaymentOp = field.NewInt64(table, "payment_op")
	p.PaymentOpName = field.NewString(table, "payment_op_name")

	p.fillFieldMap()

	return p
}

func (p *payment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *payment) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 63)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["data_id"] = p.DataID
	p.fieldMap["data_code"] = p.DataCode
	p.fieldMap["data_type"] = p.DataType
	p.fieldMap["data_title"] = p.DataTitle
	p.fieldMap["payment_type"] = p.PaymentType
	p.fieldMap["customer_type"] = p.CustomerType
	p.fieldMap["profit_flag"] = p.ProfitFlag
	p.fieldMap["payment_id"] = p.PaymentID
	p.fieldMap["status"] = p.Status
	p.fieldMap["currency_code"] = p.CurrencyCode
	p.fieldMap["currency_name"] = p.CurrencyName
	p.fieldMap["currency_exchange"] = p.CurrencyExchange
	p.fieldMap["currency_abbreviation"] = p.CurrencyAbbreviation
	p.fieldMap["currency_price"] = p.CurrencyPrice
	p.fieldMap["refund_price"] = p.RefundPrice
	p.fieldMap["total_price"] = p.TotalPrice
	p.fieldMap["item_type"] = p.ItemType
	p.fieldMap["bank_payment_id"] = p.BankPaymentID
	p.fieldMap["bank_payment_title"] = p.BankPaymentTitle
	p.fieldMap["commission_price"] = p.CommissionPrice
	p.fieldMap["commission_type"] = p.CommissionType
	p.fieldMap["payment_project_code"] = p.PaymentProjectCode
	p.fieldMap["payment_project_name"] = p.PaymentProjectName
	p.fieldMap["pay_bank_id"] = p.PayBankID
	p.fieldMap["pay_bank_type"] = p.PayBankType
	p.fieldMap["pay_bank_type_code"] = p.PayBankTypeCode
	p.fieldMap["pay_bank_name"] = p.PayBankName
	p.fieldMap["pay_bank_num"] = p.PayBankNum
	p.fieldMap["pay_bank_account"] = p.PayBankAccount
	p.fieldMap["receive_bank_id"] = p.ReceiveBankID
	p.fieldMap["receive_bank_type"] = p.ReceiveBankType
	p.fieldMap["receive_bank_type_code"] = p.ReceiveBankTypeCode
	p.fieldMap["receive_bank_name"] = p.ReceiveBankName
	p.fieldMap["receive_bank_num"] = p.ReceiveBankNum
	p.fieldMap["receive_bank_account"] = p.ReceiveBankAccount
	p.fieldMap["agreement_id"] = p.AgreementID
	p.fieldMap["agreement_num"] = p.AgreementNum
	p.fieldMap["settlement_name"] = p.SettlementName
	p.fieldMap["settlement_code"] = p.SettlementCode
	p.fieldMap["provider_id"] = p.ProviderID
	p.fieldMap["provider_name"] = p.ProviderName
	p.fieldMap["our_company_id"] = p.OurCompanyID
	p.fieldMap["our_company_name"] = p.OurCompanyName
	p.fieldMap["bank_flow"] = p.BankFlow
	p.fieldMap["payment_time"] = p.PaymentTime
	p.fieldMap["payment_desc"] = p.PaymentDesc
	p.fieldMap["create_op"] = p.CreateOp
	p.fieldMap["create_op_name"] = p.CreateOpName
	p.fieldMap["belong_op"] = p.BelongOp
	p.fieldMap["belong_op_name"] = p.BelongOpName
	p.fieldMap["belong_department_code"] = p.BelongDepartmentCode
	p.fieldMap["belong_department_name"] = p.BelongDepartmentName
	p.fieldMap["file_list"] = p.FileList
	p.fieldMap["invoice_price"] = p.InvoicePrice
	p.fieldMap["invoice_flag"] = p.InvoiceFlag
	p.fieldMap["bank_follow_id"] = p.BankFollowID
	p.fieldMap["merge_id"] = p.MergeID
	p.fieldMap["payment_op"] = p.PaymentOp
	p.fieldMap["payment_op_name"] = p.PaymentOpName
}

func (p payment) clone(db *gorm.DB) payment {
	p.paymentDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p payment) replaceDB(db *gorm.DB) payment {
	p.paymentDo.ReplaceDB(db)
	return p
}

type paymentDo struct{ gen.DO }

func (p paymentDo) Debug() *paymentDo {
	return p.withDO(p.DO.Debug())
}

func (p paymentDo) WithContext(ctx context.Context) *paymentDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p paymentDo) ReadDB() *paymentDo {
	return p.Clauses(dbresolver.Read)
}

func (p paymentDo) WriteDB() *paymentDo {
	return p.Clauses(dbresolver.Write)
}

func (p paymentDo) Session(config *gorm.Session) *paymentDo {
	return p.withDO(p.DO.Session(config))
}

func (p paymentDo) Clauses(conds ...clause.Expression) *paymentDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p paymentDo) Returning(value interface{}, columns ...string) *paymentDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p paymentDo) Not(conds ...gen.Condition) *paymentDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p paymentDo) Or(conds ...gen.Condition) *paymentDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p paymentDo) Select(conds ...field.Expr) *paymentDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p paymentDo) Where(conds ...gen.Condition) *paymentDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p paymentDo) Order(conds ...field.Expr) *paymentDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p paymentDo) Distinct(cols ...field.Expr) *paymentDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p paymentDo) Omit(cols ...field.Expr) *paymentDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p paymentDo) Join(table schema.Tabler, on ...field.Expr) *paymentDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p paymentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *paymentDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p paymentDo) RightJoin(table schema.Tabler, on ...field.Expr) *paymentDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p paymentDo) Group(cols ...field.Expr) *paymentDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p paymentDo) Having(conds ...gen.Condition) *paymentDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p paymentDo) Limit(limit int) *paymentDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p paymentDo) Offset(offset int) *paymentDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p paymentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *paymentDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p paymentDo) Unscoped() *paymentDo {
	return p.withDO(p.DO.Unscoped())
}

func (p paymentDo) Create(values ...*model.Payment) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p paymentDo) CreateInBatches(values []*model.Payment, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p paymentDo) Save(values ...*model.Payment) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p paymentDo) First() (*model.Payment, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Payment), nil
	}
}

func (p paymentDo) Take() (*model.Payment, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Payment), nil
	}
}

func (p paymentDo) Last() (*model.Payment, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Payment), nil
	}
}

func (p paymentDo) Find() ([]*model.Payment, error) {
	result, err := p.DO.Find()
	return result.([]*model.Payment), err
}

func (p paymentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Payment, err error) {
	buf := make([]*model.Payment, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p paymentDo) FindInBatches(result *[]*model.Payment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p paymentDo) Attrs(attrs ...field.AssignExpr) *paymentDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p paymentDo) Assign(attrs ...field.AssignExpr) *paymentDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p paymentDo) Joins(fields ...field.RelationField) *paymentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p paymentDo) Preload(fields ...field.RelationField) *paymentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p paymentDo) FirstOrInit() (*model.Payment, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Payment), nil
	}
}

func (p paymentDo) FirstOrCreate() (*model.Payment, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Payment), nil
	}
}

func (p paymentDo) FindByPage(offset int, limit int) (result []*model.Payment, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p paymentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p paymentDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p paymentDo) Delete(models ...*model.Payment) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *paymentDo) withDO(do gen.Dao) *paymentDo {
	p.DO = *do.(*gen.DO)
	return p
}
