// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newGradientPercent(db *gorm.DB, opts ...gen.DOOption) gradientPercent {
	_gradientPercent := gradientPercent{}

	_gradientPercent.gradientPercentDo.UseDB(db, opts...)
	_gradientPercent.gradientPercentDo.UseModel(&model.GradientPercent{})

	tableName := _gradientPercent.gradientPercentDo.TableName()
	_gradientPercent.ALL = field.NewAsterisk(tableName)
	_gradientPercent.ID = field.NewInt64(tableName, "id")
	_gradientPercent.CreatedAt = field.NewTime(tableName, "created_at")
	_gradientPercent.UpdatedAt = field.NewTime(tableName, "updated_at")
	_gradientPercent.DeletedAt = field.NewField(tableName, "deleted_at")
	_gradientPercent.GradientID = field.NewInt64(tableName, "gradient_id")
	_gradientPercent.Max = field.NewInt64(tableName, "max")
	_gradientPercent.Percent = field.NewInt64(tableName, "percent")

	_gradientPercent.fillFieldMap()

	return _gradientPercent
}

type gradientPercent struct {
	gradientPercentDo

	ALL        field.Asterisk
	ID         field.Int64 // 自动编号
	CreatedAt  field.Time  // 创建时间
	UpdatedAt  field.Time  // 更新时间
	DeletedAt  field.Field // 删除时间
	GradientID field.Int64 // 梯度id
	Max        field.Int64 // 最大值
	Percent    field.Int64 // 取整*10000

	fieldMap map[string]field.Expr
}

func (g gradientPercent) Table(newTableName string) *gradientPercent {
	g.gradientPercentDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gradientPercent) As(alias string) *gradientPercent {
	g.gradientPercentDo.DO = *(g.gradientPercentDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gradientPercent) updateTableName(table string) *gradientPercent {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.DeletedAt = field.NewField(table, "deleted_at")
	g.GradientID = field.NewInt64(table, "gradient_id")
	g.Max = field.NewInt64(table, "max")
	g.Percent = field.NewInt64(table, "percent")

	g.fillFieldMap()

	return g
}

func (g *gradientPercent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gradientPercent) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 7)
	g.fieldMap["id"] = g.ID
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["deleted_at"] = g.DeletedAt
	g.fieldMap["gradient_id"] = g.GradientID
	g.fieldMap["max"] = g.Max
	g.fieldMap["percent"] = g.Percent
}

func (g gradientPercent) clone(db *gorm.DB) gradientPercent {
	g.gradientPercentDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gradientPercent) replaceDB(db *gorm.DB) gradientPercent {
	g.gradientPercentDo.ReplaceDB(db)
	return g
}

type gradientPercentDo struct{ gen.DO }

func (g gradientPercentDo) Debug() *gradientPercentDo {
	return g.withDO(g.DO.Debug())
}

func (g gradientPercentDo) WithContext(ctx context.Context) *gradientPercentDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gradientPercentDo) ReadDB() *gradientPercentDo {
	return g.Clauses(dbresolver.Read)
}

func (g gradientPercentDo) WriteDB() *gradientPercentDo {
	return g.Clauses(dbresolver.Write)
}

func (g gradientPercentDo) Session(config *gorm.Session) *gradientPercentDo {
	return g.withDO(g.DO.Session(config))
}

func (g gradientPercentDo) Clauses(conds ...clause.Expression) *gradientPercentDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gradientPercentDo) Returning(value interface{}, columns ...string) *gradientPercentDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gradientPercentDo) Not(conds ...gen.Condition) *gradientPercentDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gradientPercentDo) Or(conds ...gen.Condition) *gradientPercentDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gradientPercentDo) Select(conds ...field.Expr) *gradientPercentDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gradientPercentDo) Where(conds ...gen.Condition) *gradientPercentDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gradientPercentDo) Order(conds ...field.Expr) *gradientPercentDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gradientPercentDo) Distinct(cols ...field.Expr) *gradientPercentDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gradientPercentDo) Omit(cols ...field.Expr) *gradientPercentDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gradientPercentDo) Join(table schema.Tabler, on ...field.Expr) *gradientPercentDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gradientPercentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *gradientPercentDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gradientPercentDo) RightJoin(table schema.Tabler, on ...field.Expr) *gradientPercentDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gradientPercentDo) Group(cols ...field.Expr) *gradientPercentDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gradientPercentDo) Having(conds ...gen.Condition) *gradientPercentDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gradientPercentDo) Limit(limit int) *gradientPercentDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gradientPercentDo) Offset(offset int) *gradientPercentDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gradientPercentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *gradientPercentDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gradientPercentDo) Unscoped() *gradientPercentDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gradientPercentDo) Create(values ...*model.GradientPercent) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gradientPercentDo) CreateInBatches(values []*model.GradientPercent, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gradientPercentDo) Save(values ...*model.GradientPercent) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gradientPercentDo) First() (*model.GradientPercent, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GradientPercent), nil
	}
}

func (g gradientPercentDo) Take() (*model.GradientPercent, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GradientPercent), nil
	}
}

func (g gradientPercentDo) Last() (*model.GradientPercent, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GradientPercent), nil
	}
}

func (g gradientPercentDo) Find() ([]*model.GradientPercent, error) {
	result, err := g.DO.Find()
	return result.([]*model.GradientPercent), err
}

func (g gradientPercentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GradientPercent, err error) {
	buf := make([]*model.GradientPercent, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gradientPercentDo) FindInBatches(result *[]*model.GradientPercent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gradientPercentDo) Attrs(attrs ...field.AssignExpr) *gradientPercentDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gradientPercentDo) Assign(attrs ...field.AssignExpr) *gradientPercentDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gradientPercentDo) Joins(fields ...field.RelationField) *gradientPercentDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gradientPercentDo) Preload(fields ...field.RelationField) *gradientPercentDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gradientPercentDo) FirstOrInit() (*model.GradientPercent, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GradientPercent), nil
	}
}

func (g gradientPercentDo) FirstOrCreate() (*model.GradientPercent, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GradientPercent), nil
	}
}

func (g gradientPercentDo) FindByPage(offset int, limit int) (result []*model.GradientPercent, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gradientPercentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gradientPercentDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gradientPercentDo) Delete(models ...*model.GradientPercent) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gradientPercentDo) withDO(do gen.Dao) *gradientPercentDo {
	g.DO = *do.(*gen.DO)
	return g
}
