// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newInvoiceReceived(db *gorm.DB, opts ...gen.DOOption) invoiceReceived {
	_invoiceReceived := invoiceReceived{}

	_invoiceReceived.invoiceReceivedDo.UseDB(db, opts...)
	_invoiceReceived.invoiceReceivedDo.UseModel(&model.InvoiceReceived{})

	tableName := _invoiceReceived.invoiceReceivedDo.TableName()
	_invoiceReceived.ALL = field.NewAsterisk(tableName)
	_invoiceReceived.ID = field.NewInt64(tableName, "id")
	_invoiceReceived.CreatedAt = field.NewTime(tableName, "created_at")
	_invoiceReceived.UpdatedAt = field.NewTime(tableName, "updated_at")
	_invoiceReceived.DeletedAt = field.NewField(tableName, "deleted_at")
	_invoiceReceived.DataCode = field.NewString(tableName, "data_code")
	_invoiceReceived.DataType = field.NewInt64(tableName, "data_type")
	_invoiceReceived.DataID = field.NewInt64(tableName, "data_id")
	_invoiceReceived.DataTitle = field.NewString(tableName, "data_title")
	_invoiceReceived.CurrencyCode = field.NewString(tableName, "currency_code")
	_invoiceReceived.CurrencyName = field.NewString(tableName, "currency_name")
	_invoiceReceived.CurrencyAbbreviation = field.NewString(tableName, "currency_abbreviation")
	_invoiceReceived.ProductPrice = field.NewInt64(tableName, "product_price")
	_invoiceReceived.TotalPrice = field.NewInt64(tableName, "total_price")
	_invoiceReceived.TotalPriceUse = field.NewInt64(tableName, "total_price_use")
	_invoiceReceived.OurCompanyID = field.NewInt64(tableName, "our_company_id")
	_invoiceReceived.OurCompanyName = field.NewString(tableName, "our_company_name")
	_invoiceReceived.ReceivedDesc = field.NewString(tableName, "received_desc")
	_invoiceReceived.FileList = field.NewString(tableName, "file_list")
	_invoiceReceived.BelongOp = field.NewInt64(tableName, "belong_op")
	_invoiceReceived.BelongOpName = field.NewString(tableName, "belong_op_name")
	_invoiceReceived.BelongDepartmentCode = field.NewString(tableName, "belong_department_code")
	_invoiceReceived.BelongDepartmentName = field.NewString(tableName, "belong_department_name")
	_invoiceReceived.Status = field.NewInt64(tableName, "status")

	_invoiceReceived.fillFieldMap()

	return _invoiceReceived
}

type invoiceReceived struct {
	invoiceReceivedDo

	ALL                  field.Asterisk
	ID                   field.Int64  // 自动编号
	CreatedAt            field.Time   // 创建时间
	UpdatedAt            field.Time   // 更新时间
	DeletedAt            field.Field  // 删除时间
	DataCode             field.String // 业务所属编码
	DataType             field.Int64  // 业务所属类型id
	DataID               field.Int64  // 业务所属自增id
	DataTitle            field.String // 公司名称 或 联系人名字
	CurrencyCode         field.String // 币种编码
	CurrencyName         field.String // 币种名称
	CurrencyAbbreviation field.String // 币种简写
	ProductPrice         field.Int64  // 发票金额(未含税)
	TotalPrice           field.Int64  // 发票总额
	TotalPriceUse        field.Int64  // 已核销金额
	OurCompanyID         field.Int64  // 公司主体id
	OurCompanyName       field.String // 公司主体名称
	ReceivedDesc         field.String // 描述
	FileList             field.String // 附件列表
	BelongOp             field.Int64  // 所属op
	BelongOpName         field.String // 所属op姓名
	BelongDepartmentCode field.String // 所属部门编码
	BelongDepartmentName field.String // 所属部门名称
	Status               field.Int64  // 状态 0 保存中 -1 核销中 -2 待核销  1 核销完毕

	fieldMap map[string]field.Expr
}

func (i invoiceReceived) Table(newTableName string) *invoiceReceived {
	i.invoiceReceivedDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i invoiceReceived) As(alias string) *invoiceReceived {
	i.invoiceReceivedDo.DO = *(i.invoiceReceivedDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *invoiceReceived) updateTableName(table string) *invoiceReceived {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt64(table, "id")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")
	i.DeletedAt = field.NewField(table, "deleted_at")
	i.DataCode = field.NewString(table, "data_code")
	i.DataType = field.NewInt64(table, "data_type")
	i.DataID = field.NewInt64(table, "data_id")
	i.DataTitle = field.NewString(table, "data_title")
	i.CurrencyCode = field.NewString(table, "currency_code")
	i.CurrencyName = field.NewString(table, "currency_name")
	i.CurrencyAbbreviation = field.NewString(table, "currency_abbreviation")
	i.ProductPrice = field.NewInt64(table, "product_price")
	i.TotalPrice = field.NewInt64(table, "total_price")
	i.TotalPriceUse = field.NewInt64(table, "total_price_use")
	i.OurCompanyID = field.NewInt64(table, "our_company_id")
	i.OurCompanyName = field.NewString(table, "our_company_name")
	i.ReceivedDesc = field.NewString(table, "received_desc")
	i.FileList = field.NewString(table, "file_list")
	i.BelongOp = field.NewInt64(table, "belong_op")
	i.BelongOpName = field.NewString(table, "belong_op_name")
	i.BelongDepartmentCode = field.NewString(table, "belong_department_code")
	i.BelongDepartmentName = field.NewString(table, "belong_department_name")
	i.Status = field.NewInt64(table, "status")

	i.fillFieldMap()

	return i
}

func (i *invoiceReceived) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *invoiceReceived) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 23)
	i.fieldMap["id"] = i.ID
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
	i.fieldMap["deleted_at"] = i.DeletedAt
	i.fieldMap["data_code"] = i.DataCode
	i.fieldMap["data_type"] = i.DataType
	i.fieldMap["data_id"] = i.DataID
	i.fieldMap["data_title"] = i.DataTitle
	i.fieldMap["currency_code"] = i.CurrencyCode
	i.fieldMap["currency_name"] = i.CurrencyName
	i.fieldMap["currency_abbreviation"] = i.CurrencyAbbreviation
	i.fieldMap["product_price"] = i.ProductPrice
	i.fieldMap["total_price"] = i.TotalPrice
	i.fieldMap["total_price_use"] = i.TotalPriceUse
	i.fieldMap["our_company_id"] = i.OurCompanyID
	i.fieldMap["our_company_name"] = i.OurCompanyName
	i.fieldMap["received_desc"] = i.ReceivedDesc
	i.fieldMap["file_list"] = i.FileList
	i.fieldMap["belong_op"] = i.BelongOp
	i.fieldMap["belong_op_name"] = i.BelongOpName
	i.fieldMap["belong_department_code"] = i.BelongDepartmentCode
	i.fieldMap["belong_department_name"] = i.BelongDepartmentName
	i.fieldMap["status"] = i.Status
}

func (i invoiceReceived) clone(db *gorm.DB) invoiceReceived {
	i.invoiceReceivedDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i invoiceReceived) replaceDB(db *gorm.DB) invoiceReceived {
	i.invoiceReceivedDo.ReplaceDB(db)
	return i
}

type invoiceReceivedDo struct{ gen.DO }

func (i invoiceReceivedDo) Debug() *invoiceReceivedDo {
	return i.withDO(i.DO.Debug())
}

func (i invoiceReceivedDo) WithContext(ctx context.Context) *invoiceReceivedDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i invoiceReceivedDo) ReadDB() *invoiceReceivedDo {
	return i.Clauses(dbresolver.Read)
}

func (i invoiceReceivedDo) WriteDB() *invoiceReceivedDo {
	return i.Clauses(dbresolver.Write)
}

func (i invoiceReceivedDo) Session(config *gorm.Session) *invoiceReceivedDo {
	return i.withDO(i.DO.Session(config))
}

func (i invoiceReceivedDo) Clauses(conds ...clause.Expression) *invoiceReceivedDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i invoiceReceivedDo) Returning(value interface{}, columns ...string) *invoiceReceivedDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i invoiceReceivedDo) Not(conds ...gen.Condition) *invoiceReceivedDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i invoiceReceivedDo) Or(conds ...gen.Condition) *invoiceReceivedDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i invoiceReceivedDo) Select(conds ...field.Expr) *invoiceReceivedDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i invoiceReceivedDo) Where(conds ...gen.Condition) *invoiceReceivedDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i invoiceReceivedDo) Order(conds ...field.Expr) *invoiceReceivedDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i invoiceReceivedDo) Distinct(cols ...field.Expr) *invoiceReceivedDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i invoiceReceivedDo) Omit(cols ...field.Expr) *invoiceReceivedDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i invoiceReceivedDo) Join(table schema.Tabler, on ...field.Expr) *invoiceReceivedDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i invoiceReceivedDo) LeftJoin(table schema.Tabler, on ...field.Expr) *invoiceReceivedDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i invoiceReceivedDo) RightJoin(table schema.Tabler, on ...field.Expr) *invoiceReceivedDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i invoiceReceivedDo) Group(cols ...field.Expr) *invoiceReceivedDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i invoiceReceivedDo) Having(conds ...gen.Condition) *invoiceReceivedDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i invoiceReceivedDo) Limit(limit int) *invoiceReceivedDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i invoiceReceivedDo) Offset(offset int) *invoiceReceivedDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i invoiceReceivedDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *invoiceReceivedDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i invoiceReceivedDo) Unscoped() *invoiceReceivedDo {
	return i.withDO(i.DO.Unscoped())
}

func (i invoiceReceivedDo) Create(values ...*model.InvoiceReceived) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i invoiceReceivedDo) CreateInBatches(values []*model.InvoiceReceived, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i invoiceReceivedDo) Save(values ...*model.InvoiceReceived) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i invoiceReceivedDo) First() (*model.InvoiceReceived, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvoiceReceived), nil
	}
}

func (i invoiceReceivedDo) Take() (*model.InvoiceReceived, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvoiceReceived), nil
	}
}

func (i invoiceReceivedDo) Last() (*model.InvoiceReceived, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvoiceReceived), nil
	}
}

func (i invoiceReceivedDo) Find() ([]*model.InvoiceReceived, error) {
	result, err := i.DO.Find()
	return result.([]*model.InvoiceReceived), err
}

func (i invoiceReceivedDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InvoiceReceived, err error) {
	buf := make([]*model.InvoiceReceived, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i invoiceReceivedDo) FindInBatches(result *[]*model.InvoiceReceived, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i invoiceReceivedDo) Attrs(attrs ...field.AssignExpr) *invoiceReceivedDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i invoiceReceivedDo) Assign(attrs ...field.AssignExpr) *invoiceReceivedDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i invoiceReceivedDo) Joins(fields ...field.RelationField) *invoiceReceivedDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i invoiceReceivedDo) Preload(fields ...field.RelationField) *invoiceReceivedDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i invoiceReceivedDo) FirstOrInit() (*model.InvoiceReceived, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvoiceReceived), nil
	}
}

func (i invoiceReceivedDo) FirstOrCreate() (*model.InvoiceReceived, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvoiceReceived), nil
	}
}

func (i invoiceReceivedDo) FindByPage(offset int, limit int) (result []*model.InvoiceReceived, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i invoiceReceivedDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i invoiceReceivedDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i invoiceReceivedDo) Delete(models ...*model.InvoiceReceived) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *invoiceReceivedDo) withDO(do gen.Dao) *invoiceReceivedDo {
	i.DO = *do.(*gen.DO)
	return i
}
