// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newInvoiceOpen(db *gorm.DB, opts ...gen.DOOption) invoiceOpen {
	_invoiceOpen := invoiceOpen{}

	_invoiceOpen.invoiceOpenDo.UseDB(db, opts...)
	_invoiceOpen.invoiceOpenDo.UseModel(&model.InvoiceOpen{})

	tableName := _invoiceOpen.invoiceOpenDo.TableName()
	_invoiceOpen.ALL = field.NewAsterisk(tableName)
	_invoiceOpen.ID = field.NewInt64(tableName, "id")
	_invoiceOpen.CreatedAt = field.NewTime(tableName, "created_at")
	_invoiceOpen.UpdatedAt = field.NewTime(tableName, "updated_at")
	_invoiceOpen.DeletedAt = field.NewField(tableName, "deleted_at")
	_invoiceOpen.DataCode = field.NewString(tableName, "data_code")
	_invoiceOpen.DataType = field.NewInt64(tableName, "data_type")
	_invoiceOpen.DataID = field.NewInt64(tableName, "data_id")
	_invoiceOpen.InvoiceID = field.NewInt64(tableName, "invoice_id")
	_invoiceOpen.InvoiceType = field.NewString(tableName, "invoice_type")
	_invoiceOpen.InvoiceName = field.NewString(tableName, "invoice_name")
	_invoiceOpen.InvoiceNumber = field.NewString(tableName, "invoice_number")
	_invoiceOpen.InvoiceAddress = field.NewString(tableName, "invoice_address")
	_invoiceOpen.InvoiceBank = field.NewString(tableName, "invoice_bank")
	_invoiceOpen.InvoiceBankNumber = field.NewString(tableName, "invoice_bank_number")
	_invoiceOpen.OurCompanyName = field.NewString(tableName, "our_company_name")
	_invoiceOpen.OurCompanyID = field.NewInt64(tableName, "our_company_id")
	_invoiceOpen.OurCompanyInvoiceID = field.NewInt64(tableName, "our_company_invoice_id")
	_invoiceOpen.InvoiceTypeCode = field.NewString(tableName, "invoice_type_code")
	_invoiceOpen.InvoiceTypeName = field.NewString(tableName, "invoice_type_name")
	_invoiceOpen.InvoicedItemCode = field.NewString(tableName, "invoiced_item_code")
	_invoiceOpen.InvoicedItemName = field.NewString(tableName, "invoiced_item_name")
	_invoiceOpen.SendType = field.NewInt64(tableName, "send_type")
	_invoiceOpen.SendEmail = field.NewString(tableName, "send_email")
	_invoiceOpen.SendRealname = field.NewString(tableName, "send_realname")
	_invoiceOpen.SendPhone = field.NewString(tableName, "send_phone")
	_invoiceOpen.SendAddress = field.NewString(tableName, "send_address")
	_invoiceOpen.SendCompany = field.NewString(tableName, "send_company")
	_invoiceOpen.SendNumber = field.NewString(tableName, "send_number")
	_invoiceOpen.InvoiceOpenCode = field.NewString(tableName, "invoice_open_code")
	_invoiceOpen.InvoiceOpenNumber = field.NewString(tableName, "invoice_open_number")
	_invoiceOpen.InvoiceOpenDay = field.NewInt64(tableName, "invoice_open_day")
	_invoiceOpen.InvoiceTotalPrice = field.NewInt64(tableName, "invoice_total_price")
	_invoiceOpen.InvoiceProductPrice = field.NewInt64(tableName, "invoice_product_price")
	_invoiceOpen.FileList = field.NewString(tableName, "file_list")
	_invoiceOpen.BelongOp = field.NewInt64(tableName, "belong_op")
	_invoiceOpen.BelongOpName = field.NewString(tableName, "belong_op_name")
	_invoiceOpen.BelongDepartmentCode = field.NewString(tableName, "belong_department_code")
	_invoiceOpen.BelongDepartmentName = field.NewString(tableName, "belong_department_name")
	_invoiceOpen.InvoiceOpenOpName = field.NewString(tableName, "invoice_open_op_name")
	_invoiceOpen.Status = field.NewInt64(tableName, "status")

	_invoiceOpen.fillFieldMap()

	return _invoiceOpen
}

type invoiceOpen struct {
	invoiceOpenDo

	ALL                  field.Asterisk
	ID                   field.Int64  // 自动编号
	CreatedAt            field.Time   // 创建时间
	UpdatedAt            field.Time   // 更新时间
	DeletedAt            field.Field  // 删除时间
	DataCode             field.String // 业务所属编码
	DataType             field.Int64  // 业务所属类型id
	DataID               field.Int64  // 业务所属自增id
	InvoiceID            field.Int64  // 发票索引id
	InvoiceType          field.String // 企业 company 联系人 user
	InvoiceName          field.String // 名称
	InvoiceNumber        field.String // 税号
	InvoiceAddress       field.String // 单位地址
	InvoiceBank          field.String // 开户银行
	InvoiceBankNumber    field.String // 银行账号
	OurCompanyName       field.String // 公司主体名称
	OurCompanyID         field.Int64  // 公司主体id
	OurCompanyInvoiceID  field.Int64  // 公司主体发票类型id
	InvoiceTypeCode      field.String // 发票类型编码
	InvoiceTypeName      field.String // 发票类型名称
	InvoicedItemCode     field.String // 发票项目编码
	InvoicedItemName     field.String // 发票项目名称
	SendType             field.Int64  // 0 邮件  1 邮寄
	SendEmail            field.String // 邮箱地址
	SendRealname         field.String // 收件人
	SendPhone            field.String // 收件人电话
	SendAddress          field.String // 收件人地址
	SendCompany          field.String // 快递公司
	SendNumber           field.String // 快递单号
	InvoiceOpenCode      field.String // 开出发票代码
	InvoiceOpenNumber    field.String // 开出发票号码
	InvoiceOpenDay       field.Int64  // 开出发票日期
	InvoiceTotalPrice    field.Int64  // 发票含税金额
	InvoiceProductPrice  field.Int64  // 发票不含税金额
	FileList             field.String // 附件列表
	BelongOp             field.Int64  // 所属op
	BelongOpName         field.String // 所属op姓名
	BelongDepartmentCode field.String // 所属部门编码
	BelongDepartmentName field.String // 所属部门名称
	InvoiceOpenOpName    field.String // 开票人员
	Status               field.Int64  // 状态 0 保存中  -1 申请开票中  1 已开票

	fieldMap map[string]field.Expr
}

func (i invoiceOpen) Table(newTableName string) *invoiceOpen {
	i.invoiceOpenDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i invoiceOpen) As(alias string) *invoiceOpen {
	i.invoiceOpenDo.DO = *(i.invoiceOpenDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *invoiceOpen) updateTableName(table string) *invoiceOpen {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt64(table, "id")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")
	i.DeletedAt = field.NewField(table, "deleted_at")
	i.DataCode = field.NewString(table, "data_code")
	i.DataType = field.NewInt64(table, "data_type")
	i.DataID = field.NewInt64(table, "data_id")
	i.InvoiceID = field.NewInt64(table, "invoice_id")
	i.InvoiceType = field.NewString(table, "invoice_type")
	i.InvoiceName = field.NewString(table, "invoice_name")
	i.InvoiceNumber = field.NewString(table, "invoice_number")
	i.InvoiceAddress = field.NewString(table, "invoice_address")
	i.InvoiceBank = field.NewString(table, "invoice_bank")
	i.InvoiceBankNumber = field.NewString(table, "invoice_bank_number")
	i.OurCompanyName = field.NewString(table, "our_company_name")
	i.OurCompanyID = field.NewInt64(table, "our_company_id")
	i.OurCompanyInvoiceID = field.NewInt64(table, "our_company_invoice_id")
	i.InvoiceTypeCode = field.NewString(table, "invoice_type_code")
	i.InvoiceTypeName = field.NewString(table, "invoice_type_name")
	i.InvoicedItemCode = field.NewString(table, "invoiced_item_code")
	i.InvoicedItemName = field.NewString(table, "invoiced_item_name")
	i.SendType = field.NewInt64(table, "send_type")
	i.SendEmail = field.NewString(table, "send_email")
	i.SendRealname = field.NewString(table, "send_realname")
	i.SendPhone = field.NewString(table, "send_phone")
	i.SendAddress = field.NewString(table, "send_address")
	i.SendCompany = field.NewString(table, "send_company")
	i.SendNumber = field.NewString(table, "send_number")
	i.InvoiceOpenCode = field.NewString(table, "invoice_open_code")
	i.InvoiceOpenNumber = field.NewString(table, "invoice_open_number")
	i.InvoiceOpenDay = field.NewInt64(table, "invoice_open_day")
	i.InvoiceTotalPrice = field.NewInt64(table, "invoice_total_price")
	i.InvoiceProductPrice = field.NewInt64(table, "invoice_product_price")
	i.FileList = field.NewString(table, "file_list")
	i.BelongOp = field.NewInt64(table, "belong_op")
	i.BelongOpName = field.NewString(table, "belong_op_name")
	i.BelongDepartmentCode = field.NewString(table, "belong_department_code")
	i.BelongDepartmentName = field.NewString(table, "belong_department_name")
	i.InvoiceOpenOpName = field.NewString(table, "invoice_open_op_name")
	i.Status = field.NewInt64(table, "status")

	i.fillFieldMap()

	return i
}

func (i *invoiceOpen) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *invoiceOpen) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 40)
	i.fieldMap["id"] = i.ID
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
	i.fieldMap["deleted_at"] = i.DeletedAt
	i.fieldMap["data_code"] = i.DataCode
	i.fieldMap["data_type"] = i.DataType
	i.fieldMap["data_id"] = i.DataID
	i.fieldMap["invoice_id"] = i.InvoiceID
	i.fieldMap["invoice_type"] = i.InvoiceType
	i.fieldMap["invoice_name"] = i.InvoiceName
	i.fieldMap["invoice_number"] = i.InvoiceNumber
	i.fieldMap["invoice_address"] = i.InvoiceAddress
	i.fieldMap["invoice_bank"] = i.InvoiceBank
	i.fieldMap["invoice_bank_number"] = i.InvoiceBankNumber
	i.fieldMap["our_company_name"] = i.OurCompanyName
	i.fieldMap["our_company_id"] = i.OurCompanyID
	i.fieldMap["our_company_invoice_id"] = i.OurCompanyInvoiceID
	i.fieldMap["invoice_type_code"] = i.InvoiceTypeCode
	i.fieldMap["invoice_type_name"] = i.InvoiceTypeName
	i.fieldMap["invoiced_item_code"] = i.InvoicedItemCode
	i.fieldMap["invoiced_item_name"] = i.InvoicedItemName
	i.fieldMap["send_type"] = i.SendType
	i.fieldMap["send_email"] = i.SendEmail
	i.fieldMap["send_realname"] = i.SendRealname
	i.fieldMap["send_phone"] = i.SendPhone
	i.fieldMap["send_address"] = i.SendAddress
	i.fieldMap["send_company"] = i.SendCompany
	i.fieldMap["send_number"] = i.SendNumber
	i.fieldMap["invoice_open_code"] = i.InvoiceOpenCode
	i.fieldMap["invoice_open_number"] = i.InvoiceOpenNumber
	i.fieldMap["invoice_open_day"] = i.InvoiceOpenDay
	i.fieldMap["invoice_total_price"] = i.InvoiceTotalPrice
	i.fieldMap["invoice_product_price"] = i.InvoiceProductPrice
	i.fieldMap["file_list"] = i.FileList
	i.fieldMap["belong_op"] = i.BelongOp
	i.fieldMap["belong_op_name"] = i.BelongOpName
	i.fieldMap["belong_department_code"] = i.BelongDepartmentCode
	i.fieldMap["belong_department_name"] = i.BelongDepartmentName
	i.fieldMap["invoice_open_op_name"] = i.InvoiceOpenOpName
	i.fieldMap["status"] = i.Status
}

func (i invoiceOpen) clone(db *gorm.DB) invoiceOpen {
	i.invoiceOpenDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i invoiceOpen) replaceDB(db *gorm.DB) invoiceOpen {
	i.invoiceOpenDo.ReplaceDB(db)
	return i
}

type invoiceOpenDo struct{ gen.DO }

func (i invoiceOpenDo) Debug() *invoiceOpenDo {
	return i.withDO(i.DO.Debug())
}

func (i invoiceOpenDo) WithContext(ctx context.Context) *invoiceOpenDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i invoiceOpenDo) ReadDB() *invoiceOpenDo {
	return i.Clauses(dbresolver.Read)
}

func (i invoiceOpenDo) WriteDB() *invoiceOpenDo {
	return i.Clauses(dbresolver.Write)
}

func (i invoiceOpenDo) Session(config *gorm.Session) *invoiceOpenDo {
	return i.withDO(i.DO.Session(config))
}

func (i invoiceOpenDo) Clauses(conds ...clause.Expression) *invoiceOpenDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i invoiceOpenDo) Returning(value interface{}, columns ...string) *invoiceOpenDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i invoiceOpenDo) Not(conds ...gen.Condition) *invoiceOpenDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i invoiceOpenDo) Or(conds ...gen.Condition) *invoiceOpenDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i invoiceOpenDo) Select(conds ...field.Expr) *invoiceOpenDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i invoiceOpenDo) Where(conds ...gen.Condition) *invoiceOpenDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i invoiceOpenDo) Order(conds ...field.Expr) *invoiceOpenDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i invoiceOpenDo) Distinct(cols ...field.Expr) *invoiceOpenDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i invoiceOpenDo) Omit(cols ...field.Expr) *invoiceOpenDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i invoiceOpenDo) Join(table schema.Tabler, on ...field.Expr) *invoiceOpenDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i invoiceOpenDo) LeftJoin(table schema.Tabler, on ...field.Expr) *invoiceOpenDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i invoiceOpenDo) RightJoin(table schema.Tabler, on ...field.Expr) *invoiceOpenDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i invoiceOpenDo) Group(cols ...field.Expr) *invoiceOpenDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i invoiceOpenDo) Having(conds ...gen.Condition) *invoiceOpenDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i invoiceOpenDo) Limit(limit int) *invoiceOpenDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i invoiceOpenDo) Offset(offset int) *invoiceOpenDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i invoiceOpenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *invoiceOpenDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i invoiceOpenDo) Unscoped() *invoiceOpenDo {
	return i.withDO(i.DO.Unscoped())
}

func (i invoiceOpenDo) Create(values ...*model.InvoiceOpen) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i invoiceOpenDo) CreateInBatches(values []*model.InvoiceOpen, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i invoiceOpenDo) Save(values ...*model.InvoiceOpen) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i invoiceOpenDo) First() (*model.InvoiceOpen, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvoiceOpen), nil
	}
}

func (i invoiceOpenDo) Take() (*model.InvoiceOpen, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvoiceOpen), nil
	}
}

func (i invoiceOpenDo) Last() (*model.InvoiceOpen, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvoiceOpen), nil
	}
}

func (i invoiceOpenDo) Find() ([]*model.InvoiceOpen, error) {
	result, err := i.DO.Find()
	return result.([]*model.InvoiceOpen), err
}

func (i invoiceOpenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InvoiceOpen, err error) {
	buf := make([]*model.InvoiceOpen, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i invoiceOpenDo) FindInBatches(result *[]*model.InvoiceOpen, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i invoiceOpenDo) Attrs(attrs ...field.AssignExpr) *invoiceOpenDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i invoiceOpenDo) Assign(attrs ...field.AssignExpr) *invoiceOpenDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i invoiceOpenDo) Joins(fields ...field.RelationField) *invoiceOpenDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i invoiceOpenDo) Preload(fields ...field.RelationField) *invoiceOpenDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i invoiceOpenDo) FirstOrInit() (*model.InvoiceOpen, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvoiceOpen), nil
	}
}

func (i invoiceOpenDo) FirstOrCreate() (*model.InvoiceOpen, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvoiceOpen), nil
	}
}

func (i invoiceOpenDo) FindByPage(offset int, limit int) (result []*model.InvoiceOpen, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i invoiceOpenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i invoiceOpenDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i invoiceOpenDo) Delete(models ...*model.InvoiceOpen) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *invoiceOpenDo) withDO(do gen.Dao) *invoiceOpenDo {
	i.DO = *do.(*gen.DO)
	return i
}
