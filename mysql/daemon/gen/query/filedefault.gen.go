// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newFileDefault(db *gorm.DB, opts ...gen.DOOption) fileDefault {
	_fileDefault := fileDefault{}

	_fileDefault.fileDefaultDo.UseDB(db, opts...)
	_fileDefault.fileDefaultDo.UseModel(&model.FileDefault{})

	tableName := _fileDefault.fileDefaultDo.TableName()
	_fileDefault.ALL = field.NewAsterisk(tableName)
	_fileDefault.ID = field.NewInt64(tableName, "id")
	_fileDefault.CreatedAt = field.NewTime(tableName, "created_at")
	_fileDefault.UpdatedAt = field.NewTime(tableName, "updated_at")
	_fileDefault.DeletedAt = field.NewField(tableName, "deleted_at")
	_fileDefault.DataID = field.NewInt64(tableName, "data_id")
	_fileDefault.DataType = field.NewInt64(tableName, "data_type")
	_fileDefault.DataCode = field.NewString(tableName, "data_code")
	_fileDefault.AreaCode = field.NewString(tableName, "area_code")
	_fileDefault.AreaType = field.NewInt64(tableName, "area_type")
	_fileDefault.AreaTypeAbbreviation = field.NewString(tableName, "area_type_abbreviation")
	_fileDefault.Module = field.NewString(tableName, "module")
	_fileDefault.FileName = field.NewString(tableName, "file_name")
	_fileDefault.FileExtension = field.NewString(tableName, "file_extension")
	_fileDefault.FileSize = field.NewInt64(tableName, "file_size")
	_fileDefault.UID = field.NewInt64(tableName, "uid")
	_fileDefault.UIDName = field.NewString(tableName, "uid_name")
	_fileDefault.DepartmentCode = field.NewString(tableName, "department_code")
	_fileDefault.SavePath = field.NewString(tableName, "save_path")
	_fileDefault.SaveFile = field.NewString(tableName, "save_file")
	_fileDefault.Status = field.NewInt64(tableName, "status")
	_fileDefault.Weight = field.NewInt64(tableName, "weight")
	_fileDefault.FileHash = field.NewString(tableName, "file_hash")

	_fileDefault.fillFieldMap()

	return _fileDefault
}

type fileDefault struct {
	fileDefaultDo

	ALL                  field.Asterisk
	ID                   field.Int64  // 自动编号
	CreatedAt            field.Time   // 创建时间
	UpdatedAt            field.Time   // 更新时间
	DeletedAt            field.Field  // 删除时间
	DataID               field.Int64  // 业务所属自增id
	DataType             field.Int64  // 业务所属类型id
	DataCode             field.String // 业务所属编码
	AreaCode             field.String // 分类所属编码
	AreaType             field.Int64  // 分类类型
	AreaTypeAbbreviation field.String // 分类标识
	Module               field.String // 所属模块
	FileName             field.String // 文件名称
	FileExtension        field.String // 文件后缀名
	FileSize             field.Int64  // 文件大小
	UID                  field.Int64  // 用户编码
	UIDName              field.String // 用户名字
	DepartmentCode       field.String // 用户所属部门
	SavePath             field.String // 保存路径
	SaveFile             field.String // 文件名称
	Status               field.Int64  // 状态 1 正常 0 停用
	Weight               field.Int64  // 排序权重,越大越靠前
	FileHash             field.String // 文件哈希

	fieldMap map[string]field.Expr
}

func (f fileDefault) Table(newTableName string) *fileDefault {
	f.fileDefaultDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fileDefault) As(alias string) *fileDefault {
	f.fileDefaultDo.DO = *(f.fileDefaultDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fileDefault) updateTableName(table string) *fileDefault {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")
	f.DataID = field.NewInt64(table, "data_id")
	f.DataType = field.NewInt64(table, "data_type")
	f.DataCode = field.NewString(table, "data_code")
	f.AreaCode = field.NewString(table, "area_code")
	f.AreaType = field.NewInt64(table, "area_type")
	f.AreaTypeAbbreviation = field.NewString(table, "area_type_abbreviation")
	f.Module = field.NewString(table, "module")
	f.FileName = field.NewString(table, "file_name")
	f.FileExtension = field.NewString(table, "file_extension")
	f.FileSize = field.NewInt64(table, "file_size")
	f.UID = field.NewInt64(table, "uid")
	f.UIDName = field.NewString(table, "uid_name")
	f.DepartmentCode = field.NewString(table, "department_code")
	f.SavePath = field.NewString(table, "save_path")
	f.SaveFile = field.NewString(table, "save_file")
	f.Status = field.NewInt64(table, "status")
	f.Weight = field.NewInt64(table, "weight")
	f.FileHash = field.NewString(table, "file_hash")

	f.fillFieldMap()

	return f
}

func (f *fileDefault) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fileDefault) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 22)
	f.fieldMap["id"] = f.ID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
	f.fieldMap["data_id"] = f.DataID
	f.fieldMap["data_type"] = f.DataType
	f.fieldMap["data_code"] = f.DataCode
	f.fieldMap["area_code"] = f.AreaCode
	f.fieldMap["area_type"] = f.AreaType
	f.fieldMap["area_type_abbreviation"] = f.AreaTypeAbbreviation
	f.fieldMap["module"] = f.Module
	f.fieldMap["file_name"] = f.FileName
	f.fieldMap["file_extension"] = f.FileExtension
	f.fieldMap["file_size"] = f.FileSize
	f.fieldMap["uid"] = f.UID
	f.fieldMap["uid_name"] = f.UIDName
	f.fieldMap["department_code"] = f.DepartmentCode
	f.fieldMap["save_path"] = f.SavePath
	f.fieldMap["save_file"] = f.SaveFile
	f.fieldMap["status"] = f.Status
	f.fieldMap["weight"] = f.Weight
	f.fieldMap["file_hash"] = f.FileHash
}

func (f fileDefault) clone(db *gorm.DB) fileDefault {
	f.fileDefaultDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fileDefault) replaceDB(db *gorm.DB) fileDefault {
	f.fileDefaultDo.ReplaceDB(db)
	return f
}

type fileDefaultDo struct{ gen.DO }

func (f fileDefaultDo) Debug() *fileDefaultDo {
	return f.withDO(f.DO.Debug())
}

func (f fileDefaultDo) WithContext(ctx context.Context) *fileDefaultDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fileDefaultDo) ReadDB() *fileDefaultDo {
	return f.Clauses(dbresolver.Read)
}

func (f fileDefaultDo) WriteDB() *fileDefaultDo {
	return f.Clauses(dbresolver.Write)
}

func (f fileDefaultDo) Session(config *gorm.Session) *fileDefaultDo {
	return f.withDO(f.DO.Session(config))
}

func (f fileDefaultDo) Clauses(conds ...clause.Expression) *fileDefaultDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fileDefaultDo) Returning(value interface{}, columns ...string) *fileDefaultDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fileDefaultDo) Not(conds ...gen.Condition) *fileDefaultDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fileDefaultDo) Or(conds ...gen.Condition) *fileDefaultDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fileDefaultDo) Select(conds ...field.Expr) *fileDefaultDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fileDefaultDo) Where(conds ...gen.Condition) *fileDefaultDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fileDefaultDo) Order(conds ...field.Expr) *fileDefaultDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fileDefaultDo) Distinct(cols ...field.Expr) *fileDefaultDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fileDefaultDo) Omit(cols ...field.Expr) *fileDefaultDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fileDefaultDo) Join(table schema.Tabler, on ...field.Expr) *fileDefaultDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fileDefaultDo) LeftJoin(table schema.Tabler, on ...field.Expr) *fileDefaultDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fileDefaultDo) RightJoin(table schema.Tabler, on ...field.Expr) *fileDefaultDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fileDefaultDo) Group(cols ...field.Expr) *fileDefaultDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fileDefaultDo) Having(conds ...gen.Condition) *fileDefaultDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fileDefaultDo) Limit(limit int) *fileDefaultDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fileDefaultDo) Offset(offset int) *fileDefaultDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fileDefaultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *fileDefaultDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fileDefaultDo) Unscoped() *fileDefaultDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fileDefaultDo) Create(values ...*model.FileDefault) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fileDefaultDo) CreateInBatches(values []*model.FileDefault, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fileDefaultDo) Save(values ...*model.FileDefault) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fileDefaultDo) First() (*model.FileDefault, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileDefault), nil
	}
}

func (f fileDefaultDo) Take() (*model.FileDefault, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileDefault), nil
	}
}

func (f fileDefaultDo) Last() (*model.FileDefault, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileDefault), nil
	}
}

func (f fileDefaultDo) Find() ([]*model.FileDefault, error) {
	result, err := f.DO.Find()
	return result.([]*model.FileDefault), err
}

func (f fileDefaultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FileDefault, err error) {
	buf := make([]*model.FileDefault, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fileDefaultDo) FindInBatches(result *[]*model.FileDefault, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fileDefaultDo) Attrs(attrs ...field.AssignExpr) *fileDefaultDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fileDefaultDo) Assign(attrs ...field.AssignExpr) *fileDefaultDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fileDefaultDo) Joins(fields ...field.RelationField) *fileDefaultDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fileDefaultDo) Preload(fields ...field.RelationField) *fileDefaultDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fileDefaultDo) FirstOrInit() (*model.FileDefault, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileDefault), nil
	}
}

func (f fileDefaultDo) FirstOrCreate() (*model.FileDefault, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileDefault), nil
	}
}

func (f fileDefaultDo) FindByPage(offset int, limit int) (result []*model.FileDefault, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fileDefaultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fileDefaultDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fileDefaultDo) Delete(models ...*model.FileDefault) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fileDefaultDo) withDO(do gen.Dao) *fileDefaultDo {
	f.DO = *do.(*gen.DO)
	return f
}
