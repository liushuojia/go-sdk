// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newProductDefault(db *gorm.DB, opts ...gen.DOOption) productDefault {
	_productDefault := productDefault{}

	_productDefault.productDefaultDo.UseDB(db, opts...)
	_productDefault.productDefaultDo.UseModel(&model.ProductDefault{})

	tableName := _productDefault.productDefaultDo.TableName()
	_productDefault.ALL = field.NewAsterisk(tableName)
	_productDefault.ID = field.NewInt64(tableName, "id")
	_productDefault.CreatedAt = field.NewTime(tableName, "created_at")
	_productDefault.UpdatedAt = field.NewTime(tableName, "updated_at")
	_productDefault.DeletedAt = field.NewField(tableName, "deleted_at")
	_productDefault.ProductName = field.NewString(tableName, "product_name")
	_productDefault.ProductDesc = field.NewString(tableName, "product_desc")
	_productDefault.ProductManagerDesc = field.NewString(tableName, "product_manager_desc")
	_productDefault.ProductType = field.NewString(tableName, "product_type")
	_productDefault.ProductTypeCode = field.NewString(tableName, "product_type_code")
	_productDefault.SaleLabel = field.NewString(tableName, "sale_label")
	_productDefault.SaleLabelCode = field.NewString(tableName, "sale_label_code")
	_productDefault.DepartureCity = field.NewString(tableName, "departure_city")
	_productDefault.DepartureCityCode = field.NewString(tableName, "departure_city_code")
	_productDefault.ArrivalCity = field.NewString(tableName, "arrival_city")
	_productDefault.ArrivalCityCode = field.NewString(tableName, "arrival_city_code")
	_productDefault.TravelDays = field.NewInt64(tableName, "travel_days")
	_productDefault.TravelNights = field.NewInt64(tableName, "travel_nights")
	_productDefault.DepartureTraffic = field.NewString(tableName, "departure_traffic")
	_productDefault.DepartureTrafficCode = field.NewString(tableName, "departure_traffic_code")
	_productDefault.DepartureTrafficDesc = field.NewString(tableName, "departure_traffic_desc")
	_productDefault.ReturnTraffic = field.NewString(tableName, "return_traffic")
	_productDefault.ReturnTrafficCode = field.NewString(tableName, "return_traffic_code")
	_productDefault.ReturnTrafficDesc = field.NewString(tableName, "return_traffic_desc")
	_productDefault.PriceDesc = field.NewString(tableName, "price_desc")
	_productDefault.PriceUnit = field.NewString(tableName, "price_unit")
	_productDefault.PriceUnitCode = field.NewString(tableName, "price_unit_code")
	_productDefault.BelongOp = field.NewInt64(tableName, "belong_op")
	_productDefault.BelongOpName = field.NewString(tableName, "belong_op_name")
	_productDefault.BelongDepartmentCode = field.NewString(tableName, "belong_department_code")
	_productDefault.BelongDepartmentName = field.NewString(tableName, "belong_department_name")
	_productDefault.Status = field.NewInt64(tableName, "status")
	_productDefault.OpChangeNum = field.NewInt64(tableName, "op_change_num")

	_productDefault.fillFieldMap()

	return _productDefault
}

type productDefault struct {
	productDefaultDo

	ALL                  field.Asterisk
	ID                   field.Int64  // 自动编号
	CreatedAt            field.Time   // 创建时间
	UpdatedAt            field.Time   // 更新时间
	DeletedAt            field.Field  // 删除时间
	ProductName          field.String // 产品名称
	ProductDesc          field.String // 产品富描述
	ProductManagerDesc   field.String // 产品经理推荐
	ProductType          field.String // 产品类型
	ProductTypeCode      field.String // 产品类型编码
	SaleLabel            field.String // 热卖标签
	SaleLabelCode        field.String // 热卖标签编码
	DepartureCity        field.String // 出发城市名称
	DepartureCityCode    field.String // 出发城市编码
	ArrivalCity          field.String // 目的地名称
	ArrivalCityCode      field.String // 目的地编码
	TravelDays           field.Int64  // 几天
	TravelNights         field.Int64  // 几晚
	DepartureTraffic     field.String // 去程交通
	DepartureTrafficCode field.String // 去程交通编码
	DepartureTrafficDesc field.String // 去程交通描述
	ReturnTraffic        field.String // 返程交通
	ReturnTrafficCode    field.String // 返程交通编码
	ReturnTrafficDesc    field.String // 返程交通描述
	PriceDesc            field.String // 价格描述
	PriceUnit            field.String // 价格单位
	PriceUnitCode        field.String // 价格单位编码
	BelongOp             field.Int64  // 所属客服id
	BelongOpName         field.String // 所属客服名称
	BelongDepartmentCode field.String // 客服所属部门编码
	BelongDepartmentName field.String // 客服所属部门
	Status               field.Int64  // 状态 1 正常 0 停用
	OpChangeNum          field.Int64  // 转OP次数

	fieldMap map[string]field.Expr
}

func (p productDefault) Table(newTableName string) *productDefault {
	p.productDefaultDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p productDefault) As(alias string) *productDefault {
	p.productDefaultDo.DO = *(p.productDefaultDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *productDefault) updateTableName(table string) *productDefault {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.ProductName = field.NewString(table, "product_name")
	p.ProductDesc = field.NewString(table, "product_desc")
	p.ProductManagerDesc = field.NewString(table, "product_manager_desc")
	p.ProductType = field.NewString(table, "product_type")
	p.ProductTypeCode = field.NewString(table, "product_type_code")
	p.SaleLabel = field.NewString(table, "sale_label")
	p.SaleLabelCode = field.NewString(table, "sale_label_code")
	p.DepartureCity = field.NewString(table, "departure_city")
	p.DepartureCityCode = field.NewString(table, "departure_city_code")
	p.ArrivalCity = field.NewString(table, "arrival_city")
	p.ArrivalCityCode = field.NewString(table, "arrival_city_code")
	p.TravelDays = field.NewInt64(table, "travel_days")
	p.TravelNights = field.NewInt64(table, "travel_nights")
	p.DepartureTraffic = field.NewString(table, "departure_traffic")
	p.DepartureTrafficCode = field.NewString(table, "departure_traffic_code")
	p.DepartureTrafficDesc = field.NewString(table, "departure_traffic_desc")
	p.ReturnTraffic = field.NewString(table, "return_traffic")
	p.ReturnTrafficCode = field.NewString(table, "return_traffic_code")
	p.ReturnTrafficDesc = field.NewString(table, "return_traffic_desc")
	p.PriceDesc = field.NewString(table, "price_desc")
	p.PriceUnit = field.NewString(table, "price_unit")
	p.PriceUnitCode = field.NewString(table, "price_unit_code")
	p.BelongOp = field.NewInt64(table, "belong_op")
	p.BelongOpName = field.NewString(table, "belong_op_name")
	p.BelongDepartmentCode = field.NewString(table, "belong_department_code")
	p.BelongDepartmentName = field.NewString(table, "belong_department_name")
	p.Status = field.NewInt64(table, "status")
	p.OpChangeNum = field.NewInt64(table, "op_change_num")

	p.fillFieldMap()

	return p
}

func (p *productDefault) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *productDefault) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 32)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["product_name"] = p.ProductName
	p.fieldMap["product_desc"] = p.ProductDesc
	p.fieldMap["product_manager_desc"] = p.ProductManagerDesc
	p.fieldMap["product_type"] = p.ProductType
	p.fieldMap["product_type_code"] = p.ProductTypeCode
	p.fieldMap["sale_label"] = p.SaleLabel
	p.fieldMap["sale_label_code"] = p.SaleLabelCode
	p.fieldMap["departure_city"] = p.DepartureCity
	p.fieldMap["departure_city_code"] = p.DepartureCityCode
	p.fieldMap["arrival_city"] = p.ArrivalCity
	p.fieldMap["arrival_city_code"] = p.ArrivalCityCode
	p.fieldMap["travel_days"] = p.TravelDays
	p.fieldMap["travel_nights"] = p.TravelNights
	p.fieldMap["departure_traffic"] = p.DepartureTraffic
	p.fieldMap["departure_traffic_code"] = p.DepartureTrafficCode
	p.fieldMap["departure_traffic_desc"] = p.DepartureTrafficDesc
	p.fieldMap["return_traffic"] = p.ReturnTraffic
	p.fieldMap["return_traffic_code"] = p.ReturnTrafficCode
	p.fieldMap["return_traffic_desc"] = p.ReturnTrafficDesc
	p.fieldMap["price_desc"] = p.PriceDesc
	p.fieldMap["price_unit"] = p.PriceUnit
	p.fieldMap["price_unit_code"] = p.PriceUnitCode
	p.fieldMap["belong_op"] = p.BelongOp
	p.fieldMap["belong_op_name"] = p.BelongOpName
	p.fieldMap["belong_department_code"] = p.BelongDepartmentCode
	p.fieldMap["belong_department_name"] = p.BelongDepartmentName
	p.fieldMap["status"] = p.Status
	p.fieldMap["op_change_num"] = p.OpChangeNum
}

func (p productDefault) clone(db *gorm.DB) productDefault {
	p.productDefaultDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p productDefault) replaceDB(db *gorm.DB) productDefault {
	p.productDefaultDo.ReplaceDB(db)
	return p
}

type productDefaultDo struct{ gen.DO }

func (p productDefaultDo) Debug() *productDefaultDo {
	return p.withDO(p.DO.Debug())
}

func (p productDefaultDo) WithContext(ctx context.Context) *productDefaultDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p productDefaultDo) ReadDB() *productDefaultDo {
	return p.Clauses(dbresolver.Read)
}

func (p productDefaultDo) WriteDB() *productDefaultDo {
	return p.Clauses(dbresolver.Write)
}

func (p productDefaultDo) Session(config *gorm.Session) *productDefaultDo {
	return p.withDO(p.DO.Session(config))
}

func (p productDefaultDo) Clauses(conds ...clause.Expression) *productDefaultDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p productDefaultDo) Returning(value interface{}, columns ...string) *productDefaultDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p productDefaultDo) Not(conds ...gen.Condition) *productDefaultDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p productDefaultDo) Or(conds ...gen.Condition) *productDefaultDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p productDefaultDo) Select(conds ...field.Expr) *productDefaultDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p productDefaultDo) Where(conds ...gen.Condition) *productDefaultDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p productDefaultDo) Order(conds ...field.Expr) *productDefaultDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p productDefaultDo) Distinct(cols ...field.Expr) *productDefaultDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p productDefaultDo) Omit(cols ...field.Expr) *productDefaultDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p productDefaultDo) Join(table schema.Tabler, on ...field.Expr) *productDefaultDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p productDefaultDo) LeftJoin(table schema.Tabler, on ...field.Expr) *productDefaultDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p productDefaultDo) RightJoin(table schema.Tabler, on ...field.Expr) *productDefaultDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p productDefaultDo) Group(cols ...field.Expr) *productDefaultDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p productDefaultDo) Having(conds ...gen.Condition) *productDefaultDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p productDefaultDo) Limit(limit int) *productDefaultDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p productDefaultDo) Offset(offset int) *productDefaultDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p productDefaultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *productDefaultDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p productDefaultDo) Unscoped() *productDefaultDo {
	return p.withDO(p.DO.Unscoped())
}

func (p productDefaultDo) Create(values ...*model.ProductDefault) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p productDefaultDo) CreateInBatches(values []*model.ProductDefault, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p productDefaultDo) Save(values ...*model.ProductDefault) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p productDefaultDo) First() (*model.ProductDefault, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductDefault), nil
	}
}

func (p productDefaultDo) Take() (*model.ProductDefault, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductDefault), nil
	}
}

func (p productDefaultDo) Last() (*model.ProductDefault, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductDefault), nil
	}
}

func (p productDefaultDo) Find() ([]*model.ProductDefault, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProductDefault), err
}

func (p productDefaultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProductDefault, err error) {
	buf := make([]*model.ProductDefault, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p productDefaultDo) FindInBatches(result *[]*model.ProductDefault, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p productDefaultDo) Attrs(attrs ...field.AssignExpr) *productDefaultDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p productDefaultDo) Assign(attrs ...field.AssignExpr) *productDefaultDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p productDefaultDo) Joins(fields ...field.RelationField) *productDefaultDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p productDefaultDo) Preload(fields ...field.RelationField) *productDefaultDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p productDefaultDo) FirstOrInit() (*model.ProductDefault, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductDefault), nil
	}
}

func (p productDefaultDo) FirstOrCreate() (*model.ProductDefault, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductDefault), nil
	}
}

func (p productDefaultDo) FindByPage(offset int, limit int) (result []*model.ProductDefault, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p productDefaultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p productDefaultDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p productDefaultDo) Delete(models ...*model.ProductDefault) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *productDefaultDo) withDO(do gen.Dao) *productDefaultDo {
	p.DO = *do.(*gen.DO)
	return p
}
