// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newOrderItem(db *gorm.DB, opts ...gen.DOOption) orderItem {
	_orderItem := orderItem{}

	_orderItem.orderItemDo.UseDB(db, opts...)
	_orderItem.orderItemDo.UseModel(&model.OrderItem{})

	tableName := _orderItem.orderItemDo.TableName()
	_orderItem.ALL = field.NewAsterisk(tableName)
	_orderItem.ID = field.NewInt64(tableName, "id")
	_orderItem.CreatedAt = field.NewTime(tableName, "created_at")
	_orderItem.UpdatedAt = field.NewTime(tableName, "updated_at")
	_orderItem.DeletedAt = field.NewField(tableName, "deleted_at")
	_orderItem.Oid = field.NewInt64(tableName, "oid")
	_orderItem.ProductTypeCode = field.NewString(tableName, "product_type_code")
	_orderItem.ProductType = field.NewString(tableName, "product_type")
	_orderItem.ProductTypeAbbreviation = field.NewString(tableName, "product_type_abbreviation")
	_orderItem.ProductID = field.NewInt64(tableName, "product_id")
	_orderItem.ProductBaseFlag = field.NewInt64(tableName, "product_base_flag")
	_orderItem.ProductName = field.NewString(tableName, "product_name")
	_orderItem.TravelDate = field.NewInt64(tableName, "travel_date")
	_orderItem.ReturnDate = field.NewInt64(tableName, "return_date")
	_orderItem.TravelDayNum = field.NewInt64(tableName, "travel_day_num")
	_orderItem.DepartureCity = field.NewString(tableName, "departure_city")
	_orderItem.DepartureCityCode = field.NewString(tableName, "departure_city_code")
	_orderItem.ArrivalCity = field.NewString(tableName, "arrival_city")
	_orderItem.ArrivalCityCode = field.NewString(tableName, "arrival_city_code")
	_orderItem.PriceUnit = field.NewString(tableName, "price_unit")
	_orderItem.PriceUnitCode = field.NewString(tableName, "price_unit_code")
	_orderItem.PriceUnitAbbreviation = field.NewString(tableName, "price_unit_abbreviation")
	_orderItem.ProductNum = field.NewInt64(tableName, "product_num")
	_orderItem.ProductPrice = field.NewInt64(tableName, "product_price")
	_orderItem.ProductTotalPrice = field.NewInt64(tableName, "product_total_price")
	_orderItem.ProductDiscountPrice = field.NewInt64(tableName, "product_discount_price")
	_orderItem.TotalPrice = field.NewInt64(tableName, "total_price")
	_orderItem.CurrencyCode = field.NewString(tableName, "currency_code")
	_orderItem.CurrencyName = field.NewString(tableName, "currency_name")
	_orderItem.CurrencyExchange = field.NewInt64(tableName, "currency_exchange")
	_orderItem.CurrencyAbbreviation = field.NewString(tableName, "currency_abbreviation")
	_orderItem.CurrencyUnitPrice = field.NewInt64(tableName, "currency_unit_price")
	_orderItem.CurrencyUnitTotalPrice = field.NewInt64(tableName, "currency_unit_total_price")
	_orderItem.CurrencyDiscountPrice = field.NewInt64(tableName, "currency_discount_price")
	_orderItem.CurrencyTotalPrice = field.NewInt64(tableName, "currency_total_price")
	_orderItem.ItemType = field.NewInt64(tableName, "item_type")

	_orderItem.fillFieldMap()

	return _orderItem
}

type orderItem struct {
	orderItemDo

	ALL                     field.Asterisk
	ID                      field.Int64  // 自动编号
	CreatedAt               field.Time   // 创建时间
	UpdatedAt               field.Time   // 更新时间
	DeletedAt               field.Field  // 删除时间
	Oid                     field.Int64  // 订单号
	ProductTypeCode         field.String // 产品类型编码
	ProductType             field.String // 产品类型名称
	ProductTypeAbbreviation field.String // 产品类型简称
	ProductID               field.Int64  // 产品编号
	ProductBaseFlag         field.Int64  // 订单主产品
	ProductName             field.String // 产品名称
	TravelDate              field.Int64  // 出发日期
	ReturnDate              field.Int64  // 返程日期
	TravelDayNum            field.Int64  // 旅游天数
	DepartureCity           field.String // 出发地
	DepartureCityCode       field.String // 出发地编码
	ArrivalCity             field.String // 目的地
	ArrivalCityCode         field.String // 目的地编码
	PriceUnit               field.String // 价格单位
	PriceUnitCode           field.String // 价格单位编码
	PriceUnitAbbreviation   field.String // 价格单位简称
	ProductNum              field.Int64  // 数量
	ProductPrice            field.Int64  // 人民币单价 单位分
	ProductTotalPrice       field.Int64  // 产品 人民币总价 单位分
	ProductDiscountPrice    field.Int64  // 人民币 折扣金额 单位分
	TotalPrice              field.Int64  // 人民币 总价 单位分
	CurrencyCode            field.String // 币种编码
	CurrencyName            field.String // 币种名称
	CurrencyExchange        field.Int64  // 币种汇率*10000
	CurrencyAbbreviation    field.String // 币种简写
	CurrencyUnitPrice       field.Int64  // 币种单价金额
	CurrencyUnitTotalPrice  field.Int64  // 产品 币种 总金额
	CurrencyDiscountPrice   field.Int64  // 币种折扣金额 单位分
	CurrencyTotalPrice      field.Int64  // 币种总价 单位分
	ItemType                field.Int64  // 0 财务报账前添加  1 订单调整子项

	fieldMap map[string]field.Expr
}

func (o orderItem) Table(newTableName string) *orderItem {
	o.orderItemDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderItem) As(alias string) *orderItem {
	o.orderItemDo.DO = *(o.orderItemDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderItem) updateTableName(table string) *orderItem {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")
	o.Oid = field.NewInt64(table, "oid")
	o.ProductTypeCode = field.NewString(table, "product_type_code")
	o.ProductType = field.NewString(table, "product_type")
	o.ProductTypeAbbreviation = field.NewString(table, "product_type_abbreviation")
	o.ProductID = field.NewInt64(table, "product_id")
	o.ProductBaseFlag = field.NewInt64(table, "product_base_flag")
	o.ProductName = field.NewString(table, "product_name")
	o.TravelDate = field.NewInt64(table, "travel_date")
	o.ReturnDate = field.NewInt64(table, "return_date")
	o.TravelDayNum = field.NewInt64(table, "travel_day_num")
	o.DepartureCity = field.NewString(table, "departure_city")
	o.DepartureCityCode = field.NewString(table, "departure_city_code")
	o.ArrivalCity = field.NewString(table, "arrival_city")
	o.ArrivalCityCode = field.NewString(table, "arrival_city_code")
	o.PriceUnit = field.NewString(table, "price_unit")
	o.PriceUnitCode = field.NewString(table, "price_unit_code")
	o.PriceUnitAbbreviation = field.NewString(table, "price_unit_abbreviation")
	o.ProductNum = field.NewInt64(table, "product_num")
	o.ProductPrice = field.NewInt64(table, "product_price")
	o.ProductTotalPrice = field.NewInt64(table, "product_total_price")
	o.ProductDiscountPrice = field.NewInt64(table, "product_discount_price")
	o.TotalPrice = field.NewInt64(table, "total_price")
	o.CurrencyCode = field.NewString(table, "currency_code")
	o.CurrencyName = field.NewString(table, "currency_name")
	o.CurrencyExchange = field.NewInt64(table, "currency_exchange")
	o.CurrencyAbbreviation = field.NewString(table, "currency_abbreviation")
	o.CurrencyUnitPrice = field.NewInt64(table, "currency_unit_price")
	o.CurrencyUnitTotalPrice = field.NewInt64(table, "currency_unit_total_price")
	o.CurrencyDiscountPrice = field.NewInt64(table, "currency_discount_price")
	o.CurrencyTotalPrice = field.NewInt64(table, "currency_total_price")
	o.ItemType = field.NewInt64(table, "item_type")

	o.fillFieldMap()

	return o
}

func (o *orderItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderItem) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 35)
	o.fieldMap["id"] = o.ID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["oid"] = o.Oid
	o.fieldMap["product_type_code"] = o.ProductTypeCode
	o.fieldMap["product_type"] = o.ProductType
	o.fieldMap["product_type_abbreviation"] = o.ProductTypeAbbreviation
	o.fieldMap["product_id"] = o.ProductID
	o.fieldMap["product_base_flag"] = o.ProductBaseFlag
	o.fieldMap["product_name"] = o.ProductName
	o.fieldMap["travel_date"] = o.TravelDate
	o.fieldMap["return_date"] = o.ReturnDate
	o.fieldMap["travel_day_num"] = o.TravelDayNum
	o.fieldMap["departure_city"] = o.DepartureCity
	o.fieldMap["departure_city_code"] = o.DepartureCityCode
	o.fieldMap["arrival_city"] = o.ArrivalCity
	o.fieldMap["arrival_city_code"] = o.ArrivalCityCode
	o.fieldMap["price_unit"] = o.PriceUnit
	o.fieldMap["price_unit_code"] = o.PriceUnitCode
	o.fieldMap["price_unit_abbreviation"] = o.PriceUnitAbbreviation
	o.fieldMap["product_num"] = o.ProductNum
	o.fieldMap["product_price"] = o.ProductPrice
	o.fieldMap["product_total_price"] = o.ProductTotalPrice
	o.fieldMap["product_discount_price"] = o.ProductDiscountPrice
	o.fieldMap["total_price"] = o.TotalPrice
	o.fieldMap["currency_code"] = o.CurrencyCode
	o.fieldMap["currency_name"] = o.CurrencyName
	o.fieldMap["currency_exchange"] = o.CurrencyExchange
	o.fieldMap["currency_abbreviation"] = o.CurrencyAbbreviation
	o.fieldMap["currency_unit_price"] = o.CurrencyUnitPrice
	o.fieldMap["currency_unit_total_price"] = o.CurrencyUnitTotalPrice
	o.fieldMap["currency_discount_price"] = o.CurrencyDiscountPrice
	o.fieldMap["currency_total_price"] = o.CurrencyTotalPrice
	o.fieldMap["item_type"] = o.ItemType
}

func (o orderItem) clone(db *gorm.DB) orderItem {
	o.orderItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderItem) replaceDB(db *gorm.DB) orderItem {
	o.orderItemDo.ReplaceDB(db)
	return o
}

type orderItemDo struct{ gen.DO }

func (o orderItemDo) Debug() *orderItemDo {
	return o.withDO(o.DO.Debug())
}

func (o orderItemDo) WithContext(ctx context.Context) *orderItemDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderItemDo) ReadDB() *orderItemDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderItemDo) WriteDB() *orderItemDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderItemDo) Session(config *gorm.Session) *orderItemDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderItemDo) Clauses(conds ...clause.Expression) *orderItemDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderItemDo) Returning(value interface{}, columns ...string) *orderItemDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderItemDo) Not(conds ...gen.Condition) *orderItemDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderItemDo) Or(conds ...gen.Condition) *orderItemDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderItemDo) Select(conds ...field.Expr) *orderItemDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderItemDo) Where(conds ...gen.Condition) *orderItemDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderItemDo) Order(conds ...field.Expr) *orderItemDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderItemDo) Distinct(cols ...field.Expr) *orderItemDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderItemDo) Omit(cols ...field.Expr) *orderItemDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderItemDo) Join(table schema.Tabler, on ...field.Expr) *orderItemDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) *orderItemDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderItemDo) RightJoin(table schema.Tabler, on ...field.Expr) *orderItemDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderItemDo) Group(cols ...field.Expr) *orderItemDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderItemDo) Having(conds ...gen.Condition) *orderItemDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderItemDo) Limit(limit int) *orderItemDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderItemDo) Offset(offset int) *orderItemDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *orderItemDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderItemDo) Unscoped() *orderItemDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderItemDo) Create(values ...*model.OrderItem) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderItemDo) CreateInBatches(values []*model.OrderItem, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderItemDo) Save(values ...*model.OrderItem) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderItemDo) First() (*model.OrderItem, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderItem), nil
	}
}

func (o orderItemDo) Take() (*model.OrderItem, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderItem), nil
	}
}

func (o orderItemDo) Last() (*model.OrderItem, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderItem), nil
	}
}

func (o orderItemDo) Find() ([]*model.OrderItem, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrderItem), err
}

func (o orderItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderItem, err error) {
	buf := make([]*model.OrderItem, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderItemDo) FindInBatches(result *[]*model.OrderItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderItemDo) Attrs(attrs ...field.AssignExpr) *orderItemDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderItemDo) Assign(attrs ...field.AssignExpr) *orderItemDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderItemDo) Joins(fields ...field.RelationField) *orderItemDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderItemDo) Preload(fields ...field.RelationField) *orderItemDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderItemDo) FirstOrInit() (*model.OrderItem, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderItem), nil
	}
}

func (o orderItemDo) FirstOrCreate() (*model.OrderItem, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderItem), nil
	}
}

func (o orderItemDo) FindByPage(offset int, limit int) (result []*model.OrderItem, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderItemDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderItemDo) Delete(models ...*model.OrderItem) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderItemDo) withDO(do gen.Dao) *orderItemDo {
	o.DO = *do.(*gen.DO)
	return o
}
