// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newCustomRichText(db *gorm.DB, opts ...gen.DOOption) customRichText {
	_customRichText := customRichText{}

	_customRichText.customRichTextDo.UseDB(db, opts...)
	_customRichText.customRichTextDo.UseModel(&model.CustomRichText{})

	tableName := _customRichText.customRichTextDo.TableName()
	_customRichText.ALL = field.NewAsterisk(tableName)
	_customRichText.ID = field.NewInt64(tableName, "id")
	_customRichText.CreatedAt = field.NewTime(tableName, "created_at")
	_customRichText.UpdatedAt = field.NewTime(tableName, "updated_at")
	_customRichText.DeletedAt = field.NewField(tableName, "deleted_at")
	_customRichText.DataCode = field.NewString(tableName, "data_code")
	_customRichText.DataType = field.NewInt64(tableName, "data_type")
	_customRichText.DataID = field.NewInt64(tableName, "data_id")
	_customRichText.DataKey = field.NewString(tableName, "data_key")
	_customRichText.DataValue = field.NewString(tableName, "data_value")

	_customRichText.fillFieldMap()

	return _customRichText
}

type customRichText struct {
	customRichTextDo

	ALL       field.Asterisk
	ID        field.Int64  // 自动编号
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间
	DataCode  field.String // 业务所属编码
	DataType  field.Int64  // 业务所属类型id
	DataID    field.Int64  // 业务所属自增id
	DataKey   field.String // 文本key
	DataValue field.String // 文本内容

	fieldMap map[string]field.Expr
}

func (c customRichText) Table(newTableName string) *customRichText {
	c.customRichTextDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c customRichText) As(alias string) *customRichText {
	c.customRichTextDo.DO = *(c.customRichTextDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *customRichText) updateTableName(table string) *customRichText {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.DataCode = field.NewString(table, "data_code")
	c.DataType = field.NewInt64(table, "data_type")
	c.DataID = field.NewInt64(table, "data_id")
	c.DataKey = field.NewString(table, "data_key")
	c.DataValue = field.NewString(table, "data_value")

	c.fillFieldMap()

	return c
}

func (c *customRichText) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *customRichText) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["data_code"] = c.DataCode
	c.fieldMap["data_type"] = c.DataType
	c.fieldMap["data_id"] = c.DataID
	c.fieldMap["data_key"] = c.DataKey
	c.fieldMap["data_value"] = c.DataValue
}

func (c customRichText) clone(db *gorm.DB) customRichText {
	c.customRichTextDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c customRichText) replaceDB(db *gorm.DB) customRichText {
	c.customRichTextDo.ReplaceDB(db)
	return c
}

type customRichTextDo struct{ gen.DO }

func (c customRichTextDo) Debug() *customRichTextDo {
	return c.withDO(c.DO.Debug())
}

func (c customRichTextDo) WithContext(ctx context.Context) *customRichTextDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c customRichTextDo) ReadDB() *customRichTextDo {
	return c.Clauses(dbresolver.Read)
}

func (c customRichTextDo) WriteDB() *customRichTextDo {
	return c.Clauses(dbresolver.Write)
}

func (c customRichTextDo) Session(config *gorm.Session) *customRichTextDo {
	return c.withDO(c.DO.Session(config))
}

func (c customRichTextDo) Clauses(conds ...clause.Expression) *customRichTextDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c customRichTextDo) Returning(value interface{}, columns ...string) *customRichTextDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c customRichTextDo) Not(conds ...gen.Condition) *customRichTextDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c customRichTextDo) Or(conds ...gen.Condition) *customRichTextDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c customRichTextDo) Select(conds ...field.Expr) *customRichTextDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c customRichTextDo) Where(conds ...gen.Condition) *customRichTextDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c customRichTextDo) Order(conds ...field.Expr) *customRichTextDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c customRichTextDo) Distinct(cols ...field.Expr) *customRichTextDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c customRichTextDo) Omit(cols ...field.Expr) *customRichTextDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c customRichTextDo) Join(table schema.Tabler, on ...field.Expr) *customRichTextDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c customRichTextDo) LeftJoin(table schema.Tabler, on ...field.Expr) *customRichTextDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c customRichTextDo) RightJoin(table schema.Tabler, on ...field.Expr) *customRichTextDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c customRichTextDo) Group(cols ...field.Expr) *customRichTextDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c customRichTextDo) Having(conds ...gen.Condition) *customRichTextDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c customRichTextDo) Limit(limit int) *customRichTextDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c customRichTextDo) Offset(offset int) *customRichTextDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c customRichTextDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *customRichTextDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c customRichTextDo) Unscoped() *customRichTextDo {
	return c.withDO(c.DO.Unscoped())
}

func (c customRichTextDo) Create(values ...*model.CustomRichText) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c customRichTextDo) CreateInBatches(values []*model.CustomRichText, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c customRichTextDo) Save(values ...*model.CustomRichText) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c customRichTextDo) First() (*model.CustomRichText, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomRichText), nil
	}
}

func (c customRichTextDo) Take() (*model.CustomRichText, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomRichText), nil
	}
}

func (c customRichTextDo) Last() (*model.CustomRichText, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomRichText), nil
	}
}

func (c customRichTextDo) Find() ([]*model.CustomRichText, error) {
	result, err := c.DO.Find()
	return result.([]*model.CustomRichText), err
}

func (c customRichTextDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CustomRichText, err error) {
	buf := make([]*model.CustomRichText, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c customRichTextDo) FindInBatches(result *[]*model.CustomRichText, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c customRichTextDo) Attrs(attrs ...field.AssignExpr) *customRichTextDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c customRichTextDo) Assign(attrs ...field.AssignExpr) *customRichTextDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c customRichTextDo) Joins(fields ...field.RelationField) *customRichTextDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c customRichTextDo) Preload(fields ...field.RelationField) *customRichTextDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c customRichTextDo) FirstOrInit() (*model.CustomRichText, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomRichText), nil
	}
}

func (c customRichTextDo) FirstOrCreate() (*model.CustomRichText, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomRichText), nil
	}
}

func (c customRichTextDo) FindByPage(offset int, limit int) (result []*model.CustomRichText, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c customRichTextDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c customRichTextDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c customRichTextDo) Delete(models ...*model.CustomRichText) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *customRichTextDo) withDO(do gen.Dao) *customRichTextDo {
	c.DO = *do.(*gen.DO)
	return c
}
