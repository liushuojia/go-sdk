// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newCompanyQualification(db *gorm.DB, opts ...gen.DOOption) companyQualification {
	_companyQualification := companyQualification{}

	_companyQualification.companyQualificationDo.UseDB(db, opts...)
	_companyQualification.companyQualificationDo.UseModel(&model.CompanyQualification{})

	tableName := _companyQualification.companyQualificationDo.TableName()
	_companyQualification.ALL = field.NewAsterisk(tableName)
	_companyQualification.ID = field.NewInt64(tableName, "id")
	_companyQualification.CreatedAt = field.NewTime(tableName, "created_at")
	_companyQualification.UpdatedAt = field.NewTime(tableName, "updated_at")
	_companyQualification.DeletedAt = field.NewField(tableName, "deleted_at")
	_companyQualification.CompanyName = field.NewString(tableName, "company_name")
	_companyQualification.CompanyNameAbbreviated = field.NewString(tableName, "company_name_abbreviated")
	_companyQualification.CompanyEnName = field.NewString(tableName, "company_en_name")
	_companyQualification.CompanyEnAbbreviated = field.NewString(tableName, "company_en_abbreviated")
	_companyQualification.CompanyProperty = field.NewString(tableName, "company_property")
	_companyQualification.CompanyPropertyCode = field.NewString(tableName, "company_property_code")
	_companyQualification.CompanyPhone = field.NewString(tableName, "company_phone")
	_companyQualification.CompanyFax = field.NewString(tableName, "company_fax")
	_companyQualification.CompanyMobile = field.NewString(tableName, "company_mobile")
	_companyQualification.CompanyEmail = field.NewString(tableName, "company_email")
	_companyQualification.BelongCompany = field.NewInt64(tableName, "belong_company")
	_companyQualification.AreaName = field.NewString(tableName, "area_name")
	_companyQualification.AreaCode = field.NewString(tableName, "area_code")
	_companyQualification.Address = field.NewString(tableName, "address")
	_companyQualification.Logo = field.NewString(tableName, "logo")
	_companyQualification.Status = field.NewInt64(tableName, "status")
	_companyQualification.BelongOp = field.NewInt64(tableName, "belong_op")
	_companyQualification.BelongOpName = field.NewString(tableName, "belong_op_name")
	_companyQualification.BelongDepartmentCode = field.NewString(tableName, "belong_department_code")
	_companyQualification.BelongDepartmentName = field.NewString(tableName, "belong_department_name")
	_companyQualification.BelongOpSec = field.NewInt64(tableName, "belong_op_sec")
	_companyQualification.BelongOpNameSec = field.NewString(tableName, "belong_op_name_sec")
	_companyQualification.BelongDepartmentCodeSec = field.NewString(tableName, "belong_department_code_sec")
	_companyQualification.BelongDepartmentNameSec = field.NewString(tableName, "belong_department_name_sec")
	_companyQualification.MyCompanyFlag = field.NewInt64(tableName, "my_company_flag")
	_companyQualification.OpChangeNum = field.NewInt64(tableName, "op_change_num")
	_companyQualification.LastFollowTime = field.NewInt64(tableName, "last_follow_time")

	_companyQualification.fillFieldMap()

	return _companyQualification
}

type companyQualification struct {
	companyQualificationDo

	ALL                     field.Asterisk
	ID                      field.Int64  // 自动编号
	CreatedAt               field.Time   // 创建时间
	UpdatedAt               field.Time   // 更新时间
	DeletedAt               field.Field  // 删除时间
	CompanyName             field.String // 公司名称
	CompanyNameAbbreviated  field.String // 简称
	CompanyEnName           field.String // 公司英文名称
	CompanyEnAbbreviated    field.String // 公司英文名称 简称
	CompanyProperty         field.String // 公司标签名称
	CompanyPropertyCode     field.String // 公司标签编码
	CompanyPhone            field.String // 公司电话
	CompanyFax              field.String // 公司传真
	CompanyMobile           field.String // 公司手机
	CompanyEmail            field.String // 公司邮件
	BelongCompany           field.Int64  // 所属公司
	AreaName                field.String // 地理位置名称
	AreaCode                field.String // 地理位置编码
	Address                 field.String // 地址
	Logo                    field.String // logo地址
	Status                  field.Int64  // 状态
	BelongOp                field.Int64  // 所属OP
	BelongOpName            field.String // 所属OP姓名
	BelongDepartmentCode    field.String // 所属部门编码
	BelongDepartmentName    field.String // 所属部门
	BelongOpSec             field.Int64  // 所属OP二
	BelongOpNameSec         field.String // 所属OP二姓名
	BelongDepartmentCodeSec field.String // 所属部门2编码
	BelongDepartmentNameSec field.String // 所属部门2
	MyCompanyFlag           field.Int64  // 是否自家公司资质
	OpChangeNum             field.Int64  // 转交OP次数
	LastFollowTime          field.Int64  // 最近跟新时间

	fieldMap map[string]field.Expr
}

func (c companyQualification) Table(newTableName string) *companyQualification {
	c.companyQualificationDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c companyQualification) As(alias string) *companyQualification {
	c.companyQualificationDo.DO = *(c.companyQualificationDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *companyQualification) updateTableName(table string) *companyQualification {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.CompanyName = field.NewString(table, "company_name")
	c.CompanyNameAbbreviated = field.NewString(table, "company_name_abbreviated")
	c.CompanyEnName = field.NewString(table, "company_en_name")
	c.CompanyEnAbbreviated = field.NewString(table, "company_en_abbreviated")
	c.CompanyProperty = field.NewString(table, "company_property")
	c.CompanyPropertyCode = field.NewString(table, "company_property_code")
	c.CompanyPhone = field.NewString(table, "company_phone")
	c.CompanyFax = field.NewString(table, "company_fax")
	c.CompanyMobile = field.NewString(table, "company_mobile")
	c.CompanyEmail = field.NewString(table, "company_email")
	c.BelongCompany = field.NewInt64(table, "belong_company")
	c.AreaName = field.NewString(table, "area_name")
	c.AreaCode = field.NewString(table, "area_code")
	c.Address = field.NewString(table, "address")
	c.Logo = field.NewString(table, "logo")
	c.Status = field.NewInt64(table, "status")
	c.BelongOp = field.NewInt64(table, "belong_op")
	c.BelongOpName = field.NewString(table, "belong_op_name")
	c.BelongDepartmentCode = field.NewString(table, "belong_department_code")
	c.BelongDepartmentName = field.NewString(table, "belong_department_name")
	c.BelongOpSec = field.NewInt64(table, "belong_op_sec")
	c.BelongOpNameSec = field.NewString(table, "belong_op_name_sec")
	c.BelongDepartmentCodeSec = field.NewString(table, "belong_department_code_sec")
	c.BelongDepartmentNameSec = field.NewString(table, "belong_department_name_sec")
	c.MyCompanyFlag = field.NewInt64(table, "my_company_flag")
	c.OpChangeNum = field.NewInt64(table, "op_change_num")
	c.LastFollowTime = field.NewInt64(table, "last_follow_time")

	c.fillFieldMap()

	return c
}

func (c *companyQualification) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *companyQualification) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 31)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["company_name"] = c.CompanyName
	c.fieldMap["company_name_abbreviated"] = c.CompanyNameAbbreviated
	c.fieldMap["company_en_name"] = c.CompanyEnName
	c.fieldMap["company_en_abbreviated"] = c.CompanyEnAbbreviated
	c.fieldMap["company_property"] = c.CompanyProperty
	c.fieldMap["company_property_code"] = c.CompanyPropertyCode
	c.fieldMap["company_phone"] = c.CompanyPhone
	c.fieldMap["company_fax"] = c.CompanyFax
	c.fieldMap["company_mobile"] = c.CompanyMobile
	c.fieldMap["company_email"] = c.CompanyEmail
	c.fieldMap["belong_company"] = c.BelongCompany
	c.fieldMap["area_name"] = c.AreaName
	c.fieldMap["area_code"] = c.AreaCode
	c.fieldMap["address"] = c.Address
	c.fieldMap["logo"] = c.Logo
	c.fieldMap["status"] = c.Status
	c.fieldMap["belong_op"] = c.BelongOp
	c.fieldMap["belong_op_name"] = c.BelongOpName
	c.fieldMap["belong_department_code"] = c.BelongDepartmentCode
	c.fieldMap["belong_department_name"] = c.BelongDepartmentName
	c.fieldMap["belong_op_sec"] = c.BelongOpSec
	c.fieldMap["belong_op_name_sec"] = c.BelongOpNameSec
	c.fieldMap["belong_department_code_sec"] = c.BelongDepartmentCodeSec
	c.fieldMap["belong_department_name_sec"] = c.BelongDepartmentNameSec
	c.fieldMap["my_company_flag"] = c.MyCompanyFlag
	c.fieldMap["op_change_num"] = c.OpChangeNum
	c.fieldMap["last_follow_time"] = c.LastFollowTime
}

func (c companyQualification) clone(db *gorm.DB) companyQualification {
	c.companyQualificationDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c companyQualification) replaceDB(db *gorm.DB) companyQualification {
	c.companyQualificationDo.ReplaceDB(db)
	return c
}

type companyQualificationDo struct{ gen.DO }

func (c companyQualificationDo) Debug() *companyQualificationDo {
	return c.withDO(c.DO.Debug())
}

func (c companyQualificationDo) WithContext(ctx context.Context) *companyQualificationDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c companyQualificationDo) ReadDB() *companyQualificationDo {
	return c.Clauses(dbresolver.Read)
}

func (c companyQualificationDo) WriteDB() *companyQualificationDo {
	return c.Clauses(dbresolver.Write)
}

func (c companyQualificationDo) Session(config *gorm.Session) *companyQualificationDo {
	return c.withDO(c.DO.Session(config))
}

func (c companyQualificationDo) Clauses(conds ...clause.Expression) *companyQualificationDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c companyQualificationDo) Returning(value interface{}, columns ...string) *companyQualificationDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c companyQualificationDo) Not(conds ...gen.Condition) *companyQualificationDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c companyQualificationDo) Or(conds ...gen.Condition) *companyQualificationDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c companyQualificationDo) Select(conds ...field.Expr) *companyQualificationDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c companyQualificationDo) Where(conds ...gen.Condition) *companyQualificationDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c companyQualificationDo) Order(conds ...field.Expr) *companyQualificationDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c companyQualificationDo) Distinct(cols ...field.Expr) *companyQualificationDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c companyQualificationDo) Omit(cols ...field.Expr) *companyQualificationDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c companyQualificationDo) Join(table schema.Tabler, on ...field.Expr) *companyQualificationDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c companyQualificationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *companyQualificationDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c companyQualificationDo) RightJoin(table schema.Tabler, on ...field.Expr) *companyQualificationDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c companyQualificationDo) Group(cols ...field.Expr) *companyQualificationDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c companyQualificationDo) Having(conds ...gen.Condition) *companyQualificationDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c companyQualificationDo) Limit(limit int) *companyQualificationDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c companyQualificationDo) Offset(offset int) *companyQualificationDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c companyQualificationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *companyQualificationDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c companyQualificationDo) Unscoped() *companyQualificationDo {
	return c.withDO(c.DO.Unscoped())
}

func (c companyQualificationDo) Create(values ...*model.CompanyQualification) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c companyQualificationDo) CreateInBatches(values []*model.CompanyQualification, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c companyQualificationDo) Save(values ...*model.CompanyQualification) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c companyQualificationDo) First() (*model.CompanyQualification, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyQualification), nil
	}
}

func (c companyQualificationDo) Take() (*model.CompanyQualification, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyQualification), nil
	}
}

func (c companyQualificationDo) Last() (*model.CompanyQualification, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyQualification), nil
	}
}

func (c companyQualificationDo) Find() ([]*model.CompanyQualification, error) {
	result, err := c.DO.Find()
	return result.([]*model.CompanyQualification), err
}

func (c companyQualificationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CompanyQualification, err error) {
	buf := make([]*model.CompanyQualification, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c companyQualificationDo) FindInBatches(result *[]*model.CompanyQualification, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c companyQualificationDo) Attrs(attrs ...field.AssignExpr) *companyQualificationDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c companyQualificationDo) Assign(attrs ...field.AssignExpr) *companyQualificationDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c companyQualificationDo) Joins(fields ...field.RelationField) *companyQualificationDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c companyQualificationDo) Preload(fields ...field.RelationField) *companyQualificationDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c companyQualificationDo) FirstOrInit() (*model.CompanyQualification, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyQualification), nil
	}
}

func (c companyQualificationDo) FirstOrCreate() (*model.CompanyQualification, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyQualification), nil
	}
}

func (c companyQualificationDo) FindByPage(offset int, limit int) (result []*model.CompanyQualification, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c companyQualificationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c companyQualificationDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c companyQualificationDo) Delete(models ...*model.CompanyQualification) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *companyQualificationDo) withDO(do gen.Dao) *companyQualificationDo {
	c.DO = *do.(*gen.DO)
	return c
}
