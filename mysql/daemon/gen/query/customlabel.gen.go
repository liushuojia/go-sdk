// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newCustomLabel(db *gorm.DB, opts ...gen.DOOption) customLabel {
	_customLabel := customLabel{}

	_customLabel.customLabelDo.UseDB(db, opts...)
	_customLabel.customLabelDo.UseModel(&model.CustomLabel{})

	tableName := _customLabel.customLabelDo.TableName()
	_customLabel.ALL = field.NewAsterisk(tableName)
	_customLabel.ID = field.NewInt64(tableName, "id")
	_customLabel.CreatedAt = field.NewTime(tableName, "created_at")
	_customLabel.UpdatedAt = field.NewTime(tableName, "updated_at")
	_customLabel.DeletedAt = field.NewField(tableName, "deleted_at")
	_customLabel.DataCode = field.NewString(tableName, "data_code")
	_customLabel.DataType = field.NewInt64(tableName, "data_type")
	_customLabel.DataID = field.NewInt64(tableName, "data_id")
	_customLabel.LabelName = field.NewString(tableName, "label_name")
	_customLabel.LabelCode = field.NewString(tableName, "label_code")
	_customLabel.LabelAbbreviation = field.NewString(tableName, "label_abbreviation")

	_customLabel.fillFieldMap()

	return _customLabel
}

type customLabel struct {
	customLabelDo

	ALL               field.Asterisk
	ID                field.Int64  // 自动编号
	CreatedAt         field.Time   // 创建时间
	UpdatedAt         field.Time   // 更新时间
	DeletedAt         field.Field  // 删除时间
	DataCode          field.String // 业务所属编码
	DataType          field.Int64  // 业务所属类型id
	DataID            field.Int64  // 业务所属自增id
	LabelName         field.String // 标签名称
	LabelCode         field.String // 标签编码
	LabelAbbreviation field.String // 标签简称 方便后续增加更多维度

	fieldMap map[string]field.Expr
}

func (c customLabel) Table(newTableName string) *customLabel {
	c.customLabelDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c customLabel) As(alias string) *customLabel {
	c.customLabelDo.DO = *(c.customLabelDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *customLabel) updateTableName(table string) *customLabel {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.DataCode = field.NewString(table, "data_code")
	c.DataType = field.NewInt64(table, "data_type")
	c.DataID = field.NewInt64(table, "data_id")
	c.LabelName = field.NewString(table, "label_name")
	c.LabelCode = field.NewString(table, "label_code")
	c.LabelAbbreviation = field.NewString(table, "label_abbreviation")

	c.fillFieldMap()

	return c
}

func (c *customLabel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *customLabel) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["data_code"] = c.DataCode
	c.fieldMap["data_type"] = c.DataType
	c.fieldMap["data_id"] = c.DataID
	c.fieldMap["label_name"] = c.LabelName
	c.fieldMap["label_code"] = c.LabelCode
	c.fieldMap["label_abbreviation"] = c.LabelAbbreviation
}

func (c customLabel) clone(db *gorm.DB) customLabel {
	c.customLabelDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c customLabel) replaceDB(db *gorm.DB) customLabel {
	c.customLabelDo.ReplaceDB(db)
	return c
}

type customLabelDo struct{ gen.DO }

func (c customLabelDo) Debug() *customLabelDo {
	return c.withDO(c.DO.Debug())
}

func (c customLabelDo) WithContext(ctx context.Context) *customLabelDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c customLabelDo) ReadDB() *customLabelDo {
	return c.Clauses(dbresolver.Read)
}

func (c customLabelDo) WriteDB() *customLabelDo {
	return c.Clauses(dbresolver.Write)
}

func (c customLabelDo) Session(config *gorm.Session) *customLabelDo {
	return c.withDO(c.DO.Session(config))
}

func (c customLabelDo) Clauses(conds ...clause.Expression) *customLabelDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c customLabelDo) Returning(value interface{}, columns ...string) *customLabelDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c customLabelDo) Not(conds ...gen.Condition) *customLabelDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c customLabelDo) Or(conds ...gen.Condition) *customLabelDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c customLabelDo) Select(conds ...field.Expr) *customLabelDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c customLabelDo) Where(conds ...gen.Condition) *customLabelDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c customLabelDo) Order(conds ...field.Expr) *customLabelDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c customLabelDo) Distinct(cols ...field.Expr) *customLabelDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c customLabelDo) Omit(cols ...field.Expr) *customLabelDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c customLabelDo) Join(table schema.Tabler, on ...field.Expr) *customLabelDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c customLabelDo) LeftJoin(table schema.Tabler, on ...field.Expr) *customLabelDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c customLabelDo) RightJoin(table schema.Tabler, on ...field.Expr) *customLabelDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c customLabelDo) Group(cols ...field.Expr) *customLabelDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c customLabelDo) Having(conds ...gen.Condition) *customLabelDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c customLabelDo) Limit(limit int) *customLabelDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c customLabelDo) Offset(offset int) *customLabelDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c customLabelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *customLabelDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c customLabelDo) Unscoped() *customLabelDo {
	return c.withDO(c.DO.Unscoped())
}

func (c customLabelDo) Create(values ...*model.CustomLabel) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c customLabelDo) CreateInBatches(values []*model.CustomLabel, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c customLabelDo) Save(values ...*model.CustomLabel) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c customLabelDo) First() (*model.CustomLabel, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomLabel), nil
	}
}

func (c customLabelDo) Take() (*model.CustomLabel, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomLabel), nil
	}
}

func (c customLabelDo) Last() (*model.CustomLabel, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomLabel), nil
	}
}

func (c customLabelDo) Find() ([]*model.CustomLabel, error) {
	result, err := c.DO.Find()
	return result.([]*model.CustomLabel), err
}

func (c customLabelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CustomLabel, err error) {
	buf := make([]*model.CustomLabel, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c customLabelDo) FindInBatches(result *[]*model.CustomLabel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c customLabelDo) Attrs(attrs ...field.AssignExpr) *customLabelDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c customLabelDo) Assign(attrs ...field.AssignExpr) *customLabelDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c customLabelDo) Joins(fields ...field.RelationField) *customLabelDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c customLabelDo) Preload(fields ...field.RelationField) *customLabelDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c customLabelDo) FirstOrInit() (*model.CustomLabel, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomLabel), nil
	}
}

func (c customLabelDo) FirstOrCreate() (*model.CustomLabel, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomLabel), nil
	}
}

func (c customLabelDo) FindByPage(offset int, limit int) (result []*model.CustomLabel, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c customLabelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c customLabelDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c customLabelDo) Delete(models ...*model.CustomLabel) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *customLabelDo) withDO(do gen.Dao) *customLabelDo {
	c.DO = *do.(*gen.DO)
	return c
}
