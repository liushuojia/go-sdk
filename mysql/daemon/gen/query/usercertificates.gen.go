// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newUserCertificate(db *gorm.DB, opts ...gen.DOOption) userCertificate {
	_userCertificate := userCertificate{}

	_userCertificate.userCertificateDo.UseDB(db, opts...)
	_userCertificate.userCertificateDo.UseModel(&model.UserCertificate{})

	tableName := _userCertificate.userCertificateDo.TableName()
	_userCertificate.ALL = field.NewAsterisk(tableName)
	_userCertificate.ID = field.NewInt64(tableName, "id")
	_userCertificate.CreatedAt = field.NewTime(tableName, "created_at")
	_userCertificate.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userCertificate.DeletedAt = field.NewField(tableName, "deleted_at")
	_userCertificate.UID = field.NewInt64(tableName, "uid")
	_userCertificate.NameFir = field.NewString(tableName, "name_fir")
	_userCertificate.NameSec = field.NewString(tableName, "name_sec")
	_userCertificate.NameFirPing = field.NewString(tableName, "name_fir_ping")
	_userCertificate.NameSecPing = field.NewString(tableName, "name_sec_ping")
	_userCertificate.TypeName = field.NewString(tableName, "type_name")
	_userCertificate.TypeCode = field.NewString(tableName, "type_code")
	_userCertificate.IDNumber = field.NewString(tableName, "id_number")
	_userCertificate.ExpirationDate = field.NewInt64(tableName, "expiration_date")
	_userCertificate.Sex = field.NewInt64(tableName, "sex")
	_userCertificate.Birthday = field.NewInt64(tableName, "birthday")
	_userCertificate.IDPlace = field.NewString(tableName, "id_place")
	_userCertificate.IDDesc = field.NewString(tableName, "id_desc")

	_userCertificate.fillFieldMap()

	return _userCertificate
}

type userCertificate struct {
	userCertificateDo

	ALL            field.Asterisk
	ID             field.Int64  // 自动编号
	CreatedAt      field.Time   // 创建时间
	UpdatedAt      field.Time   // 更新时间
	DeletedAt      field.Field  // 删除时间
	UID            field.Int64  // 用户编码
	NameFir        field.String // 姓
	NameSec        field.String // 名
	NameFirPing    field.String // 姓 拼音
	NameSecPing    field.String // 名 拼音
	TypeName       field.String // 类型名称
	TypeCode       field.String // 类型编码
	IDNumber       field.String // 证件号码
	ExpirationDate field.Int64  // 有效期
	Sex            field.Int64  // 性别
	Birthday       field.Int64  // 出生日期
	IDPlace        field.String // 签发地
	IDDesc         field.String // 补充描述

	fieldMap map[string]field.Expr
}

func (u userCertificate) Table(newTableName string) *userCertificate {
	u.userCertificateDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userCertificate) As(alias string) *userCertificate {
	u.userCertificateDo.DO = *(u.userCertificateDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userCertificate) updateTableName(table string) *userCertificate {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.UID = field.NewInt64(table, "uid")
	u.NameFir = field.NewString(table, "name_fir")
	u.NameSec = field.NewString(table, "name_sec")
	u.NameFirPing = field.NewString(table, "name_fir_ping")
	u.NameSecPing = field.NewString(table, "name_sec_ping")
	u.TypeName = field.NewString(table, "type_name")
	u.TypeCode = field.NewString(table, "type_code")
	u.IDNumber = field.NewString(table, "id_number")
	u.ExpirationDate = field.NewInt64(table, "expiration_date")
	u.Sex = field.NewInt64(table, "sex")
	u.Birthday = field.NewInt64(table, "birthday")
	u.IDPlace = field.NewString(table, "id_place")
	u.IDDesc = field.NewString(table, "id_desc")

	u.fillFieldMap()

	return u
}

func (u *userCertificate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userCertificate) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 17)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["uid"] = u.UID
	u.fieldMap["name_fir"] = u.NameFir
	u.fieldMap["name_sec"] = u.NameSec
	u.fieldMap["name_fir_ping"] = u.NameFirPing
	u.fieldMap["name_sec_ping"] = u.NameSecPing
	u.fieldMap["type_name"] = u.TypeName
	u.fieldMap["type_code"] = u.TypeCode
	u.fieldMap["id_number"] = u.IDNumber
	u.fieldMap["expiration_date"] = u.ExpirationDate
	u.fieldMap["sex"] = u.Sex
	u.fieldMap["birthday"] = u.Birthday
	u.fieldMap["id_place"] = u.IDPlace
	u.fieldMap["id_desc"] = u.IDDesc
}

func (u userCertificate) clone(db *gorm.DB) userCertificate {
	u.userCertificateDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userCertificate) replaceDB(db *gorm.DB) userCertificate {
	u.userCertificateDo.ReplaceDB(db)
	return u
}

type userCertificateDo struct{ gen.DO }

func (u userCertificateDo) Debug() *userCertificateDo {
	return u.withDO(u.DO.Debug())
}

func (u userCertificateDo) WithContext(ctx context.Context) *userCertificateDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userCertificateDo) ReadDB() *userCertificateDo {
	return u.Clauses(dbresolver.Read)
}

func (u userCertificateDo) WriteDB() *userCertificateDo {
	return u.Clauses(dbresolver.Write)
}

func (u userCertificateDo) Session(config *gorm.Session) *userCertificateDo {
	return u.withDO(u.DO.Session(config))
}

func (u userCertificateDo) Clauses(conds ...clause.Expression) *userCertificateDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userCertificateDo) Returning(value interface{}, columns ...string) *userCertificateDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userCertificateDo) Not(conds ...gen.Condition) *userCertificateDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userCertificateDo) Or(conds ...gen.Condition) *userCertificateDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userCertificateDo) Select(conds ...field.Expr) *userCertificateDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userCertificateDo) Where(conds ...gen.Condition) *userCertificateDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userCertificateDo) Order(conds ...field.Expr) *userCertificateDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userCertificateDo) Distinct(cols ...field.Expr) *userCertificateDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userCertificateDo) Omit(cols ...field.Expr) *userCertificateDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userCertificateDo) Join(table schema.Tabler, on ...field.Expr) *userCertificateDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userCertificateDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userCertificateDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userCertificateDo) RightJoin(table schema.Tabler, on ...field.Expr) *userCertificateDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userCertificateDo) Group(cols ...field.Expr) *userCertificateDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userCertificateDo) Having(conds ...gen.Condition) *userCertificateDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userCertificateDo) Limit(limit int) *userCertificateDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userCertificateDo) Offset(offset int) *userCertificateDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userCertificateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userCertificateDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userCertificateDo) Unscoped() *userCertificateDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userCertificateDo) Create(values ...*model.UserCertificate) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userCertificateDo) CreateInBatches(values []*model.UserCertificate, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userCertificateDo) Save(values ...*model.UserCertificate) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userCertificateDo) First() (*model.UserCertificate, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCertificate), nil
	}
}

func (u userCertificateDo) Take() (*model.UserCertificate, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCertificate), nil
	}
}

func (u userCertificateDo) Last() (*model.UserCertificate, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCertificate), nil
	}
}

func (u userCertificateDo) Find() ([]*model.UserCertificate, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserCertificate), err
}

func (u userCertificateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserCertificate, err error) {
	buf := make([]*model.UserCertificate, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userCertificateDo) FindInBatches(result *[]*model.UserCertificate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userCertificateDo) Attrs(attrs ...field.AssignExpr) *userCertificateDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userCertificateDo) Assign(attrs ...field.AssignExpr) *userCertificateDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userCertificateDo) Joins(fields ...field.RelationField) *userCertificateDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userCertificateDo) Preload(fields ...field.RelationField) *userCertificateDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userCertificateDo) FirstOrInit() (*model.UserCertificate, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCertificate), nil
	}
}

func (u userCertificateDo) FirstOrCreate() (*model.UserCertificate, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCertificate), nil
	}
}

func (u userCertificateDo) FindByPage(offset int, limit int) (result []*model.UserCertificate, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userCertificateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userCertificateDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userCertificateDo) Delete(models ...*model.UserCertificate) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userCertificateDo) withDO(do gen.Dao) *userCertificateDo {
	u.DO = *do.(*gen.DO)
	return u
}
