// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newPageRole(db *gorm.DB, opts ...gen.DOOption) pageRole {
	_pageRole := pageRole{}

	_pageRole.pageRoleDo.UseDB(db, opts...)
	_pageRole.pageRoleDo.UseModel(&model.PageRole{})

	tableName := _pageRole.pageRoleDo.TableName()
	_pageRole.ALL = field.NewAsterisk(tableName)
	_pageRole.ID = field.NewInt64(tableName, "id")
	_pageRole.CreatedAt = field.NewTime(tableName, "created_at")
	_pageRole.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pageRole.DeletedAt = field.NewField(tableName, "deleted_at")
	_pageRole.PlatCode = field.NewString(tableName, "plat_code")
	_pageRole.PlatName = field.NewString(tableName, "plat_name")
	_pageRole.PageRoleID = field.NewInt64(tableName, "page_role_id")
	_pageRole.Title = field.NewString(tableName, "title")
	_pageRole.TitleAbbreviation = field.NewString(tableName, "title_abbreviation")
	_pageRole.PageType = field.NewInt64(tableName, "page_type")
	_pageRole.LinkMethod = field.NewString(tableName, "link_method")
	_pageRole.LinkURL = field.NewString(tableName, "link_url")
	_pageRole.PageURL = field.NewString(tableName, "page_url")
	_pageRole.PageMark = field.NewString(tableName, "page_mark")
	_pageRole.OpenType = field.NewInt64(tableName, "open_type")
	_pageRole.Weight = field.NewInt64(tableName, "weight")
	_pageRole.Icon = field.NewString(tableName, "icon")
	_pageRole.IconClass = field.NewString(tableName, "icon_class")
	_pageRole.Status = field.NewInt64(tableName, "status")

	_pageRole.fillFieldMap()

	return _pageRole
}

type pageRole struct {
	pageRoleDo

	ALL               field.Asterisk
	ID                field.Int64  // 自动编号
	CreatedAt         field.Time   // 创建时间
	UpdatedAt         field.Time   // 更新时间
	DeletedAt         field.Field  // 删除时间
	PlatCode          field.String // 类型编码
	PlatName          field.String // 类型名称
	PageRoleID        field.Int64  // 父级id
	Title             field.String // 名称
	TitleAbbreviation field.String // 简称
	PageType          field.Int64  // 类型： 0 目录  1 菜单  2 按钮 3 页面
	LinkMethod        field.String // 链接请求方法
	LinkURL           field.String // 链接地址
	PageURL           field.String // 访问地址
	PageMark          field.String // 标识
	OpenType          field.Int64  // 0 页签 1 新窗
	Weight            field.Int64  // 排序权重
	Icon              field.String // 图标编码
	IconClass         field.String // 图标分类
	Status            field.Int64  // 0 隐藏 1 显示

	fieldMap map[string]field.Expr
}

func (p pageRole) Table(newTableName string) *pageRole {
	p.pageRoleDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pageRole) As(alias string) *pageRole {
	p.pageRoleDo.DO = *(p.pageRoleDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pageRole) updateTableName(table string) *pageRole {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.PlatCode = field.NewString(table, "plat_code")
	p.PlatName = field.NewString(table, "plat_name")
	p.PageRoleID = field.NewInt64(table, "page_role_id")
	p.Title = field.NewString(table, "title")
	p.TitleAbbreviation = field.NewString(table, "title_abbreviation")
	p.PageType = field.NewInt64(table, "page_type")
	p.LinkMethod = field.NewString(table, "link_method")
	p.LinkURL = field.NewString(table, "link_url")
	p.PageURL = field.NewString(table, "page_url")
	p.PageMark = field.NewString(table, "page_mark")
	p.OpenType = field.NewInt64(table, "open_type")
	p.Weight = field.NewInt64(table, "weight")
	p.Icon = field.NewString(table, "icon")
	p.IconClass = field.NewString(table, "icon_class")
	p.Status = field.NewInt64(table, "status")

	p.fillFieldMap()

	return p
}

func (p *pageRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pageRole) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 19)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["plat_code"] = p.PlatCode
	p.fieldMap["plat_name"] = p.PlatName
	p.fieldMap["page_role_id"] = p.PageRoleID
	p.fieldMap["title"] = p.Title
	p.fieldMap["title_abbreviation"] = p.TitleAbbreviation
	p.fieldMap["page_type"] = p.PageType
	p.fieldMap["link_method"] = p.LinkMethod
	p.fieldMap["link_url"] = p.LinkURL
	p.fieldMap["page_url"] = p.PageURL
	p.fieldMap["page_mark"] = p.PageMark
	p.fieldMap["open_type"] = p.OpenType
	p.fieldMap["weight"] = p.Weight
	p.fieldMap["icon"] = p.Icon
	p.fieldMap["icon_class"] = p.IconClass
	p.fieldMap["status"] = p.Status
}

func (p pageRole) clone(db *gorm.DB) pageRole {
	p.pageRoleDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pageRole) replaceDB(db *gorm.DB) pageRole {
	p.pageRoleDo.ReplaceDB(db)
	return p
}

type pageRoleDo struct{ gen.DO }

func (p pageRoleDo) Debug() *pageRoleDo {
	return p.withDO(p.DO.Debug())
}

func (p pageRoleDo) WithContext(ctx context.Context) *pageRoleDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pageRoleDo) ReadDB() *pageRoleDo {
	return p.Clauses(dbresolver.Read)
}

func (p pageRoleDo) WriteDB() *pageRoleDo {
	return p.Clauses(dbresolver.Write)
}

func (p pageRoleDo) Session(config *gorm.Session) *pageRoleDo {
	return p.withDO(p.DO.Session(config))
}

func (p pageRoleDo) Clauses(conds ...clause.Expression) *pageRoleDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pageRoleDo) Returning(value interface{}, columns ...string) *pageRoleDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pageRoleDo) Not(conds ...gen.Condition) *pageRoleDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pageRoleDo) Or(conds ...gen.Condition) *pageRoleDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pageRoleDo) Select(conds ...field.Expr) *pageRoleDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pageRoleDo) Where(conds ...gen.Condition) *pageRoleDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pageRoleDo) Order(conds ...field.Expr) *pageRoleDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pageRoleDo) Distinct(cols ...field.Expr) *pageRoleDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pageRoleDo) Omit(cols ...field.Expr) *pageRoleDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pageRoleDo) Join(table schema.Tabler, on ...field.Expr) *pageRoleDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pageRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *pageRoleDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pageRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) *pageRoleDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pageRoleDo) Group(cols ...field.Expr) *pageRoleDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pageRoleDo) Having(conds ...gen.Condition) *pageRoleDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pageRoleDo) Limit(limit int) *pageRoleDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pageRoleDo) Offset(offset int) *pageRoleDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pageRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *pageRoleDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pageRoleDo) Unscoped() *pageRoleDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pageRoleDo) Create(values ...*model.PageRole) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pageRoleDo) CreateInBatches(values []*model.PageRole, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pageRoleDo) Save(values ...*model.PageRole) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pageRoleDo) First() (*model.PageRole, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PageRole), nil
	}
}

func (p pageRoleDo) Take() (*model.PageRole, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PageRole), nil
	}
}

func (p pageRoleDo) Last() (*model.PageRole, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PageRole), nil
	}
}

func (p pageRoleDo) Find() ([]*model.PageRole, error) {
	result, err := p.DO.Find()
	return result.([]*model.PageRole), err
}

func (p pageRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PageRole, err error) {
	buf := make([]*model.PageRole, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pageRoleDo) FindInBatches(result *[]*model.PageRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pageRoleDo) Attrs(attrs ...field.AssignExpr) *pageRoleDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pageRoleDo) Assign(attrs ...field.AssignExpr) *pageRoleDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pageRoleDo) Joins(fields ...field.RelationField) *pageRoleDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pageRoleDo) Preload(fields ...field.RelationField) *pageRoleDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pageRoleDo) FirstOrInit() (*model.PageRole, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PageRole), nil
	}
}

func (p pageRoleDo) FirstOrCreate() (*model.PageRole, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PageRole), nil
	}
}

func (p pageRoleDo) FindByPage(offset int, limit int) (result []*model.PageRole, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pageRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pageRoleDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pageRoleDo) Delete(models ...*model.PageRole) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pageRoleDo) withDO(do gen.Dao) *pageRoleDo {
	p.DO = *do.(*gen.DO)
	return p
}
