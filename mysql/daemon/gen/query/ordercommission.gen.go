// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newOrderCommission(db *gorm.DB, opts ...gen.DOOption) orderCommission {
	_orderCommission := orderCommission{}

	_orderCommission.orderCommissionDo.UseDB(db, opts...)
	_orderCommission.orderCommissionDo.UseModel(&model.OrderCommission{})

	tableName := _orderCommission.orderCommissionDo.TableName()
	_orderCommission.ALL = field.NewAsterisk(tableName)
	_orderCommission.ID = field.NewInt64(tableName, "id")
	_orderCommission.CreatedAt = field.NewTime(tableName, "created_at")
	_orderCommission.UpdatedAt = field.NewTime(tableName, "updated_at")
	_orderCommission.DeletedAt = field.NewField(tableName, "deleted_at")
	_orderCommission.RuleID = field.NewInt64(tableName, "rule_id")
	_orderCommission.BelongMonth = field.NewInt64(tableName, "belong_month")
	_orderCommission.CreateOp = field.NewInt64(tableName, "create_op")
	_orderCommission.CreateOpName = field.NewString(tableName, "create_op_name")
	_orderCommission.BelongOp = field.NewInt64(tableName, "belong_op")
	_orderCommission.BelongOpName = field.NewString(tableName, "belong_op_name")
	_orderCommission.BelongDepartmentCode = field.NewString(tableName, "belong_department_code")
	_orderCommission.BelongDepartmentName = field.NewString(tableName, "belong_department_name")

	_orderCommission.fillFieldMap()

	return _orderCommission
}

type orderCommission struct {
	orderCommissionDo

	ALL                  field.Asterisk
	ID                   field.Int64  // 自动编号
	CreatedAt            field.Time   // 创建时间
	UpdatedAt            field.Time   // 更新时间
	DeletedAt            field.Field  // 删除时间
	RuleID               field.Int64  // 提成规则id
	BelongMonth          field.Int64  // 所属月份时间戳
	CreateOp             field.Int64  // 创建op编号
	CreateOpName         field.String // 创建op姓名
	BelongOp             field.Int64  // 所属op编号
	BelongOpName         field.String // 所属op姓名
	BelongDepartmentCode field.String // 部门编码
	BelongDepartmentName field.String // 部门名称

	fieldMap map[string]field.Expr
}

func (o orderCommission) Table(newTableName string) *orderCommission {
	o.orderCommissionDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderCommission) As(alias string) *orderCommission {
	o.orderCommissionDo.DO = *(o.orderCommissionDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderCommission) updateTableName(table string) *orderCommission {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")
	o.RuleID = field.NewInt64(table, "rule_id")
	o.BelongMonth = field.NewInt64(table, "belong_month")
	o.CreateOp = field.NewInt64(table, "create_op")
	o.CreateOpName = field.NewString(table, "create_op_name")
	o.BelongOp = field.NewInt64(table, "belong_op")
	o.BelongOpName = field.NewString(table, "belong_op_name")
	o.BelongDepartmentCode = field.NewString(table, "belong_department_code")
	o.BelongDepartmentName = field.NewString(table, "belong_department_name")

	o.fillFieldMap()

	return o
}

func (o *orderCommission) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderCommission) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 12)
	o.fieldMap["id"] = o.ID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["rule_id"] = o.RuleID
	o.fieldMap["belong_month"] = o.BelongMonth
	o.fieldMap["create_op"] = o.CreateOp
	o.fieldMap["create_op_name"] = o.CreateOpName
	o.fieldMap["belong_op"] = o.BelongOp
	o.fieldMap["belong_op_name"] = o.BelongOpName
	o.fieldMap["belong_department_code"] = o.BelongDepartmentCode
	o.fieldMap["belong_department_name"] = o.BelongDepartmentName
}

func (o orderCommission) clone(db *gorm.DB) orderCommission {
	o.orderCommissionDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderCommission) replaceDB(db *gorm.DB) orderCommission {
	o.orderCommissionDo.ReplaceDB(db)
	return o
}

type orderCommissionDo struct{ gen.DO }

func (o orderCommissionDo) Debug() *orderCommissionDo {
	return o.withDO(o.DO.Debug())
}

func (o orderCommissionDo) WithContext(ctx context.Context) *orderCommissionDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderCommissionDo) ReadDB() *orderCommissionDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderCommissionDo) WriteDB() *orderCommissionDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderCommissionDo) Session(config *gorm.Session) *orderCommissionDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderCommissionDo) Clauses(conds ...clause.Expression) *orderCommissionDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderCommissionDo) Returning(value interface{}, columns ...string) *orderCommissionDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderCommissionDo) Not(conds ...gen.Condition) *orderCommissionDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderCommissionDo) Or(conds ...gen.Condition) *orderCommissionDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderCommissionDo) Select(conds ...field.Expr) *orderCommissionDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderCommissionDo) Where(conds ...gen.Condition) *orderCommissionDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderCommissionDo) Order(conds ...field.Expr) *orderCommissionDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderCommissionDo) Distinct(cols ...field.Expr) *orderCommissionDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderCommissionDo) Omit(cols ...field.Expr) *orderCommissionDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderCommissionDo) Join(table schema.Tabler, on ...field.Expr) *orderCommissionDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderCommissionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *orderCommissionDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderCommissionDo) RightJoin(table schema.Tabler, on ...field.Expr) *orderCommissionDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderCommissionDo) Group(cols ...field.Expr) *orderCommissionDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderCommissionDo) Having(conds ...gen.Condition) *orderCommissionDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderCommissionDo) Limit(limit int) *orderCommissionDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderCommissionDo) Offset(offset int) *orderCommissionDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderCommissionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *orderCommissionDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderCommissionDo) Unscoped() *orderCommissionDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderCommissionDo) Create(values ...*model.OrderCommission) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderCommissionDo) CreateInBatches(values []*model.OrderCommission, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderCommissionDo) Save(values ...*model.OrderCommission) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderCommissionDo) First() (*model.OrderCommission, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderCommission), nil
	}
}

func (o orderCommissionDo) Take() (*model.OrderCommission, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderCommission), nil
	}
}

func (o orderCommissionDo) Last() (*model.OrderCommission, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderCommission), nil
	}
}

func (o orderCommissionDo) Find() ([]*model.OrderCommission, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrderCommission), err
}

func (o orderCommissionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderCommission, err error) {
	buf := make([]*model.OrderCommission, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderCommissionDo) FindInBatches(result *[]*model.OrderCommission, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderCommissionDo) Attrs(attrs ...field.AssignExpr) *orderCommissionDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderCommissionDo) Assign(attrs ...field.AssignExpr) *orderCommissionDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderCommissionDo) Joins(fields ...field.RelationField) *orderCommissionDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderCommissionDo) Preload(fields ...field.RelationField) *orderCommissionDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderCommissionDo) FirstOrInit() (*model.OrderCommission, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderCommission), nil
	}
}

func (o orderCommissionDo) FirstOrCreate() (*model.OrderCommission, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderCommission), nil
	}
}

func (o orderCommissionDo) FindByPage(offset int, limit int) (result []*model.OrderCommission, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderCommissionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderCommissionDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderCommissionDo) Delete(models ...*model.OrderCommission) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderCommissionDo) withDO(do gen.Dao) *orderCommissionDo {
	o.DO = *do.(*gen.DO)
	return o
}
