// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newCompanyQualificationsExt(db *gorm.DB, opts ...gen.DOOption) companyQualificationsExt {
	_companyQualificationsExt := companyQualificationsExt{}

	_companyQualificationsExt.companyQualificationsExtDo.UseDB(db, opts...)
	_companyQualificationsExt.companyQualificationsExtDo.UseModel(&model.CompanyQualificationsExt{})

	tableName := _companyQualificationsExt.companyQualificationsExtDo.TableName()
	_companyQualificationsExt.ALL = field.NewAsterisk(tableName)
	_companyQualificationsExt.ID = field.NewInt64(tableName, "id")
	_companyQualificationsExt.CreatedAt = field.NewTime(tableName, "created_at")
	_companyQualificationsExt.UpdatedAt = field.NewTime(tableName, "updated_at")
	_companyQualificationsExt.DeletedAt = field.NewField(tableName, "deleted_at")
	_companyQualificationsExt.CompanyID = field.NewInt64(tableName, "company_id")
	_companyQualificationsExt.CompanyTraffic = field.NewString(tableName, "company_traffic")
	_companyQualificationsExt.CreditNumber = field.NewString(tableName, "credit_number")
	_companyQualificationsExt.TaxpayerNumber = field.NewString(tableName, "taxpayer_number")
	_companyQualificationsExt.OrganizationNumber = field.NewString(tableName, "organization_number")
	_companyQualificationsExt.ThreeInOneFlag = field.NewInt64(tableName, "three_in_one_flag")
	_companyQualificationsExt.LegalRepresentative = field.NewString(tableName, "legal_representative")
	_companyQualificationsExt.RegistrationDate = field.NewString(tableName, "registration_date")
	_companyQualificationsExt.BusinessScope = field.NewString(tableName, "business_scope")
	_companyQualificationsExt.CompanyWebsite = field.NewString(tableName, "company_website")
	_companyQualificationsExt.Longitude = field.NewString(tableName, "longitude")
	_companyQualificationsExt.Latitude = field.NewString(tableName, "latitude")

	_companyQualificationsExt.fillFieldMap()

	return _companyQualificationsExt
}

type companyQualificationsExt struct {
	companyQualificationsExtDo

	ALL                 field.Asterisk
	ID                  field.Int64  // 自动编号
	CreatedAt           field.Time   // 创建时间
	UpdatedAt           field.Time   // 更新时间
	DeletedAt           field.Field  // 删除时间
	CompanyID           field.Int64  // 公司编码
	CompanyTraffic      field.String // 公司交通方式
	CreditNumber        field.String // 工商营业执照
	TaxpayerNumber      field.String // 税务登记证
	OrganizationNumber  field.String // 组织机构代码
	ThreeInOneFlag      field.Int64  // 三证合一
	LegalRepresentative field.String // 法人
	RegistrationDate    field.String // 注册日期
	BusinessScope       field.String // 经营范围
	CompanyWebsite      field.String // 公司网址
	Longitude           field.String // 经度
	Latitude            field.String // 纬度

	fieldMap map[string]field.Expr
}

func (c companyQualificationsExt) Table(newTableName string) *companyQualificationsExt {
	c.companyQualificationsExtDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c companyQualificationsExt) As(alias string) *companyQualificationsExt {
	c.companyQualificationsExtDo.DO = *(c.companyQualificationsExtDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *companyQualificationsExt) updateTableName(table string) *companyQualificationsExt {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.CompanyID = field.NewInt64(table, "company_id")
	c.CompanyTraffic = field.NewString(table, "company_traffic")
	c.CreditNumber = field.NewString(table, "credit_number")
	c.TaxpayerNumber = field.NewString(table, "taxpayer_number")
	c.OrganizationNumber = field.NewString(table, "organization_number")
	c.ThreeInOneFlag = field.NewInt64(table, "three_in_one_flag")
	c.LegalRepresentative = field.NewString(table, "legal_representative")
	c.RegistrationDate = field.NewString(table, "registration_date")
	c.BusinessScope = field.NewString(table, "business_scope")
	c.CompanyWebsite = field.NewString(table, "company_website")
	c.Longitude = field.NewString(table, "longitude")
	c.Latitude = field.NewString(table, "latitude")

	c.fillFieldMap()

	return c
}

func (c *companyQualificationsExt) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *companyQualificationsExt) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 16)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["company_id"] = c.CompanyID
	c.fieldMap["company_traffic"] = c.CompanyTraffic
	c.fieldMap["credit_number"] = c.CreditNumber
	c.fieldMap["taxpayer_number"] = c.TaxpayerNumber
	c.fieldMap["organization_number"] = c.OrganizationNumber
	c.fieldMap["three_in_one_flag"] = c.ThreeInOneFlag
	c.fieldMap["legal_representative"] = c.LegalRepresentative
	c.fieldMap["registration_date"] = c.RegistrationDate
	c.fieldMap["business_scope"] = c.BusinessScope
	c.fieldMap["company_website"] = c.CompanyWebsite
	c.fieldMap["longitude"] = c.Longitude
	c.fieldMap["latitude"] = c.Latitude
}

func (c companyQualificationsExt) clone(db *gorm.DB) companyQualificationsExt {
	c.companyQualificationsExtDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c companyQualificationsExt) replaceDB(db *gorm.DB) companyQualificationsExt {
	c.companyQualificationsExtDo.ReplaceDB(db)
	return c
}

type companyQualificationsExtDo struct{ gen.DO }

func (c companyQualificationsExtDo) Debug() *companyQualificationsExtDo {
	return c.withDO(c.DO.Debug())
}

func (c companyQualificationsExtDo) WithContext(ctx context.Context) *companyQualificationsExtDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c companyQualificationsExtDo) ReadDB() *companyQualificationsExtDo {
	return c.Clauses(dbresolver.Read)
}

func (c companyQualificationsExtDo) WriteDB() *companyQualificationsExtDo {
	return c.Clauses(dbresolver.Write)
}

func (c companyQualificationsExtDo) Session(config *gorm.Session) *companyQualificationsExtDo {
	return c.withDO(c.DO.Session(config))
}

func (c companyQualificationsExtDo) Clauses(conds ...clause.Expression) *companyQualificationsExtDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c companyQualificationsExtDo) Returning(value interface{}, columns ...string) *companyQualificationsExtDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c companyQualificationsExtDo) Not(conds ...gen.Condition) *companyQualificationsExtDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c companyQualificationsExtDo) Or(conds ...gen.Condition) *companyQualificationsExtDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c companyQualificationsExtDo) Select(conds ...field.Expr) *companyQualificationsExtDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c companyQualificationsExtDo) Where(conds ...gen.Condition) *companyQualificationsExtDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c companyQualificationsExtDo) Order(conds ...field.Expr) *companyQualificationsExtDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c companyQualificationsExtDo) Distinct(cols ...field.Expr) *companyQualificationsExtDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c companyQualificationsExtDo) Omit(cols ...field.Expr) *companyQualificationsExtDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c companyQualificationsExtDo) Join(table schema.Tabler, on ...field.Expr) *companyQualificationsExtDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c companyQualificationsExtDo) LeftJoin(table schema.Tabler, on ...field.Expr) *companyQualificationsExtDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c companyQualificationsExtDo) RightJoin(table schema.Tabler, on ...field.Expr) *companyQualificationsExtDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c companyQualificationsExtDo) Group(cols ...field.Expr) *companyQualificationsExtDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c companyQualificationsExtDo) Having(conds ...gen.Condition) *companyQualificationsExtDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c companyQualificationsExtDo) Limit(limit int) *companyQualificationsExtDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c companyQualificationsExtDo) Offset(offset int) *companyQualificationsExtDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c companyQualificationsExtDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *companyQualificationsExtDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c companyQualificationsExtDo) Unscoped() *companyQualificationsExtDo {
	return c.withDO(c.DO.Unscoped())
}

func (c companyQualificationsExtDo) Create(values ...*model.CompanyQualificationsExt) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c companyQualificationsExtDo) CreateInBatches(values []*model.CompanyQualificationsExt, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c companyQualificationsExtDo) Save(values ...*model.CompanyQualificationsExt) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c companyQualificationsExtDo) First() (*model.CompanyQualificationsExt, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyQualificationsExt), nil
	}
}

func (c companyQualificationsExtDo) Take() (*model.CompanyQualificationsExt, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyQualificationsExt), nil
	}
}

func (c companyQualificationsExtDo) Last() (*model.CompanyQualificationsExt, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyQualificationsExt), nil
	}
}

func (c companyQualificationsExtDo) Find() ([]*model.CompanyQualificationsExt, error) {
	result, err := c.DO.Find()
	return result.([]*model.CompanyQualificationsExt), err
}

func (c companyQualificationsExtDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CompanyQualificationsExt, err error) {
	buf := make([]*model.CompanyQualificationsExt, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c companyQualificationsExtDo) FindInBatches(result *[]*model.CompanyQualificationsExt, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c companyQualificationsExtDo) Attrs(attrs ...field.AssignExpr) *companyQualificationsExtDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c companyQualificationsExtDo) Assign(attrs ...field.AssignExpr) *companyQualificationsExtDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c companyQualificationsExtDo) Joins(fields ...field.RelationField) *companyQualificationsExtDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c companyQualificationsExtDo) Preload(fields ...field.RelationField) *companyQualificationsExtDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c companyQualificationsExtDo) FirstOrInit() (*model.CompanyQualificationsExt, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyQualificationsExt), nil
	}
}

func (c companyQualificationsExtDo) FirstOrCreate() (*model.CompanyQualificationsExt, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyQualificationsExt), nil
	}
}

func (c companyQualificationsExtDo) FindByPage(offset int, limit int) (result []*model.CompanyQualificationsExt, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c companyQualificationsExtDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c companyQualificationsExtDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c companyQualificationsExtDo) Delete(models ...*model.CompanyQualificationsExt) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *companyQualificationsExtDo) withDO(do gen.Dao) *companyQualificationsExtDo {
	c.DO = *do.(*gen.DO)
	return c
}
