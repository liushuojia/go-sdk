// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liushuojia/go-sdk/mysql/daemon/gen/model"
)

func newSystemArea(db *gorm.DB, opts ...gen.DOOption) systemArea {
	_systemArea := systemArea{}

	_systemArea.systemAreaDo.UseDB(db, opts...)
	_systemArea.systemAreaDo.UseModel(&model.SystemArea{})

	tableName := _systemArea.systemAreaDo.TableName()
	_systemArea.ALL = field.NewAsterisk(tableName)
	_systemArea.ID = field.NewInt64(tableName, "id")
	_systemArea.CreatedAt = field.NewTime(tableName, "created_at")
	_systemArea.UpdatedAt = field.NewTime(tableName, "updated_at")
	_systemArea.DeletedAt = field.NewField(tableName, "deleted_at")
	_systemArea.AreaName = field.NewString(tableName, "area_name")
	_systemArea.DataValue = field.NewString(tableName, "data_value")
	_systemArea.AreaEn = field.NewString(tableName, "area_en")
	_systemArea.AreaAbbreviation = field.NewString(tableName, "area_abbreviation")
	_systemArea.AreaDesc = field.NewString(tableName, "area_desc")
	_systemArea.AreaType = field.NewInt64(tableName, "area_type")
	_systemArea.AreaTypeName = field.NewString(tableName, "area_type_name")
	_systemArea.AreaCode = field.NewString(tableName, "area_code")
	_systemArea.IcoStr = field.NewString(tableName, "ico_str")
	_systemArea.StyleColor = field.NewString(tableName, "style_color")
	_systemArea.StyleDisplay = field.NewString(tableName, "style_display")
	_systemArea.Weight = field.NewInt64(tableName, "weight")
	_systemArea.Status = field.NewInt64(tableName, "status")

	_systemArea.fillFieldMap()

	return _systemArea
}

type systemArea struct {
	systemAreaDo

	ALL              field.Asterisk
	ID               field.Int64  // 自动编号
	CreatedAt        field.Time   // 创建时间
	UpdatedAt        field.Time   // 更新时间
	DeletedAt        field.Field  // 删除时间
	AreaName         field.String // 名称
	DataValue        field.String // 值
	AreaEn           field.String // 英文名称
	AreaAbbreviation field.String // 简称名称
	AreaDesc         field.String // 简短描述
	AreaType         field.Int64  // 类型
	AreaTypeName     field.String // 名称
	AreaCode         field.String // 编码
	IcoStr           field.String // 图标
	StyleColor       field.String // 风格颜色
	StyleDisplay     field.String // 显示风格
	Weight           field.Int64  // 权重排序 越大越靠前
	Status           field.Int64  // 状态 1有效 0 停用

	fieldMap map[string]field.Expr
}

func (s systemArea) Table(newTableName string) *systemArea {
	s.systemAreaDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemArea) As(alias string) *systemArea {
	s.systemAreaDo.DO = *(s.systemAreaDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemArea) updateTableName(table string) *systemArea {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.AreaName = field.NewString(table, "area_name")
	s.DataValue = field.NewString(table, "data_value")
	s.AreaEn = field.NewString(table, "area_en")
	s.AreaAbbreviation = field.NewString(table, "area_abbreviation")
	s.AreaDesc = field.NewString(table, "area_desc")
	s.AreaType = field.NewInt64(table, "area_type")
	s.AreaTypeName = field.NewString(table, "area_type_name")
	s.AreaCode = field.NewString(table, "area_code")
	s.IcoStr = field.NewString(table, "ico_str")
	s.StyleColor = field.NewString(table, "style_color")
	s.StyleDisplay = field.NewString(table, "style_display")
	s.Weight = field.NewInt64(table, "weight")
	s.Status = field.NewInt64(table, "status")

	s.fillFieldMap()

	return s
}

func (s *systemArea) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemArea) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 17)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["area_name"] = s.AreaName
	s.fieldMap["data_value"] = s.DataValue
	s.fieldMap["area_en"] = s.AreaEn
	s.fieldMap["area_abbreviation"] = s.AreaAbbreviation
	s.fieldMap["area_desc"] = s.AreaDesc
	s.fieldMap["area_type"] = s.AreaType
	s.fieldMap["area_type_name"] = s.AreaTypeName
	s.fieldMap["area_code"] = s.AreaCode
	s.fieldMap["ico_str"] = s.IcoStr
	s.fieldMap["style_color"] = s.StyleColor
	s.fieldMap["style_display"] = s.StyleDisplay
	s.fieldMap["weight"] = s.Weight
	s.fieldMap["status"] = s.Status
}

func (s systemArea) clone(db *gorm.DB) systemArea {
	s.systemAreaDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s systemArea) replaceDB(db *gorm.DB) systemArea {
	s.systemAreaDo.ReplaceDB(db)
	return s
}

type systemAreaDo struct{ gen.DO }

func (s systemAreaDo) Debug() *systemAreaDo {
	return s.withDO(s.DO.Debug())
}

func (s systemAreaDo) WithContext(ctx context.Context) *systemAreaDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemAreaDo) ReadDB() *systemAreaDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemAreaDo) WriteDB() *systemAreaDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemAreaDo) Session(config *gorm.Session) *systemAreaDo {
	return s.withDO(s.DO.Session(config))
}

func (s systemAreaDo) Clauses(conds ...clause.Expression) *systemAreaDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemAreaDo) Returning(value interface{}, columns ...string) *systemAreaDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemAreaDo) Not(conds ...gen.Condition) *systemAreaDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemAreaDo) Or(conds ...gen.Condition) *systemAreaDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemAreaDo) Select(conds ...field.Expr) *systemAreaDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemAreaDo) Where(conds ...gen.Condition) *systemAreaDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemAreaDo) Order(conds ...field.Expr) *systemAreaDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemAreaDo) Distinct(cols ...field.Expr) *systemAreaDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemAreaDo) Omit(cols ...field.Expr) *systemAreaDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemAreaDo) Join(table schema.Tabler, on ...field.Expr) *systemAreaDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemAreaDo) LeftJoin(table schema.Tabler, on ...field.Expr) *systemAreaDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemAreaDo) RightJoin(table schema.Tabler, on ...field.Expr) *systemAreaDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemAreaDo) Group(cols ...field.Expr) *systemAreaDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemAreaDo) Having(conds ...gen.Condition) *systemAreaDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemAreaDo) Limit(limit int) *systemAreaDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemAreaDo) Offset(offset int) *systemAreaDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemAreaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *systemAreaDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemAreaDo) Unscoped() *systemAreaDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemAreaDo) Create(values ...*model.SystemArea) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemAreaDo) CreateInBatches(values []*model.SystemArea, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemAreaDo) Save(values ...*model.SystemArea) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemAreaDo) First() (*model.SystemArea, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemArea), nil
	}
}

func (s systemAreaDo) Take() (*model.SystemArea, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemArea), nil
	}
}

func (s systemAreaDo) Last() (*model.SystemArea, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemArea), nil
	}
}

func (s systemAreaDo) Find() ([]*model.SystemArea, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemArea), err
}

func (s systemAreaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemArea, err error) {
	buf := make([]*model.SystemArea, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemAreaDo) FindInBatches(result *[]*model.SystemArea, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemAreaDo) Attrs(attrs ...field.AssignExpr) *systemAreaDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemAreaDo) Assign(attrs ...field.AssignExpr) *systemAreaDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemAreaDo) Joins(fields ...field.RelationField) *systemAreaDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemAreaDo) Preload(fields ...field.RelationField) *systemAreaDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemAreaDo) FirstOrInit() (*model.SystemArea, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemArea), nil
	}
}

func (s systemAreaDo) FirstOrCreate() (*model.SystemArea, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemArea), nil
	}
}

func (s systemAreaDo) FindByPage(offset int, limit int) (result []*model.SystemArea, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemAreaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemAreaDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemAreaDo) Delete(models ...*model.SystemArea) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemAreaDo) withDO(do gen.Dao) *systemAreaDo {
	s.DO = *do.(*gen.DO)
	return s
}
